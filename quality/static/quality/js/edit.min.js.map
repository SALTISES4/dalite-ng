{"version":3,"file":"edit.min.js","sources":["peerinst/static/peerinst/js/_ajax/utils.js","peerinst/static/peerinst/js/utils.js","quality/static/quality/js/_edit/index.js","quality/static/quality/js/edit.js"],"sourcesContent":["export function getCsrfToken() {\n  const name = \"csrftoken\";\n  if (document.cookie && document.cookie !== \"\") {\n    return document.cookie\n      .split(\";\")\n      .map(c => c.trim())\n      .filter(c => c.substring(0, name.length + 1) === name + \"=\")\n      .map(c => decodeURIComponent(c.substring(name.length + 1)))[0];\n  } else {\n    return null;\n  }\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","\"use strict\";\n\nexport function clear(node) {\n  while (node.hasChildNodes()) {\n    node.removeChild(node.lastChild);\n  }\n}\n\nexport function formatDatetime(datetime) {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n","import { buildReq } from \"../../../../../peerinst/static/peerinst/js/_ajax/utils.js\"; // eslint-disable-line\nimport { clear } from \"../../../../../peerinst/static/peerinst/js/utils.js\"; // eslint-disable-line\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    quality: {\n      pk: data.quality.pk,\n      qualityType: data.quality.quality_type,\n    },\n    next: data.next,\n    available: data.available.map(c => ({\n      name: c.name,\n      fullName: c.full_name,\n      description: c.description,\n    })),\n    criterions: data.criterions,\n    urls: {\n      addCriterion: data.urls.add_criterion,\n      updateCriterion: data.urls.update_criterion,\n      removeCriterion: data.urls.remove_criterion,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction updateCriterionOption(event, option, criterion) {\n  const type = option.getAttribute(\"data-type\");\n  const name = option.getAttribute(\"name\");\n  let value;\n\n  if (type === \"CommaSepField\") {\n    option.querySelector(\".comma-sep-input--input\").setCustomValidity(\"\");\n    if (event.key === \"Enter\" || event.key === \",\" || event.key === \" \") {\n      if (value === \" \" || value === \",\") {\n        value = \"\";\n      }\n      value = option.querySelector(\".comma-sep-input--input\").value;\n      if (!value) {\n        event.preventDefault();\n        return;\n      }\n      if (criterion[name].allowed) {\n        if (!criterion[name].allowed.includes(value)) {\n          toggleCriterionOptionError(\n            option.querySelector(\".comma-sep-input--input\"),\n            `${value} isn't an accepted language. Options are ${criterion[\n              name\n            ].allowed\n              .slice(0, criterion[name].allowed.length - 2)\n              .join(\", \")} and ${\n              criterion[name].allowed[criterion[name].allowed.length - 1]\n            }.`,\n          );\n          option.querySelector(\".comma-sep-input--input\").value = \"\";\n          event.preventDefault();\n          return;\n        }\n      }\n    } else if (event.key === \"Backspace\") {\n      value = option.querySelector(\".comma-sep-input--input\").value;\n      if (value) {\n        return;\n      }\n    } else {\n      return;\n    }\n  } else if (\n    type === \"PositiveIntegerField\" ||\n    type === \"ProbabilityField\" ||\n    type === \"FloatField\" ||\n    type === \"IntegerField\"\n  ) {\n    option.setCustomValidity(\"\");\n    value = option.value;\n    if (value === \"\") {\n      if (event.inputType === \"insertText\" && event.data === \"-\") {\n        value = 0;\n        option.value = 0;\n      } else {\n        return;\n      }\n    }\n    if (type === \"ProbabilityField\") {\n      if (value < 0) {\n        value = 0;\n        option.value = value;\n      } else if (value > 1) {\n        value = parseFloat(\"0.\" + value);\n        option.value = value;\n      } else if (value.toString().length > 4) {\n        option.value = model.criterions.filter(\n          c => c.name === criterion.name,\n        )[0][name].value;\n        return;\n      } else if (\n        model.criterions.filter(c => c.name === criterion.name)[0][name]\n          .value == value\n      ) {\n        if (value === \"00\") {\n          option.value = \"0\";\n        }\n        return;\n      }\n    }\n  } else if (type === \"BooleanField\") {\n    option.setCustomValidity(\"\");\n    value = option.value === \"false\";\n  } else {\n    option.setCustomValidity(\"\");\n    value = option.value;\n  }\n\n  const data = {\n    quality: model.quality.pk,\n    criterion: criterion.name,\n    field: name,\n    value: value,\n  };\n\n  const req = buildReq(data, \"post\");\n  fetch(model.urls.updateCriterion, req)\n    .then(resp => (resp.ok ? resp.json() : resp.text()))\n    .then(data => {\n      if (typeof data === \"string\") {\n        toggleCriterionOptionError(err);\n      } else {\n        model.criterions = model.criterions.map(c =>\n          c.name === data.name ? data : c,\n        );\n        if (name === \"weight\") {\n          criterionOptionView(type, data.weight, criterion, option);\n        } else {\n          criterionOptionView(type, data[name].value, criterion, option);\n        }\n      }\n    })\n    .catch(err => console.log(err));\n}\n\nfunction addCriterion(criterion) {\n  const data = {\n    quality: model.quality.pk,\n    criterion: criterion.name,\n  };\n\n  const req = buildReq(data, \"post\");\n  fetch(model.urls.addCriterion, req)\n    .then(resp => resp.json())\n    .then(json => {\n      model.criterions.push(json);\n      criterionsView();\n      newCriterionsView();\n      toggleShowAddCriterion();\n    })\n    .catch(err => console.log(err));\n}\n\nfunction removeCriterion(criterion) {\n  const data = {\n    quality: model.quality.pk,\n    criterion: criterion.name,\n  };\n  const req = buildReq(data, \"post\");\n  fetch(model.urls.removeCriterion, req)\n    .then(resp => {\n      if (resp.ok) {\n        model.criterions = model.criterions.filter(\n          c => c.name != criterion.name,\n        );\n        criterionsView();\n        newCriterionsView();\n      }\n    })\n    .catch(err => console.log(err));\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  returnLinkView();\n  criterionsView();\n  newCriterionsView();\n}\n\nfunction returnLinkView() {\n  const link = document.querySelector(\"#back-link\");\n  if (model.next) {\n    link.href = model.next;\n    if (model.quality.qualityType === \"teacher\") {\n      link.textContent = \"Back to account\";\n    } else {\n      link.textContent = `Back to ${model.quality.qualityType}`;\n    }\n  } else {\n    link.parentNode.removeChild(link);\n  }\n}\n\nfunction criterionsView() {\n  const div = document.querySelector(\"#criterions\");\n  clear(div);\n  model.criterions.forEach(criterion => {\n    div.appendChild(criterionView(criterion));\n  });\n}\n\nfunction criterionView(criterion) {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"criterion\");\n  div.classList.add(\"criterion__showing\");\n  div.name = criterion.name;\n\n  const name = document.createElement(\"div\");\n  name.classList.add(\"criterion--name\");\n  name.textContent = criterion.full_name;\n  name.title = criterion.description;\n  name.addEventListener(\"click\", () => toggleCriterionOptions(div));\n  div.appendChild(name);\n\n  const remove = document.createElement(\"button\");\n  remove.classList.add(\"criterion--remove\");\n  remove.addEventListener(\"click\", event => {\n    removeCriterion(criterion);\n    event.stopPropagation();\n  });\n  name.appendChild(remove);\n  const icon = document.createElement(\"i\");\n  icon.classList.add(\"material-icons\");\n  icon.textContent = \"close\";\n  remove.appendChild(icon);\n\n  const options = document.createElement(\"div\");\n  options.classList.add(\"criterion--options\");\n  div.appendChild(options);\n\n  const binaryThreshold =\n    criterion.versions[criterion.version - 1].binary_threshold;\n\n  // const versionLabel = document.createElement(\"label\");\n  // versionLabel.textContent = \"Version:\";\n  // const version = document.createElement(\"select\");\n  // const versions = [document.createElement(\"option\")];\n  // versions[0].value = 0;\n  // versions[0].textContent = \"0 (latest)\";\n  // versions.forEach(v => {\n  // version.appendChild(v);\n  // });\n  // options.appendChild(versionLabel);\n  // options.appendChild(version);\n  //\n  const weightLabel = document.createElement(\"label\");\n  weightLabel.textContent = \"Weight:\";\n  const weight = criterionOptionView(\n    \"PositiveIntegerField\",\n    criterion.weight,\n    criterion,\n  );\n  weight.name = \"weight\";\n  options.appendChild(weightLabel);\n  options.appendChild(weight);\n\n  const otherOptions = Object.keys(criterion).filter(\n    o =>\n      ![\n        \"description\",\n        \"full_name\",\n        \"is_beta\",\n        \"name\",\n        \"version\",\n        \"versions\",\n        \"weight\",\n      ].includes(o),\n  );\n  otherOptions.forEach(o => {\n    if (!binaryThreshold || o !== \"threshold\") {\n      const option = criterion[o];\n      const label = document.createElement(\"label\");\n      label.textContent = `${option.full_name}:`;\n      label.title = option.description;\n      const input = criterionOptionView(\n        option.type,\n        option.value,\n        criterion,\n        null,\n      );\n      input.setAttribute(\"name\", option.name);\n      options.appendChild(label);\n      options.appendChild(input);\n    }\n  });\n\n  return div;\n}\n\nfunction criterionOptionView(type, value, criterion, input = null) {\n  const focus = !!input;\n  if (type === \"PositiveIntegerField\") {\n    if (!input) {\n      input = document.createElement(\"input\");\n      input.setAttribute(\"data-type\", type);\n      input.type = \"number\";\n      input.min = 0;\n      input.addEventListener(\"input\", event =>\n        updateCriterionOption(event, input, criterion),\n      );\n    }\n    input.value = value;\n    return input;\n  } else if (type === \"ProbabilityField\") {\n    if (!input) {\n      input = document.createElement(\"input\");\n      input.setAttribute(\"data-type\", type);\n      input.type = \"number\";\n      input.min = 0;\n      input.max = 1;\n      input.step = 0.01;\n      input.addEventListener(\"input\", event =>\n        updateCriterionOption(event, input, criterion),\n      );\n      if (focus) {\n        input.focus();\n      }\n    }\n    input.value = value;\n    return input;\n  } else if (type === \"CommaSepField\") {\n    if (!input) {\n      input = document.createElement(\"div\");\n      input.setAttribute(\"data-type\", type);\n      input.classList.add(\"comma-sep-input\");\n      input.type = \"comma-sep\";\n    }\n    clear(input);\n    value.forEach(word => {\n      const span = document.createElement(\"span\");\n      span.classList.add(\"comma-sep-input--word\");\n      span.textContent = word;\n      input.appendChild(span);\n    });\n    const input_ = document.createElement(\"input\");\n    input_.classList.add(\"comma-sep-input--input\");\n    input_.type = \"text\";\n    input_.addEventListener(\"keydown\", event =>\n      updateCriterionOption(event, input, criterion),\n    );\n    input.appendChild(input_);\n    if (focus) {\n      input_.focus();\n    }\n    return input;\n  } else if (type === \"BooleanField\") {\n    if (!input) {\n      input = document.createElement(\"div\");\n      input.setAttribute(\"data-type\", type);\n      input.classList.add(\"boolean-input\");\n      clear(input);\n      const input_ = document.createElement(\"input\");\n      input_.classList.add(\"boolean-input--input\");\n      input_.type = \"checkbox\";\n      input_.addEventListener(\"click\", event =>\n        updateCriterionOption(event, input, criterion),\n      );\n      input.appendChild(input_);\n      const background = document.createElement(\"span\");\n      background.classList.add(\"boolean-input--background\");\n      input.appendChild(background);\n      const mark = document.createElement(\"span\");\n      mark.classList.add(\"boolean-input--mark\");\n      input.appendChild(mark);\n      if (focus) {\n        input_.focus();\n      }\n    }\n    input.value = value;\n    return input;\n  }\n}\n\nfunction toggleCriterionOptions(criterion) {\n  if (criterion.classList.contains(\"criterion__showing\")) {\n    criterion.classList.remove(\"criterion__showing\");\n  } else {\n    criterion.classList.add(\"criterion__showing\");\n  }\n}\n\nfunction toggleCriterionOptionError(option, msg) {\n  option.setCustomValidity(msg);\n}\n\nfunction newCriterionsView() {\n  const button = document.querySelector(\".add-criterion button\");\n  const available = model.available.filter(\n    c => !model.criterions.map(cc => cc.name).includes(c.name),\n  );\n  if (available.length) {\n    const ul = document.querySelector(\".available-criterions ul\");\n    clear(ul);\n    available.forEach(criterion => {\n      ul.appendChild(newCriterionView(criterion));\n    });\n    button.disabled = false;\n    button.title = \"Add a new criterion\";\n  } else {\n    button.disabled = true;\n    button.title = \"There are no new criterions to add\";\n  }\n}\n\nfunction newCriterionView(criterion) {\n  const li = document.createElement(\"li\");\n  li.title = criterion.description;\n  li.textContent = criterion.fullName;\n  li.addEventListener(\"click\", () => addCriterion(criterion));\n  return li;\n}\n\nfunction toggleShowAddCriterion() {\n  const div = document.querySelector(\".add-criterion\");\n  if (div.classList.contains(\"add-criterion__showing\")) {\n    div.classList.remove(\"add-criterion__showing\");\n  } else {\n    if (model.available.length) {\n      div.classList.add(\"add-criterion__showing\");\n    }\n  }\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners() {\n  initAddCriterionListeners();\n}\n\nfunction initAddCriterionListeners() {\n  document\n    .querySelector(\".add-criterion button\")\n    .addEventListener(\"click\", toggleShowAddCriterion);\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(data) {\n  initModel(data);\n  view();\n  initEventListeners();\n}\n","\"use strict\";\n\nexport { init } from \"./_edit/index.js\";\n"],"names":["getCsrfToken","name","document","cookie","split","map","c","trim","filter","substring","length","decodeURIComponent","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","clear","node","hasChildNodes","removeChild","lastChild","model","initModel","quality","pk","qualityType","quality_type","next","available","fullName","full_name","description","criterions","urls","addCriterion","add_criterion","updateCriterion","update_criterion","removeCriterion","remove_criterion","updateCriterionOption","event","option","criterion","type","getAttribute","value","querySelector","setCustomValidity","key","preventDefault","allowed","includes","toggleCriterionOptionError","slice","join","inputType","parseFloat","toString","field","req","fetch","then","resp","ok","json","text","err","criterionOptionView","weight","catch","console","log","push","criterionsView","newCriterionsView","toggleShowAddCriterion","view","returnLinkView","link","href","textContent","parentNode","div","forEach","appendChild","criterionView","createElement","classList","add","title","addEventListener","toggleCriterionOptions","remove","stopPropagation","icon","options","binaryThreshold","versions","version","binary_threshold","weightLabel","otherOptions","Object","keys","o","label","input","setAttribute","focus","min","max","step","word","span","input_","background","mark","contains","msg","button","cc","ul","newCriterionView","disabled","li","initEventListeners","initAddCriterionListeners","init"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9ob21lL2FudG9pbmUvZG9jdW1lbnRzL3dvcmsvc2NpdmVyby9wcm9qZWN0cy9kYWxpdGUvZGFsaXRlL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fYWpheC91dGlscy5qcyIsIi9ob21lL2FudG9pbmUvZG9jdW1lbnRzL3dvcmsvc2NpdmVyby9wcm9qZWN0cy9kYWxpdGUvZGFsaXRlL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy91dGlscy5qcyIsIi9ob21lL2FudG9pbmUvZG9jdW1lbnRzL3dvcmsvc2NpdmVyby9wcm9qZWN0cy9kYWxpdGUvZGFsaXRlL3F1YWxpdHkvc3RhdGljL3F1YWxpdHkvanMvX2VkaXQvaW5kZXguanMiLCIvaG9tZS9hbnRvaW5lL2RvY3VtZW50cy93b3JrL3NjaXZlcm8vcHJvamVjdHMvZGFsaXRlL2RhbGl0ZS9xdWFsaXR5L3N0YXRpYy9xdWFsaXR5L2pzL2VkaXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGdldENzcmZUb2tlbigpIHtcbiAgY29uc3QgbmFtZSA9IFwiY3NyZnRva2VuXCI7XG4gIGlmIChkb2N1bWVudC5jb29raWUgJiYgZG9jdW1lbnQuY29va2llICE9PSBcIlwiKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNvb2tpZVxuICAgICAgLnNwbGl0KFwiO1wiKVxuICAgICAgLm1hcChjID0+IGMudHJpbSgpKVxuICAgICAgLmZpbHRlcihjID0+IGMuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoICsgMSkgPT09IG5hbWUgKyBcIj1cIilcbiAgICAgIC5tYXAoYyA9PiBkZWNvZGVVUklDb21wb25lbnQoYy5zdWJzdHJpbmcobmFtZS5sZW5ndGggKyAxKSkpWzBdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFJlcShkYXRhLCBtZXRob2QpIHtcbiAgaWYgKG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtQ1NSRlRva2VuXCI6IGdldENzcmZUb2tlbigpLFxuICAgICAgfSxcbiAgICB9O1xuICB9IGVsc2UgaWYgKG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcInBvc3RcIikge1xuICAgIGNvbnN0IGJvZHkgPSBkYXRhID8gSlNPTi5zdHJpbmdpZnkoZGF0YSkgOiBcIlwiO1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgYm9keTogYm9keSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiWC1DU1JGVG9rZW5cIjogZ2V0Q3NyZlRva2VuKCksXG4gICAgICB9LFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoYE1ldGhvZCAke21ldGhvZH0gbm90IGltcGxlbWVudGVkIHlldC5gKTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhcihub2RlKSB7XG4gIHdoaWxlIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRldGltZShkYXRldGltZSkge1xuICByZXR1cm4gKFxuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyB5ZWFyOiBcIm51bWVyaWNcIiB9KSArXG4gICAgXCItXCIgK1xuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyBtb250aDogXCIyLWRpZ2l0XCIgfSkgK1xuICAgIFwiLVwiICtcbiAgICBkYXRldGltZS50b0xvY2FsZVN0cmluZyhcImVuLWNhXCIsIHsgZGF5OiBcIjItZGlnaXRcIiB9KSArXG4gICAgXCIgXCIgK1xuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyBob3VyOiBcIjItZGlnaXRcIiwgaG91cjEyOiBmYWxzZSB9KSArXG4gICAgXCI6XCIgK1xuICAgIGRhdGV0aW1lLnRvTG9jYWxlU3RyaW5nKFwiZW4tY2FcIiwgeyBtaW51dGU6IFwiMi1kaWdpdFwiIH0pXG4gICk7XG59XG4iLCJpbXBvcnQgeyBidWlsZFJlcSB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9wZWVyaW5zdC9zdGF0aWMvcGVlcmluc3QvanMvX2FqYXgvdXRpbHMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuaW1wb3J0IHsgY2xlYXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL3V0aWxzLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuLyoqKioqKioqKi9cbi8qIG1vZGVsICovXG4vKioqKioqKioqL1xuXG5sZXQgbW9kZWw7XG5cbmZ1bmN0aW9uIGluaXRNb2RlbChkYXRhKSB7XG4gIG1vZGVsID0ge1xuICAgIHF1YWxpdHk6IHtcbiAgICAgIHBrOiBkYXRhLnF1YWxpdHkucGssXG4gICAgICBxdWFsaXR5VHlwZTogZGF0YS5xdWFsaXR5LnF1YWxpdHlfdHlwZSxcbiAgICB9LFxuICAgIG5leHQ6IGRhdGEubmV4dCxcbiAgICBhdmFpbGFibGU6IGRhdGEuYXZhaWxhYmxlLm1hcChjID0+ICh7XG4gICAgICBuYW1lOiBjLm5hbWUsXG4gICAgICBmdWxsTmFtZTogYy5mdWxsX25hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogYy5kZXNjcmlwdGlvbixcbiAgICB9KSksXG4gICAgY3JpdGVyaW9uczogZGF0YS5jcml0ZXJpb25zLFxuICAgIHVybHM6IHtcbiAgICAgIGFkZENyaXRlcmlvbjogZGF0YS51cmxzLmFkZF9jcml0ZXJpb24sXG4gICAgICB1cGRhdGVDcml0ZXJpb246IGRhdGEudXJscy51cGRhdGVfY3JpdGVyaW9uLFxuICAgICAgcmVtb3ZlQ3JpdGVyaW9uOiBkYXRhLnVybHMucmVtb3ZlX2NyaXRlcmlvbixcbiAgICB9LFxuICB9O1xufVxuXG4vKioqKioqKioqKi9cbi8qIHVwZGF0ZSAqL1xuLyoqKioqKioqKiovXG5cbmZ1bmN0aW9uIHVwZGF0ZUNyaXRlcmlvbk9wdGlvbihldmVudCwgb3B0aW9uLCBjcml0ZXJpb24pIHtcbiAgY29uc3QgdHlwZSA9IG9wdGlvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIik7XG4gIGNvbnN0IG5hbWUgPSBvcHRpb24uZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcbiAgbGV0IHZhbHVlO1xuXG4gIGlmICh0eXBlID09PSBcIkNvbW1hU2VwRmllbGRcIikge1xuICAgIG9wdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNvbW1hLXNlcC1pbnB1dC0taW5wdXRcIikuc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiIHx8IGV2ZW50LmtleSA9PT0gXCIsXCIgfHwgZXZlbnQua2V5ID09PSBcIiBcIikge1xuICAgICAgaWYgKHZhbHVlID09PSBcIiBcIiB8fCB2YWx1ZSA9PT0gXCIsXCIpIHtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBvcHRpb24ucXVlcnlTZWxlY3RvcihcIi5jb21tYS1zZXAtaW5wdXQtLWlucHV0XCIpLnZhbHVlO1xuICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoY3JpdGVyaW9uW25hbWVdLmFsbG93ZWQpIHtcbiAgICAgICAgaWYgKCFjcml0ZXJpb25bbmFtZV0uYWxsb3dlZC5pbmNsdWRlcyh2YWx1ZSkpIHtcbiAgICAgICAgICB0b2dnbGVDcml0ZXJpb25PcHRpb25FcnJvcihcbiAgICAgICAgICAgIG9wdGlvbi5xdWVyeVNlbGVjdG9yKFwiLmNvbW1hLXNlcC1pbnB1dC0taW5wdXRcIiksXG4gICAgICAgICAgICBgJHt2YWx1ZX0gaXNuJ3QgYW4gYWNjZXB0ZWQgbGFuZ3VhZ2UuIE9wdGlvbnMgYXJlICR7Y3JpdGVyaW9uW1xuICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICBdLmFsbG93ZWRcbiAgICAgICAgICAgICAgLnNsaWNlKDAsIGNyaXRlcmlvbltuYW1lXS5hbGxvd2VkLmxlbmd0aCAtIDIpXG4gICAgICAgICAgICAgIC5qb2luKFwiLCBcIil9IGFuZCAke1xuICAgICAgICAgICAgICBjcml0ZXJpb25bbmFtZV0uYWxsb3dlZFtjcml0ZXJpb25bbmFtZV0uYWxsb3dlZC5sZW5ndGggLSAxXVxuICAgICAgICAgICAgfS5gLFxuICAgICAgICAgICk7XG4gICAgICAgICAgb3B0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuY29tbWEtc2VwLWlucHV0LS1pbnB1dFwiKS52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJCYWNrc3BhY2VcIikge1xuICAgICAgdmFsdWUgPSBvcHRpb24ucXVlcnlTZWxlY3RvcihcIi5jb21tYS1zZXAtaW5wdXQtLWlucHV0XCIpLnZhbHVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICB0eXBlID09PSBcIlBvc2l0aXZlSW50ZWdlckZpZWxkXCIgfHxcbiAgICB0eXBlID09PSBcIlByb2JhYmlsaXR5RmllbGRcIiB8fFxuICAgIHR5cGUgPT09IFwiRmxvYXRGaWVsZFwiIHx8XG4gICAgdHlwZSA9PT0gXCJJbnRlZ2VyRmllbGRcIlxuICApIHtcbiAgICBvcHRpb24uc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XG4gICAgdmFsdWUgPSBvcHRpb24udmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBcIlwiKSB7XG4gICAgICBpZiAoZXZlbnQuaW5wdXRUeXBlID09PSBcImluc2VydFRleHRcIiAmJiBldmVudC5kYXRhID09PSBcIi1cIikge1xuICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcIlByb2JhYmlsaXR5RmllbGRcIikge1xuICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICAgIG9wdGlvbi52YWx1ZSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KFwiMC5cIiArIHZhbHVlKTtcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gdmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoID4gNCkge1xuICAgICAgICBvcHRpb24udmFsdWUgPSBtb2RlbC5jcml0ZXJpb25zLmZpbHRlcihcbiAgICAgICAgICBjID0+IGMubmFtZSA9PT0gY3JpdGVyaW9uLm5hbWUsXG4gICAgICAgIClbMF1bbmFtZV0udmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIG1vZGVsLmNyaXRlcmlvbnMuZmlsdGVyKGMgPT4gYy5uYW1lID09PSBjcml0ZXJpb24ubmFtZSlbMF1bbmFtZV1cbiAgICAgICAgICAudmFsdWUgPT0gdmFsdWVcbiAgICAgICkge1xuICAgICAgICBpZiAodmFsdWUgPT09IFwiMDBcIikge1xuICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IFwiMFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJCb29sZWFuRmllbGRcIikge1xuICAgIG9wdGlvbi5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcbiAgICB2YWx1ZSA9IG9wdGlvbi52YWx1ZSA9PT0gXCJmYWxzZVwiO1xuICB9IGVsc2Uge1xuICAgIG9wdGlvbi5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcbiAgICB2YWx1ZSA9IG9wdGlvbi52YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgcXVhbGl0eTogbW9kZWwucXVhbGl0eS5wayxcbiAgICBjcml0ZXJpb246IGNyaXRlcmlvbi5uYW1lLFxuICAgIGZpZWxkOiBuYW1lLFxuICAgIHZhbHVlOiB2YWx1ZSxcbiAgfTtcblxuICBjb25zdCByZXEgPSBidWlsZFJlcShkYXRhLCBcInBvc3RcIik7XG4gIGZldGNoKG1vZGVsLnVybHMudXBkYXRlQ3JpdGVyaW9uLCByZXEpXG4gICAgLnRoZW4ocmVzcCA9PiAocmVzcC5vayA/IHJlc3AuanNvbigpIDogcmVzcC50ZXh0KCkpKVxuICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRvZ2dsZUNyaXRlcmlvbk9wdGlvbkVycm9yKGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlbC5jcml0ZXJpb25zID0gbW9kZWwuY3JpdGVyaW9ucy5tYXAoYyA9PlxuICAgICAgICAgIGMubmFtZSA9PT0gZGF0YS5uYW1lID8gZGF0YSA6IGMsXG4gICAgICAgICk7XG4gICAgICAgIGlmIChuYW1lID09PSBcIndlaWdodFwiKSB7XG4gICAgICAgICAgY3JpdGVyaW9uT3B0aW9uVmlldyh0eXBlLCBkYXRhLndlaWdodCwgY3JpdGVyaW9uLCBvcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNyaXRlcmlvbk9wdGlvblZpZXcodHlwZSwgZGF0YVtuYW1lXS52YWx1ZSwgY3JpdGVyaW9uLCBvcHRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xufVxuXG5mdW5jdGlvbiBhZGRDcml0ZXJpb24oY3JpdGVyaW9uKSB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgcXVhbGl0eTogbW9kZWwucXVhbGl0eS5wayxcbiAgICBjcml0ZXJpb246IGNyaXRlcmlvbi5uYW1lLFxuICB9O1xuXG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKGRhdGEsIFwicG9zdFwiKTtcbiAgZmV0Y2gobW9kZWwudXJscy5hZGRDcml0ZXJpb24sIHJlcSlcbiAgICAudGhlbihyZXNwID0+IHJlc3AuanNvbigpKVxuICAgIC50aGVuKGpzb24gPT4ge1xuICAgICAgbW9kZWwuY3JpdGVyaW9ucy5wdXNoKGpzb24pO1xuICAgICAgY3JpdGVyaW9uc1ZpZXcoKTtcbiAgICAgIG5ld0NyaXRlcmlvbnNWaWV3KCk7XG4gICAgICB0b2dnbGVTaG93QWRkQ3JpdGVyaW9uKCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDcml0ZXJpb24oY3JpdGVyaW9uKSB7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgcXVhbGl0eTogbW9kZWwucXVhbGl0eS5wayxcbiAgICBjcml0ZXJpb246IGNyaXRlcmlvbi5uYW1lLFxuICB9O1xuICBjb25zdCByZXEgPSBidWlsZFJlcShkYXRhLCBcInBvc3RcIik7XG4gIGZldGNoKG1vZGVsLnVybHMucmVtb3ZlQ3JpdGVyaW9uLCByZXEpXG4gICAgLnRoZW4ocmVzcCA9PiB7XG4gICAgICBpZiAocmVzcC5vaykge1xuICAgICAgICBtb2RlbC5jcml0ZXJpb25zID0gbW9kZWwuY3JpdGVyaW9ucy5maWx0ZXIoXG4gICAgICAgICAgYyA9PiBjLm5hbWUgIT0gY3JpdGVyaW9uLm5hbWUsXG4gICAgICAgICk7XG4gICAgICAgIGNyaXRlcmlvbnNWaWV3KCk7XG4gICAgICAgIG5ld0NyaXRlcmlvbnNWaWV3KCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpO1xufVxuXG4vKioqKioqKiovXG4vKiB2aWV3ICovXG4vKioqKioqKiovXG5cbmZ1bmN0aW9uIHZpZXcoKSB7XG4gIHJldHVybkxpbmtWaWV3KCk7XG4gIGNyaXRlcmlvbnNWaWV3KCk7XG4gIG5ld0NyaXRlcmlvbnNWaWV3KCk7XG59XG5cbmZ1bmN0aW9uIHJldHVybkxpbmtWaWV3KCkge1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNiYWNrLWxpbmtcIik7XG4gIGlmIChtb2RlbC5uZXh0KSB7XG4gICAgbGluay5ocmVmID0gbW9kZWwubmV4dDtcbiAgICBpZiAobW9kZWwucXVhbGl0eS5xdWFsaXR5VHlwZSA9PT0gXCJ0ZWFjaGVyXCIpIHtcbiAgICAgIGxpbmsudGV4dENvbnRlbnQgPSBcIkJhY2sgdG8gYWNjb3VudFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rLnRleHRDb250ZW50ID0gYEJhY2sgdG8gJHttb2RlbC5xdWFsaXR5LnF1YWxpdHlUeXBlfWA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxpbmsucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcml0ZXJpb25zVmlldygpIHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjcml0ZXJpb25zXCIpO1xuICBjbGVhcihkaXYpO1xuICBtb2RlbC5jcml0ZXJpb25zLmZvckVhY2goY3JpdGVyaW9uID0+IHtcbiAgICBkaXYuYXBwZW5kQ2hpbGQoY3JpdGVyaW9uVmlldyhjcml0ZXJpb24pKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyaXRlcmlvblZpZXcoY3JpdGVyaW9uKSB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGRpdi5jbGFzc0xpc3QuYWRkKFwiY3JpdGVyaW9uXCIpO1xuICBkaXYuY2xhc3NMaXN0LmFkZChcImNyaXRlcmlvbl9fc2hvd2luZ1wiKTtcbiAgZGl2Lm5hbWUgPSBjcml0ZXJpb24ubmFtZTtcblxuICBjb25zdCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgbmFtZS5jbGFzc0xpc3QuYWRkKFwiY3JpdGVyaW9uLS1uYW1lXCIpO1xuICBuYW1lLnRleHRDb250ZW50ID0gY3JpdGVyaW9uLmZ1bGxfbmFtZTtcbiAgbmFtZS50aXRsZSA9IGNyaXRlcmlvbi5kZXNjcmlwdGlvbjtcbiAgbmFtZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdG9nZ2xlQ3JpdGVyaW9uT3B0aW9ucyhkaXYpKTtcbiAgZGl2LmFwcGVuZENoaWxkKG5hbWUpO1xuXG4gIGNvbnN0IHJlbW92ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIHJlbW92ZS5jbGFzc0xpc3QuYWRkKFwiY3JpdGVyaW9uLS1yZW1vdmVcIik7XG4gIHJlbW92ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnQgPT4ge1xuICAgIHJlbW92ZUNyaXRlcmlvbihjcml0ZXJpb24pO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcbiAgbmFtZS5hcHBlbmRDaGlsZChyZW1vdmUpO1xuICBjb25zdCBpY29uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlcIik7XG4gIGljb24uY2xhc3NMaXN0LmFkZChcIm1hdGVyaWFsLWljb25zXCIpO1xuICBpY29uLnRleHRDb250ZW50ID0gXCJjbG9zZVwiO1xuICByZW1vdmUuYXBwZW5kQ2hpbGQoaWNvbik7XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIG9wdGlvbnMuY2xhc3NMaXN0LmFkZChcImNyaXRlcmlvbi0tb3B0aW9uc1wiKTtcbiAgZGl2LmFwcGVuZENoaWxkKG9wdGlvbnMpO1xuXG4gIGNvbnN0IGJpbmFyeVRocmVzaG9sZCA9XG4gICAgY3JpdGVyaW9uLnZlcnNpb25zW2NyaXRlcmlvbi52ZXJzaW9uIC0gMV0uYmluYXJ5X3RocmVzaG9sZDtcblxuICAvLyBjb25zdCB2ZXJzaW9uTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gIC8vIHZlcnNpb25MYWJlbC50ZXh0Q29udGVudCA9IFwiVmVyc2lvbjpcIjtcbiAgLy8gY29uc3QgdmVyc2lvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG4gIC8vIGNvbnN0IHZlcnNpb25zID0gW2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIildO1xuICAvLyB2ZXJzaW9uc1swXS52YWx1ZSA9IDA7XG4gIC8vIHZlcnNpb25zWzBdLnRleHRDb250ZW50ID0gXCIwIChsYXRlc3QpXCI7XG4gIC8vIHZlcnNpb25zLmZvckVhY2godiA9PiB7XG4gIC8vIHZlcnNpb24uYXBwZW5kQ2hpbGQodik7XG4gIC8vIH0pO1xuICAvLyBvcHRpb25zLmFwcGVuZENoaWxkKHZlcnNpb25MYWJlbCk7XG4gIC8vIG9wdGlvbnMuYXBwZW5kQ2hpbGQodmVyc2lvbik7XG4gIC8vXG4gIGNvbnN0IHdlaWdodExhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICB3ZWlnaHRMYWJlbC50ZXh0Q29udGVudCA9IFwiV2VpZ2h0OlwiO1xuICBjb25zdCB3ZWlnaHQgPSBjcml0ZXJpb25PcHRpb25WaWV3KFxuICAgIFwiUG9zaXRpdmVJbnRlZ2VyRmllbGRcIixcbiAgICBjcml0ZXJpb24ud2VpZ2h0LFxuICAgIGNyaXRlcmlvbixcbiAgKTtcbiAgd2VpZ2h0Lm5hbWUgPSBcIndlaWdodFwiO1xuICBvcHRpb25zLmFwcGVuZENoaWxkKHdlaWdodExhYmVsKTtcbiAgb3B0aW9ucy5hcHBlbmRDaGlsZCh3ZWlnaHQpO1xuXG4gIGNvbnN0IG90aGVyT3B0aW9ucyA9IE9iamVjdC5rZXlzKGNyaXRlcmlvbikuZmlsdGVyKFxuICAgIG8gPT5cbiAgICAgICFbXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIixcbiAgICAgICAgXCJmdWxsX25hbWVcIixcbiAgICAgICAgXCJpc19iZXRhXCIsXG4gICAgICAgIFwibmFtZVwiLFxuICAgICAgICBcInZlcnNpb25cIixcbiAgICAgICAgXCJ2ZXJzaW9uc1wiLFxuICAgICAgICBcIndlaWdodFwiLFxuICAgICAgXS5pbmNsdWRlcyhvKSxcbiAgKTtcbiAgb3RoZXJPcHRpb25zLmZvckVhY2gobyA9PiB7XG4gICAgaWYgKCFiaW5hcnlUaHJlc2hvbGQgfHwgbyAhPT0gXCJ0aHJlc2hvbGRcIikge1xuICAgICAgY29uc3Qgb3B0aW9uID0gY3JpdGVyaW9uW29dO1xuICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICBsYWJlbC50ZXh0Q29udGVudCA9IGAke29wdGlvbi5mdWxsX25hbWV9OmA7XG4gICAgICBsYWJlbC50aXRsZSA9IG9wdGlvbi5kZXNjcmlwdGlvbjtcbiAgICAgIGNvbnN0IGlucHV0ID0gY3JpdGVyaW9uT3B0aW9uVmlldyhcbiAgICAgICAgb3B0aW9uLnR5cGUsXG4gICAgICAgIG9wdGlvbi52YWx1ZSxcbiAgICAgICAgY3JpdGVyaW9uLFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgb3B0aW9uLm5hbWUpO1xuICAgICAgb3B0aW9ucy5hcHBlbmRDaGlsZChsYWJlbCk7XG4gICAgICBvcHRpb25zLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBkaXY7XG59XG5cbmZ1bmN0aW9uIGNyaXRlcmlvbk9wdGlvblZpZXcodHlwZSwgdmFsdWUsIGNyaXRlcmlvbiwgaW5wdXQgPSBudWxsKSB7XG4gIGNvbnN0IGZvY3VzID0gISFpbnB1dDtcbiAgaWYgKHR5cGUgPT09IFwiUG9zaXRpdmVJbnRlZ2VyRmllbGRcIikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIsIHR5cGUpO1xuICAgICAgaW5wdXQudHlwZSA9IFwibnVtYmVyXCI7XG4gICAgICBpbnB1dC5taW4gPSAwO1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGV2ZW50ID0+XG4gICAgICAgIHVwZGF0ZUNyaXRlcmlvbk9wdGlvbihldmVudCwgaW5wdXQsIGNyaXRlcmlvbiksXG4gICAgICApO1xuICAgIH1cbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBpbnB1dDtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcIlByb2JhYmlsaXR5RmllbGRcIikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIsIHR5cGUpO1xuICAgICAgaW5wdXQudHlwZSA9IFwibnVtYmVyXCI7XG4gICAgICBpbnB1dC5taW4gPSAwO1xuICAgICAgaW5wdXQubWF4ID0gMTtcbiAgICAgIGlucHV0LnN0ZXAgPSAwLjAxO1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGV2ZW50ID0+XG4gICAgICAgIHVwZGF0ZUNyaXRlcmlvbk9wdGlvbihldmVudCwgaW5wdXQsIGNyaXRlcmlvbiksXG4gICAgICApO1xuICAgICAgaWYgKGZvY3VzKSB7XG4gICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiQ29tbWFTZXBGaWVsZFwiKSB7XG4gICAgaWYgKCFpbnB1dCkge1xuICAgICAgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgaW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIsIHR5cGUpO1xuICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZChcImNvbW1hLXNlcC1pbnB1dFwiKTtcbiAgICAgIGlucHV0LnR5cGUgPSBcImNvbW1hLXNlcFwiO1xuICAgIH1cbiAgICBjbGVhcihpbnB1dCk7XG4gICAgdmFsdWUuZm9yRWFjaCh3b3JkID0+IHtcbiAgICAgIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4uY2xhc3NMaXN0LmFkZChcImNvbW1hLXNlcC1pbnB1dC0td29yZFwiKTtcbiAgICAgIHNwYW4udGV4dENvbnRlbnQgPSB3b3JkO1xuICAgICAgaW5wdXQuYXBwZW5kQ2hpbGQoc3Bhbik7XG4gICAgfSk7XG4gICAgY29uc3QgaW5wdXRfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0Xy5jbGFzc0xpc3QuYWRkKFwiY29tbWEtc2VwLWlucHV0LS1pbnB1dFwiKTtcbiAgICBpbnB1dF8udHlwZSA9IFwidGV4dFwiO1xuICAgIGlucHV0Xy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudCA9PlxuICAgICAgdXBkYXRlQ3JpdGVyaW9uT3B0aW9uKGV2ZW50LCBpbnB1dCwgY3JpdGVyaW9uKSxcbiAgICApO1xuICAgIGlucHV0LmFwcGVuZENoaWxkKGlucHV0Xyk7XG4gICAgaWYgKGZvY3VzKSB7XG4gICAgICBpbnB1dF8uZm9jdXMoKTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0O1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiQm9vbGVhbkZpZWxkXCIpIHtcbiAgICBpZiAoIWlucHV0KSB7XG4gICAgICBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIiwgdHlwZSk7XG4gICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKFwiYm9vbGVhbi1pbnB1dFwiKTtcbiAgICAgIGNsZWFyKGlucHV0KTtcbiAgICAgIGNvbnN0IGlucHV0XyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgIGlucHV0Xy5jbGFzc0xpc3QuYWRkKFwiYm9vbGVhbi1pbnB1dC0taW5wdXRcIik7XG4gICAgICBpbnB1dF8udHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgIGlucHV0Xy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnQgPT5cbiAgICAgICAgdXBkYXRlQ3JpdGVyaW9uT3B0aW9uKGV2ZW50LCBpbnB1dCwgY3JpdGVyaW9uKSxcbiAgICAgICk7XG4gICAgICBpbnB1dC5hcHBlbmRDaGlsZChpbnB1dF8pO1xuICAgICAgY29uc3QgYmFja2dyb3VuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgYmFja2dyb3VuZC5jbGFzc0xpc3QuYWRkKFwiYm9vbGVhbi1pbnB1dC0tYmFja2dyb3VuZFwiKTtcbiAgICAgIGlucHV0LmFwcGVuZENoaWxkKGJhY2tncm91bmQpO1xuICAgICAgY29uc3QgbWFyayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgbWFyay5jbGFzc0xpc3QuYWRkKFwiYm9vbGVhbi1pbnB1dC0tbWFya1wiKTtcbiAgICAgIGlucHV0LmFwcGVuZENoaWxkKG1hcmspO1xuICAgICAgaWYgKGZvY3VzKSB7XG4gICAgICAgIGlucHV0Xy5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b2dnbGVDcml0ZXJpb25PcHRpb25zKGNyaXRlcmlvbikge1xuICBpZiAoY3JpdGVyaW9uLmNsYXNzTGlzdC5jb250YWlucyhcImNyaXRlcmlvbl9fc2hvd2luZ1wiKSkge1xuICAgIGNyaXRlcmlvbi5jbGFzc0xpc3QucmVtb3ZlKFwiY3JpdGVyaW9uX19zaG93aW5nXCIpO1xuICB9IGVsc2Uge1xuICAgIGNyaXRlcmlvbi5jbGFzc0xpc3QuYWRkKFwiY3JpdGVyaW9uX19zaG93aW5nXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZUNyaXRlcmlvbk9wdGlvbkVycm9yKG9wdGlvbiwgbXNnKSB7XG4gIG9wdGlvbi5zZXRDdXN0b21WYWxpZGl0eShtc2cpO1xufVxuXG5mdW5jdGlvbiBuZXdDcml0ZXJpb25zVmlldygpIHtcbiAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGQtY3JpdGVyaW9uIGJ1dHRvblwiKTtcbiAgY29uc3QgYXZhaWxhYmxlID0gbW9kZWwuYXZhaWxhYmxlLmZpbHRlcihcbiAgICBjID0+ICFtb2RlbC5jcml0ZXJpb25zLm1hcChjYyA9PiBjYy5uYW1lKS5pbmNsdWRlcyhjLm5hbWUpLFxuICApO1xuICBpZiAoYXZhaWxhYmxlLmxlbmd0aCkge1xuICAgIGNvbnN0IHVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hdmFpbGFibGUtY3JpdGVyaW9ucyB1bFwiKTtcbiAgICBjbGVhcih1bCk7XG4gICAgYXZhaWxhYmxlLmZvckVhY2goY3JpdGVyaW9uID0+IHtcbiAgICAgIHVsLmFwcGVuZENoaWxkKG5ld0NyaXRlcmlvblZpZXcoY3JpdGVyaW9uKSk7XG4gICAgfSk7XG4gICAgYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgYnV0dG9uLnRpdGxlID0gXCJBZGQgYSBuZXcgY3JpdGVyaW9uXCI7XG4gIH0gZWxzZSB7XG4gICAgYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICBidXR0b24udGl0bGUgPSBcIlRoZXJlIGFyZSBubyBuZXcgY3JpdGVyaW9ucyB0byBhZGRcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZXdDcml0ZXJpb25WaWV3KGNyaXRlcmlvbikge1xuICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgbGkudGl0bGUgPSBjcml0ZXJpb24uZGVzY3JpcHRpb247XG4gIGxpLnRleHRDb250ZW50ID0gY3JpdGVyaW9uLmZ1bGxOYW1lO1xuICBsaS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gYWRkQ3JpdGVyaW9uKGNyaXRlcmlvbikpO1xuICByZXR1cm4gbGk7XG59XG5cbmZ1bmN0aW9uIHRvZ2dsZVNob3dBZGRDcml0ZXJpb24oKSB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLWNyaXRlcmlvblwiKTtcbiAgaWYgKGRpdi5jbGFzc0xpc3QuY29udGFpbnMoXCJhZGQtY3JpdGVyaW9uX19zaG93aW5nXCIpKSB7XG4gICAgZGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJhZGQtY3JpdGVyaW9uX19zaG93aW5nXCIpO1xuICB9IGVsc2Uge1xuICAgIGlmIChtb2RlbC5hdmFpbGFibGUubGVuZ3RoKSB7XG4gICAgICBkaXYuY2xhc3NMaXN0LmFkZChcImFkZC1jcml0ZXJpb25fX3Nob3dpbmdcIik7XG4gICAgfVxuICB9XG59XG5cbi8qKioqKioqKioqKioqL1xuLyogbGlzdGVuZXJzICovXG4vKioqKioqKioqKioqKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50TGlzdGVuZXJzKCkge1xuICBpbml0QWRkQ3JpdGVyaW9uTGlzdGVuZXJzKCk7XG59XG5cbmZ1bmN0aW9uIGluaXRBZGRDcml0ZXJpb25MaXN0ZW5lcnMoKSB7XG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3IoXCIuYWRkLWNyaXRlcmlvbiBidXR0b25cIilcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRvZ2dsZVNob3dBZGRDcml0ZXJpb24pO1xufVxuXG4vKioqKioqKiovXG4vKiBpbml0ICovXG4vKioqKioqKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KGRhdGEpIHtcbiAgaW5pdE1vZGVsKGRhdGEpO1xuICB2aWV3KCk7XG4gIGluaXRFdmVudExpc3RlbmVycygpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydCB7IGluaXQgfSBmcm9tIFwiLi9fZWRpdC9pbmRleC5qc1wiO1xuIl0sIm5hbWVzIjpbImdldENzcmZUb2tlbiIsIm5hbWUiLCJkb2N1bWVudCIsImNvb2tpZSIsInNwbGl0IiwibWFwIiwiYyIsInRyaW0iLCJmaWx0ZXIiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJidWlsZFJlcSIsImRhdGEiLCJtZXRob2QiLCJ0b0xvd2VyQ2FzZSIsInRvVXBwZXJDYXNlIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiRXJyb3IiLCJjbGVhciIsIm5vZGUiLCJoYXNDaGlsZE5vZGVzIiwicmVtb3ZlQ2hpbGQiLCJsYXN0Q2hpbGQiLCJtb2RlbCIsImluaXRNb2RlbCIsInF1YWxpdHkiLCJwayIsInF1YWxpdHlUeXBlIiwicXVhbGl0eV90eXBlIiwibmV4dCIsImF2YWlsYWJsZSIsImZ1bGxOYW1lIiwiZnVsbF9uYW1lIiwiZGVzY3JpcHRpb24iLCJjcml0ZXJpb25zIiwidXJscyIsImFkZENyaXRlcmlvbiIsImFkZF9jcml0ZXJpb24iLCJ1cGRhdGVDcml0ZXJpb24iLCJ1cGRhdGVfY3JpdGVyaW9uIiwicmVtb3ZlQ3JpdGVyaW9uIiwicmVtb3ZlX2NyaXRlcmlvbiIsInVwZGF0ZUNyaXRlcmlvbk9wdGlvbiIsImV2ZW50Iiwib3B0aW9uIiwiY3JpdGVyaW9uIiwidHlwZSIsImdldEF0dHJpYnV0ZSIsInZhbHVlIiwicXVlcnlTZWxlY3RvciIsInNldEN1c3RvbVZhbGlkaXR5Iiwia2V5IiwicHJldmVudERlZmF1bHQiLCJhbGxvd2VkIiwiaW5jbHVkZXMiLCJ0b2dnbGVDcml0ZXJpb25PcHRpb25FcnJvciIsInNsaWNlIiwiam9pbiIsImlucHV0VHlwZSIsInBhcnNlRmxvYXQiLCJ0b1N0cmluZyIsImZpZWxkIiwicmVxIiwiZmV0Y2giLCJ0aGVuIiwicmVzcCIsIm9rIiwianNvbiIsInRleHQiLCJlcnIiLCJjcml0ZXJpb25PcHRpb25WaWV3Iiwid2VpZ2h0IiwiY2F0Y2giLCJjb25zb2xlIiwibG9nIiwicHVzaCIsImNyaXRlcmlvbnNWaWV3IiwibmV3Q3JpdGVyaW9uc1ZpZXciLCJ0b2dnbGVTaG93QWRkQ3JpdGVyaW9uIiwidmlldyIsInJldHVybkxpbmtWaWV3IiwibGluayIsImhyZWYiLCJ0ZXh0Q29udGVudCIsInBhcmVudE5vZGUiLCJkaXYiLCJmb3JFYWNoIiwiYXBwZW5kQ2hpbGQiLCJjcml0ZXJpb25WaWV3IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRpdGxlIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRvZ2dsZUNyaXRlcmlvbk9wdGlvbnMiLCJyZW1vdmUiLCJzdG9wUHJvcGFnYXRpb24iLCJpY29uIiwib3B0aW9ucyIsImJpbmFyeVRocmVzaG9sZCIsInZlcnNpb25zIiwidmVyc2lvbiIsImJpbmFyeV90aHJlc2hvbGQiLCJ3ZWlnaHRMYWJlbCIsIm90aGVyT3B0aW9ucyIsIk9iamVjdCIsImtleXMiLCJvIiwibGFiZWwiLCJpbnB1dCIsInNldEF0dHJpYnV0ZSIsImZvY3VzIiwibWluIiwibWF4Iiwic3RlcCIsIndvcmQiLCJzcGFuIiwiaW5wdXRfIiwiYmFja2dyb3VuZCIsIm1hcmsiLCJjb250YWlucyIsIm1zZyIsImJ1dHRvbiIsImNjIiwidWwiLCJuZXdDcml0ZXJpb25WaWV3IiwiZGlzYWJsZWQiLCJsaSIsImluaXRFdmVudExpc3RlbmVycyIsImluaXRBZGRDcml0ZXJpb25MaXN0ZW5lcnMiLCJpbml0Il0sIm1hcHBpbmdzIjoiOzs7QUFBTyxTQUFTQSxZQUFULEdBQXdCO01BQ3ZCQyxJQUFJLEdBQUcsV0FBYjs7TUFDSUMs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"}
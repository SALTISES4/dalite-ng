{"version":3,"file":"edit.min.js","sources":["peerinst/static/peerinst/js/_ajax/utils.js","quality/static/quality/js/utils.js","quality/static/quality/js/_edit/index.js","quality/static/quality/js/edit.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  const name = \"csrftoken\";\n  if (document.cookie && document.cookie !== \"\") {\n    return document.cookie\n      .split(\";\")\n      .map(c => c.trim())\n      .filter(c => c.substring(0, name.length + 1) === name + \"=\")\n      .map(c => decodeURIComponent(c.substring(name.length + 1)))[0];\n  } else {\n    return null;\n  }\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","\"use strict\";\n\nexport function createInput(type) {\n  const input = document.createElement(\"input\");\n  if (type === \"PositiveIntegerField\") {\n    input.type = \"number\";\n    input.min = 0;\n  }\n  return input;\n}\n","\"use strict\";\n\nimport { buildReq } from \"../../../../../peerinst/static/peerinst/js/_ajax/utils.js\"; // eslint-disable-line\nimport { createInput } from \"../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    quality: {\n      pk: data.quality.pk,\n      qualityType: data.quality.quality_type,\n    },\n    next: data.next,\n    available: data.available.map(c => ({\n      name: c.name,\n      fullName: c.full_name,\n      description: c.description,\n    })),\n    criterions: data.criterions,\n    urls: {\n      addCriterion: data.urls.add_criterion,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction addCriterion(criterion) {\n  const data = {\n    quality: model.quality.pk,\n    criterion: criterion,\n  };\n\n  const req = buildReq(data, \"post\");\n  fetch(model.urls.addCriterion, req)\n    .then(resp => resp.json())\n    .then(json => console.log(json))\n    .catch(err => console.log(err));\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  returnLinkView();\n  criterionsView();\n  newCriterionsView();\n}\n\nfunction returnLinkView() {\n  const link = document.querySelector(\"#back-link\");\n  if (model.next) {\n    link.href = model.next;\n    link.textContent = `Back to ${model.quality.qualityType}`;\n  } else {\n    link.parentNode.removeChild(link);\n  }\n}\n\nfunction criterionsView() {\n  const div = document.querySelector(\"#criterions\");\n  model.criterions.forEach(criterion => {\n    div.appendChild(criterionView(criterion));\n  });\n}\n\nfunction criterionView(criterion) {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"criterion\");\n\n  const name = document.createElement(\"div\");\n  name.classList.add(\"criterion--name\");\n  name.textContent = criterion.full_name;\n  name.addEventListener(\"click\", () => toggleCriterionOptions(div));\n  div.appendChild(name);\n\n  const options = document.createElement(\"div\");\n  options.classList.add(\"criterion--options\");\n  div.appendChild(options);\n\n  // const versionLabel = document.createElement(\"label\");\n  // versionLabel.textContent = \"Version:\";\n  // const version = document.createElement(\"select\");\n  // const versions = [document.createElement(\"option\")];\n  // versions[0].value = 0;\n  // versions[0].textContent = \"0 (latest)\";\n  // versions.forEach(v => {\n  // version.appendChild(v);\n  // });\n  // options.appendChild(versionLabel);\n  // options.appendChild(version);\n  //\n  const weightLabel = document.createElement(\"label\");\n  weightLabel.textContent = \"Weight:\";\n  const weight = document.createElement(\"input\");\n  weight.type = \"number\";\n  weight.min = 0;\n  weight.value = criterion.weight;\n  options.appendChild(weightLabel);\n  options.appendChild(weight);\n\n  const otherOptions = Object.keys(criterion).filter(\n    o =>\n      ![\n        \"description\",\n        \"full_name\",\n        \"is_beta\",\n        \"name\",\n        \"version\",\n        \"versions\",\n        \"weight\",\n      ].includes(o),\n  );\n  otherOptions.forEach(o => {\n    const option = criterion[o];\n    const label = document.createElement(\"label\");\n    label.textContent = `${option.full_name}:`;\n    label.title = option.description;\n    const input = createInput(option.type);\n    input.value = option.value;\n    options.appendChild(label);\n    options.appendChild(input);\n  });\n\n  return div;\n}\n\nfunction toggleCriterionOptions(criterion) {\n  if (criterion.classList.contains(\"criterion__showing\")) {\n    criterion.classList.remove(\"criterion__showing\");\n  } else {\n    criterion.classList.add(\"criterion__showing\");\n  }\n}\n\nfunction newCriterionsView() {\n  const button = document.querySelector(\".add-criterion button\");\n  if (model.available.length) {\n    const ul = document.querySelector(\".available-criterions ul\");\n    model.available.forEach(criterion => {\n      ul.appendChild(newCriterionView(criterion));\n    });\n    button.disabled = false;\n    button.title = \"Add a new criterion\";\n  } else {\n    button.disabled = true;\n    button.title = \"There are no new criterions to add\";\n  }\n}\n\nfunction newCriterionView(criterion) {\n  const li = document.createElement(\"li\");\n  li.title = criterion.description;\n  li.textContent = criterion.fullName;\n  li.addEventListener(\"click\", () => addCriterion(criterion.name));\n  return li;\n}\n\nfunction toggleShowAddCriterion(event) {\n  const div = event.currentTarget.parentNode;\n  if (div.classList.contains(\"add-criterion__showing\")) {\n    div.classList.remove(\"add-criterion__showing\");\n  } else {\n    if (model.available.length) {\n      div.classList.add(\"add-criterion__showing\");\n    }\n  }\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners() {\n  initAddCriterionListeners();\n}\n\nfunction initAddCriterionListeners() {\n  document\n    .querySelector(\".add-criterion button\")\n    .addEventListener(\"click\", toggleShowAddCriterion);\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(data) {\n  initModel(data);\n  view();\n  initEventListeners();\n}\n","\"use strict\";\n\nexport { init } from \"./_edit/index.js\";\n"],"names":["getCsrfToken","name","document","cookie","split","map","c","trim","filter","substring","length","decodeURIComponent","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","createInput","type","input","createElement","min","model","initModel","quality","pk","qualityType","quality_type","next","available","fullName","full_name","description","criterions","urls","addCriterion","add_criterion","criterion","req","fetch","then","resp","json","console","log","catch","err","view","returnLinkView","criterionsView","newCriterionsView","link","querySelector","href","textContent","parentNode","removeChild","div","forEach","appendChild","criterionView","classList","add","addEventListener","toggleCriterionOptions","options","weightLabel","weight","value","otherOptions","Object","keys","o","includes","option","label","title","contains","remove","button","ul","newCriterionView","disabled","li","toggleShowAddCriterion","event","currentTarget","initEventListeners","initAddCriterionListeners","init"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
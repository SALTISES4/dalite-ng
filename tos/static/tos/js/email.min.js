(function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume("next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function _readOnlyError(name) {
  throw new Error("\"" + name + "\" is read-only");
}

"use strict";

function toggleButton(event) {
  var container = event.currentTarget;

  if (!container.classList.contains("btn-toggle--disabled")) {
    var buttons = container.getElementsByTagName("div");
    var checkbox = container.getElementsByTagName("input")[0];

    if (checkbox.checked) {
      checkbox.checked = false;
      buttons[0].classList.remove("btn-toggle--selected");
      buttons[1].classList.add("btn-toggle--selected");
    } else {
      checkbox.checked = true;
      buttons[0].classList.add("btn-toggle--selected");
      buttons[1].classList.remove("btn-toggle--selected");
    }
  }
}

function toggleButtonAll(event) {
  var container = event.currentTarget;
  var checkbox = container.getElementsByTagName("input")[0];

  if (checkbox.checked) {
    var toggleButtons = document.getElementsByClassName("btn-toggle");

    for (var i = 0; i < toggleButtons.length; _readOnlyError("i"), i++) {
      toggleButtons[i].classList.remove("btn-toggle--disabled");
    }
  } else {
    var _toggleButtons = document.getElementsByClassName("btn-toggle");

    for (var _i = 0; _i < _toggleButtons.length; _readOnlyError("i"), _i++) {
      if (_toggleButtons[_i] != container) {
        _toggleButtons[_i].classList.add("btn-toggle--disabled");
      }
    }
  }
}

Array.from(document.getElementsByClassName("btn-toggle")).map(function (x) {
  return x.addEventListener("click", function (e) {
    return toggleButton(e);
  });
});
var toggleAll = document.getElementById("btn-toggle-all");

if (toggleAll) {
  toggleAll.addEventListener("click", function (e) {
    return toggleButtonAll(e);
  });
}

}((this.email = this.email || {})));
//# sourceMappingURL=email.min.js.map

var header = (function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume("next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

"use strict";

/*********/

/* model */

/*********/

var model;

function initModel(reputationUrl, reputationType, id) {
  model = {
    reputationListOpen: false,
    reputationUrl: reputationUrl,
    reputationType: reputationType,
    id: id,
    reputation: null,
    reputations: []
  };
}
/**********/

/* update */

/**********/


function update() {
  return _update.apply(this, arguments);
}

function _update() {
  _update = _asyncToGenerator(function* () {
    yield getReputation();
  });
  return _update.apply(this, arguments);
}

function getReputation() {
  return _getReputation.apply(this, arguments);
}

function _getReputation() {
  _getReputation = _asyncToGenerator(function* () {
    var postData = {
      reputation_type: model.reputationType,
      id: model.id
    };
    var req = buildReq(postData, "post");
    var resp = yield fetch(model.reputationUrl, req);
    var data = yield resp.json();
    model.reputation = data.reputation;
    model.reputations = data.reputations;
  });
  return _getReputation.apply(this, arguments);
}

function toggleReputationList() {
  model.reputationListOpen = !model.reputationListOpen;
  reputationListView();
}
/********/

/* view */

/********/


function view() {
  iconView();
  clear(document.querySelector(".reputation-icon__list"));
  reputationListView();
}

function iconView() {
  if (model.reputation !== null) {
    document.querySelector(".reputation-icon__icon__reputation").textContent = Math.round(model.reputation * 100);
    document.querySelector(".reputation-icon").classList.remove("reputation-icon--hidden");
  }
}

function reputationListView() {
  if (model.reputationListOpen) {
    document.querySelector(".reputation-icon").classList.add("reputation-icon--open");
  } else {
    document.querySelector(".reputation-icon").classList.remove("reputation-icon--open");
  }

  var container = document.querySelector(".reputation-icon__list");
  clear(container);
  reputationListHeaderView(container);
  model.reputations.forEach(function (reputation) {
    reputationView(container, reputation);
  });
}

function reputationListHeaderView(container) {
  var name = document.createElement("div");
  name.classList.add("reputation-icon__list__header");
  name.textContent = "Name";
  container.appendChild(name);
  var weight = document.createElement("div");
  weight.classList.add("reputation-icon__list__header");
  weight.textContent = "Weight";
  container.appendChild(weight);
  var rep = document.createElement("div");
  rep.classList.add("reputation-icon__list__header");
  rep.textContent = "Reputation";
  container.appendChild(rep);
}

function reputationView(container, reputation) {
  var name = document.createElement("div");
  name.classList.add("reputation-icon__list__name");
  name.textContent = "".concat(reputation.full_name, " v").concat(reputation.version);
  name.title = reputation.description;
  container.appendChild(name);
  var weight = document.createElement("div");
  weight.textContent = reputation.weight;
  container.appendChild(weight);
  var rep = document.createElement("div");
  rep.textContent = Math.round(reputation.reputation * 100);
  container.appendChild(rep);
}
/*************/

/* listeners */

/*************/


function addEventListeners() {
  addReputationListOpenListener();
}

function addReputationListOpenListener() {
  document.querySelector(".reputation-icon").addEventListener("click", function (event) {
    event.stopPropagation();
  });
  document.querySelector(".reputation-icon__icon").addEventListener("click", function (event) {
    toggleReputationList();
  });
  document.body.addEventListener("click", function (event) {
    if (model.reputationListOpen) {
      toggleReputationList();
    }
  });
}
/********/

/* init */

/********/


function init(_x, _x2, _x3) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator(function* (url, reputationType, id) {
    initModel(url, reputationType, id);
    yield update();
    view();
    addEventListeners();
  });
  return _init.apply(this, arguments);
}

exports.init = init;

return exports;

}({}));
//# sourceMappingURL=header.min.js.map

============================= test session starts ==============================
platform linux2 -- Python 2.7.15, pytest-3.7.1, py-1.5.4, pluggy-0.7.1
Django settings: dalite.settings (from ini file)
rootdir: /home/antoine/documents/work/dalite/dalite, inifile: pytest.ini
plugins: django-3.3.3
collected 81 items / 63 deselected

peerinst/tests/test_models.py ......F...F.FF.FFF                         [100%]

=================================== FAILURES ===================================
___________________ TestStudentGroupAssignment.test_hashing ____________________

self = <peerinst.tests.test_models.TestStudentGroupAssignment testMethod=test_hashing>

    def test_hashing(self):
        n = 10
        assignments = add_student_group_assignments(
>           new_student_group_assignments(n, self.groups, self.assignments)
        )

peerinst/tests/test_models.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
peerinst/tests/generators.py:258: in add_student_group_assignments
    StudentGroupAssignment.objects.create(**g) for g in group_assignments
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:348: in create
    obj.save(force_insert=True, using=self.db)
peerinst/models.py:982: in save
    super(StudentGroupAssignment, self).save(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:734: in save
    force_update=force_update, update_fields=update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:762: in save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:846: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:885: in _do_insert
    using=using, raw=raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:920: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/sql/compiler.py:974: in execute_sql
    cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute
    return self.cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:129: in execute
    six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:124: in execute
    return self.cursor.execute(query, args)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/cursors.py:205: in execute
    self.errorhandler(self, exc, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

errorclass = <class '_mysql_exceptions.OperationalError'>
errorvalue = OperationalError(1048, "Column 'due_date' cannot be null")

    def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
        """
    
        If cursor is not None, (errorclass, errorvalue) is appended to
        cursor.messages; otherwise it is appended to
        connection.messages. Then errorclass is raised with errorvalue as
        the value.
    
        You can override this with your own error handler by assigning it
        to the instance.
    
        """
        error = errorclass, errorvalue
        if cursor:
            cursor.messages.append(error)
        else:
            connection.messages.append(error)
        del cursor
        del connection
>       raise errorclass, errorvalue
E       IntegrityError: (1048, "Column 'due_date' cannot be null")

../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/connections.py:36: IntegrityError
__________ TestStudentGroupAssignment.test_modify_order_wrong_values ___________

self = <peerinst.tests.test_models.TestStudentGroupAssignment testMethod=test_modify_order_wrong_values>

    def test_modify_order_wrong_values(self):
        n = 1
        assignment = add_student_group_assignments(
>           new_student_group_assignments(n, self.groups, self.assignments)
        )[0]

peerinst/tests/test_models.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
peerinst/tests/generators.py:258: in add_student_group_assignments
    StudentGroupAssignment.objects.create(**g) for g in group_assignments
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:348: in create
    obj.save(force_insert=True, using=self.db)
peerinst/models.py:982: in save
    super(StudentGroupAssignment, self).save(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:734: in save
    force_update=force_update, update_fields=update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:762: in save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:846: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:885: in _do_insert
    using=using, raw=raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:920: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/sql/compiler.py:974: in execute_sql
    cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute
    return self.cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:129: in execute
    six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:124: in execute
    return self.cursor.execute(query, args)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/cursors.py:205: in execute
    self.errorhandler(self, exc, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

errorclass = <class '_mysql_exceptions.OperationalError'>
errorvalue = OperationalError(1048, "Column 'due_date' cannot be null")

    def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
        """
    
        If cursor is not None, (errorclass, errorvalue) is appended to
        cursor.messages; otherwise it is appended to
        connection.messages. Then errorclass is raised with errorvalue as
        the value.
    
        You can override this with your own error handler by assigning it
        to the instance.
    
        """
        error = errorclass, errorvalue
        if cursor:
            cursor.messages.append(error)
        else:
            connection.messages.append(error)
        del cursor
        del connection
>       raise errorclass, errorvalue
E       IntegrityError: (1048, "Column 'due_date' cannot be null")

../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/connections.py:36: IntegrityError
___ TestStudentAssignment.test_get_current_question_all_first_answer_choices ___

self = <peerinst.tests.test_models.TestStudentAssignment testMethod=test_get_current_question_all_first_answer_choices>

    def setUp(self):
        n_students = 5
        n_assignments = 3
        n_groups = 2
        n_questions = 10
        min_questions = 5
        n_group_assignments = 3
    
        questions = add_questions(new_questions(n_questions))
        groups = add_groups(new_groups(n_groups))
        assignments = add_assignments(
            new_assignments(
                n_assignments, questions, min_questions=min_questions
            )
        )
        self.students = add_students(new_students(n_students))
        self.groups = add_student_group_assignments(
            new_student_group_assignments(
>               n_group_assignments, groups, assignments
            )
        )

peerinst/tests/test_models.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
peerinst/tests/generators.py:258: in add_student_group_assignments
    StudentGroupAssignment.objects.create(**g) for g in group_assignments
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:348: in create
    obj.save(force_insert=True, using=self.db)
peerinst/models.py:982: in save
    super(StudentGroupAssignment, self).save(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:734: in save
    force_update=force_update, update_fields=update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:762: in save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:846: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:885: in _do_insert
    using=using, raw=raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:920: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/sql/compiler.py:974: in execute_sql
    cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute
    return self.cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:129: in execute
    six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:124: in execute
    return self.cursor.execute(query, args)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/cursors.py:205: in execute
    self.errorhandler(self, exc, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

errorclass = <class '_mysql_exceptions.OperationalError'>
errorvalue = OperationalError(1048, "Column 'due_date' cannot be null")

    def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
        """
    
        If cursor is not None, (errorclass, errorvalue) is appended to
        cursor.messages; otherwise it is appended to
        connection.messages. Then errorclass is raised with errorvalue as
        the value.
    
        You can override this with your own error handler by assigning it
        to the instance.
    
        """
        error = errorclass, errorvalue
        if cursor:
            cursor.messages.append(error)
        else:
            connection.messages.append(error)
        del cursor
        del connection
>       raise errorclass, errorvalue
E       IntegrityError: (1048, "Column 'due_date' cannot be null")

../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/connections.py:36: IntegrityError
______ TestStudentAssignment.test_get_current_question_all_second_choices ______

self = <peerinst.tests.test_models.TestStudentAssignment testMethod=test_get_current_question_all_second_choices>

    def setUp(self):
        n_students = 5
        n_assignments = 3
        n_groups = 2
        n_questions = 10
        min_questions = 5
        n_group_assignments = 3
    
        questions = add_questions(new_questions(n_questions))
        groups = add_groups(new_groups(n_groups))
        assignments = add_assignments(
            new_assignments(
                n_assignments, questions, min_questions=min_questions
            )
        )
        self.students = add_students(new_students(n_students))
        self.groups = add_student_group_assignments(
            new_student_group_assignments(
>               n_group_assignments, groups, assignments
            )
        )

peerinst/tests/test_models.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
peerinst/tests/generators.py:258: in add_student_group_assignments
    StudentGroupAssignment.objects.create(**g) for g in group_assignments
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:348: in create
    obj.save(force_insert=True, using=self.db)
peerinst/models.py:982: in save
    super(StudentGroupAssignment, self).save(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:734: in save
    force_update=force_update, update_fields=update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:762: in save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:846: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:885: in _do_insert
    using=using, raw=raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:920: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/sql/compiler.py:974: in execute_sql
    cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute
    return self.cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:129: in execute
    six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:124: in execute
    return self.cursor.execute(query, args)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/cursors.py:205: in execute
    self.errorhandler(self, exc, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

errorclass = <class '_mysql_exceptions.OperationalError'>
errorvalue = OperationalError(1048, "Column 'due_date' cannot be null")

    def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
        """
    
        If cursor is not None, (errorclass, errorvalue) is appended to
        cursor.messages; otherwise it is appended to
        connection.messages. Then errorclass is raised with errorvalue as
        the value.
    
        You can override this with your own error handler by assigning it
        to the instance.
    
        """
        error = errorclass, errorvalue
        if cursor:
            cursor.messages.append(error)
        else:
            connection.messages.append(error)
        del cursor
        del connection
>       raise errorclass, errorvalue
E       IntegrityError: (1048, "Column 'due_date' cannot be null")

../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/connections.py:36: IntegrityError
__ TestStudentAssignment.test_get_current_question_only_first_answer_choices ___

self = <peerinst.tests.test_models.TestStudentAssignment testMethod=test_get_current_question_only_first_answer_choices>

    def setUp(self):
        n_students = 5
        n_assignments = 3
        n_groups = 2
        n_questions = 10
        min_questions = 5
        n_group_assignments = 3
    
        questions = add_questions(new_questions(n_questions))
        groups = add_groups(new_groups(n_groups))
        assignments = add_assignments(
            new_assignments(
                n_assignments, questions, min_questions=min_questions
            )
        )
        self.students = add_students(new_students(n_students))
        self.groups = add_student_group_assignments(
            new_student_group_assignments(
>               n_group_assignments, groups, assignments
            )
        )

peerinst/tests/test_models.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
peerinst/tests/generators.py:258: in add_student_group_assignments
    StudentGroupAssignment.objects.create(**g) for g in group_assignments
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:348: in create
    obj.save(force_insert=True, using=self.db)
peerinst/models.py:982: in save
    super(StudentGroupAssignment, self).save(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:734: in save
    force_update=force_update, update_fields=update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:762: in save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:846: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:885: in _do_insert
    using=using, raw=raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:920: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/sql/compiler.py:974: in execute_sql
    cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute
    return self.cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:129: in execute
    six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:124: in execute
    return self.cursor.execute(query, args)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/cursors.py:205: in execute
    self.errorhandler(self, exc, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

errorclass = <class '_mysql_exceptions.OperationalError'>
errorvalue = OperationalError(1048, "Column 'due_date' cannot be null")

    def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
        """
    
        If cursor is not None, (errorclass, errorvalue) is appended to
        cursor.messages; otherwise it is appended to
        connection.messages. Then errorclass is raised with errorvalue as
        the value.
    
        You can override this with your own error handler by assigning it
        to the instance.
    
        """
        error = errorclass, errorvalue
        if cursor:
            cursor.messages.append(error)
        else:
            connection.messages.append(error)
        del cursor
        del connection
>       raise errorclass, errorvalue
E       IntegrityError: (1048, "Column 'due_date' cannot be null")

../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/connections.py:36: IntegrityError
___ TestStudentAssignment.test_get_current_question_only_some_second_choices ___

self = <peerinst.tests.test_models.TestStudentAssignment testMethod=test_get_current_question_only_some_second_choices>

    def setUp(self):
        n_students = 5
        n_assignments = 3
        n_groups = 2
        n_questions = 10
        min_questions = 5
        n_group_assignments = 3
    
        questions = add_questions(new_questions(n_questions))
        groups = add_groups(new_groups(n_groups))
        assignments = add_assignments(
            new_assignments(
                n_assignments, questions, min_questions=min_questions
            )
        )
        self.students = add_students(new_students(n_students))
        self.groups = add_student_group_assignments(
            new_student_group_assignments(
>               n_group_assignments, groups, assignments
            )
        )

peerinst/tests/test_models.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
peerinst/tests/generators.py:258: in add_student_group_assignments
    StudentGroupAssignment.objects.create(**g) for g in group_assignments
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:348: in create
    obj.save(force_insert=True, using=self.db)
peerinst/models.py:982: in save
    super(StudentGroupAssignment, self).save(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:734: in save
    force_update=force_update, update_fields=update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:762: in save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:846: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:885: in _do_insert
    using=using, raw=raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:920: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/sql/compiler.py:974: in execute_sql
    cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute
    return self.cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:129: in execute
    six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:124: in execute
    return self.cursor.execute(query, args)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/cursors.py:205: in execute
    self.errorhandler(self, exc, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

errorclass = <class '_mysql_exceptions.OperationalError'>
errorvalue = OperationalError(1048, "Column 'due_date' cannot be null")

    def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
        """
    
        If cursor is not None, (errorclass, errorvalue) is appended to
        cursor.messages; otherwise it is appended to
        connection.messages. Then errorclass is raised with errorvalue as
        the value.
    
        You can override this with your own error handler by assigning it
        to the instance.
    
        """
        error = errorclass, errorvalue
        if cursor:
            cursor.messages.append(error)
        else:
            connection.messages.append(error)
        del cursor
        del connection
>       raise errorclass, errorvalue
E       IntegrityError: (1048, "Column 'due_date' cannot be null")

../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/connections.py:36: IntegrityError
______________ TestStudentAssignment.test_new_student_assignment _______________

self = <peerinst.tests.test_models.TestStudentAssignment testMethod=test_new_student_assignment>

    def setUp(self):
        n_students = 5
        n_assignments = 3
        n_groups = 2
        n_questions = 10
        min_questions = 5
        n_group_assignments = 3
    
        questions = add_questions(new_questions(n_questions))
        groups = add_groups(new_groups(n_groups))
        assignments = add_assignments(
            new_assignments(
                n_assignments, questions, min_questions=min_questions
            )
        )
        self.students = add_students(new_students(n_students))
        self.groups = add_student_group_assignments(
            new_student_group_assignments(
>               n_group_assignments, groups, assignments
            )
        )

peerinst/tests/test_models.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
peerinst/tests/generators.py:258: in add_student_group_assignments
    StudentGroupAssignment.objects.create(**g) for g in group_assignments
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:348: in create
    obj.save(force_insert=True, using=self.db)
peerinst/models.py:982: in save
    super(StudentGroupAssignment, self).save(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:734: in save
    force_update=force_update, update_fields=update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:762: in save_base
    updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:846: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/base.py:885: in _do_insert
    using=using, raw=raw)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/manager.py:127: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/query.py:920: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/models/sql/compiler.py:974: in execute_sql
    cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/utils.py:64: in execute
    return self.cursor.execute(sql, params)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:129: in execute
    six.reraise(utils.IntegrityError, utils.IntegrityError(*tuple(e.args)), sys.exc_info()[2])
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/django/db/backends/mysql/base.py:124: in execute
    return self.cursor.execute(query, args)
../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/cursors.py:205: in execute
    self.errorhandler(self, exc, value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

errorclass = <class '_mysql_exceptions.OperationalError'>
errorvalue = OperationalError(1048, "Column 'due_date' cannot be null")

    def defaulterrorhandler(connection, cursor, errorclass, errorvalue):
        """
    
        If cursor is not None, (errorclass, errorvalue) is appended to
        cursor.messages; otherwise it is appended to
        connection.messages. Then errorclass is raised with errorvalue as
        the value.
    
        You can override this with your own error handler by assigning it
        to the instance.
    
        """
        error = errorclass, errorvalue
        if cursor:
            cursor.messages.append(error)
        else:
            connection.messages.append(error)
        del cursor
        del connection
>       raise errorclass, errorvalue
E       IntegrityError: (1048, "Column 'due_date' cannot be null")

../../../../.virtualenvs/dalite/lib/python2.7/site-packages/MySQLdb/connections.py:36: IntegrityError
============== 7 failed, 11 passed, 63 deselected in 3.81 seconds ==============

var question = (function (exports) {
'use strict';

function submitForm() {
  document.querySelector("#submit-answer-form").submit();
}

function getCsrfToken() {
  const name = "csrftoken";

  if (document.cookie && document.cookie !== "") {
    return document.cookie.split(";").map(c => c.trim()).filter(c => c.substring(0, name.length + 1) === name + "=").map(c => decodeURIComponent(c.substring(name.length + 1)))[0];
  } else {
    return null;
  }
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    const body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error(`Method ${method} not implemented yet.`);
  }
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

/**********/

/* update */

/**********/

function validateFormSubmit(event, url, quality) {
  event.preventDefault();
  const data = {
    quality: quality,
    rationale: document.querySelector("#id_rationale").value
  };
  const req = buildReq(data, "post");
  fetch(url, req).then(resp => resp.json()).then(failed => {
    if (failed.failed.length) {
      toggleQualityError(failed.failed, failed.error_msg);
      document.querySelector("#answer-form").disabled = false;
    } else {
      toggleQualityError();
      document.querySelector("#answer-form").disabled = true;
      document.querySelector("#submit-answer-form").submit();
    }
  }).catch(err => console.log(err));
}
/********/

/* view */

/********/

function toggleQualityError(data, errorMsg) {
  if (data) {
    const form = document.querySelector("#submit-answer-form");
    let div = document.querySelector(".errorlist");

    if (!div) {
      div = document.createElement("div");
    }

    clear(div);
    div.classList.add("errorlist");
    div.textContent = errorMsg;
    const ul = document.createElement("ul");
    div.append(ul);
    data.forEach(criterion => {
      const li = document.createElement("li");
      li.textContent = criterion.name;
      li.title = criterion.description;
      ul.append(li);
    });
    form.parentNode.insertBefore(div, form);
  } else {
    const err = document.querySelector("errorlist");

    if (err) {
      err.parentNode.removeChild(err);
    }
  }
}

/*********/

/* model */

/*********/
let model;

function initModel() {
  model = {
    submitAllowed: false
  };
}
/**********/

/* update */

/**********/


function startSubmitAllowedTimer(seconds) {
  setInterval(allowSubmit, seconds * 1000);
}

function allowSubmit() {
  model.submitAllowed = true;
  submitButtonView();
}
/********/

/* view */

/********/


function view() {
  submitButtonView();
}

function submitButtonView() {
  if (model.submitAllowed) {
    // $FlowFixMe
    document.getElementById("answer-form").disabled = false;
  } else {
    // $FlowFixMe
    document.getElementById("answer-form").disabled = true;
  }
}
/********/

/* init */

/********/


function init() {
  initModel();
  view();
  startSubmitAllowedTimer(5);
}

"use strict";

exports.submitForm = submitForm;
exports.validateFormSubmit = validateFormSubmit;
exports.initReview = init;

return exports;

}({}));
//# sourceMappingURL=question.min.js.map

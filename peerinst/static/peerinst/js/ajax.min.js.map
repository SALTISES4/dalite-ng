<<<<<<< HEAD
{"version":3,"file":"ajax.min.js","sources":["peerinst/static/peerinst/js/_ajax/utils.js","peerinst/static/peerinst/js/_ajax/assignment_detail.js"],"sourcesContent":["export function getCsrfToken() {\n  const name = \"csrftoken\";\n  if (document.cookie && document.cookie !== \"\") {\n    return document.cookie\n      .split(\";\")\n      .map(c => c.trim())\n      .filter(c => c.substring(0, name.length + 1) === name + \"=\")\n      .map(c => decodeURIComponent(c.substring(name.length + 1)))[0];\n  } else {\n    return null;\n  }\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","\"use strict\";\n\nimport { getCsrfToken } from \"./utils.js\";\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\"button\"))\n            .html(\"clear\");\n          $(\"#\" + questionId).find($(\".stats\").remove());\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n"],"names":["getCsrfToken","name","document","cookie","split","map","c","trim","filter","substring","length","decodeURIComponent","updateAssignmentQuestionList","url","questionId","assignmentIdentifier","token","data","question_id","assignment_identifier","req","method","body","JSON","stringify","credentials","headers","fetch","then","resp","ok","console","log","list","getElementById","card","$","contains","remove","find","html","q","detach","appendTo","each","empty","append","catch","err"],"mappings":";;;AAAO,SAASA,YAAT,GAAwB;MACvBC,IAAI,GAAG,WAAb;;MACIC,QAAQ,CAACC,MAAT,IAAmBD,QAAQ,CAACC,MAAT,KAAoB,EAA3C,EAA+C;WACtCD,QAAQ,CAACC,MAAT,CACJC,KADI,CACE,GADF,EAEJC,GAFI,CAEA,UAAAC,CAAC;aAAIA,CAAC,CAACC,IAAF,EAAJ;KAFD,EAGJC,MAHI,CAGG,UAAAF,CAAC;aAAIA,CAAC,CAACG,SAAF,CAAY,CAAZ,EAAeR,IAAI,CAACS,MAAL,GAAc,CAA7B,MAAoCT,IAAI,GAAG,GAA/C;KAHJ,EAIJI,GAJI,CAIA,UAAAC,CAAC;aAAIK,kBAAkB,CAACL,CAAC,CAACG,SAAF,CAAYR,IAAI,CAACS,MAAL,GAAc,CAA1B,CAAD,CAAtB;KAJD,EAIuD,CAJvD,CAAP;GADF,MAMO;WACE,IAAP;;;;ACTJ;;AAEA,AAEO,SAASE,4BAAT,CACLC,GADK,EAELC,UAFK,EAGLC,oBAHK,EAIL;MACMC,KAAK,GAAGhB,YAAY,EAA1B;MACMiB,IAAI,GAAG;IACXC,WAAW,EAAEJ,UADF;IAEXK,qBAAqB,EAAEJ;GAFzB;MAIMK,GAAG,GAAG;IACVC,MAAM,EAAE,MADE;IAEVC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAFI;IAGVQ,WAAW,EAAE,SAHH;IAIVC,OAAO,EAAE;sBACS,kBADT;qBAEQV;;GANnB;EASAW,KAAK,CAACd,GAAD,EAAMO,GAAN,CAAL,CACGQ,IADH,CACQ,UAASC,IAAT,EAAe;QACf,CAACA,IAAI,CAACC,EAAV,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYH,IAAZ;KADF,MAEO;;UAECI,IAAI,GAAG/B,QAAQ,CAACgC,cAAT,CAAwB,eAAxB,CAAb;UACMC,IAAI,GAAGjC,QAAQ,CAACgC,cAAT,CAAwBpB,UAAxB,CAAb;;UACIsB,CAAC,CAACC,QAAF,CAAWJ,IAAX,EAAiBE,IAAjB,CAAJ,EAA4B;QAC1BC,CAAC,CAAC,MAAMtB,UAAP,CAAD,CAAoBwB,MAApB;OADF,MAEO;QACLF,CAAC,CAAC,MAAMtB,UAAP,CAAD,CACGyB,IADH,CACQH,CAAC,CAAC,QAAD,CADT,EAEGI,IAFH,CAEQ,OAFR;QAGAJ,CAAC,CAAC,MAAMtB,UAAP,CAAD,CAAoByB,IAApB,CAAyBH,CAAC,CAAC,QAAD,CAAD,CAAYE,MAAZ,EAAzB;YACMG,CAAC,GAAGL,CAAC,CAAC,MAAMtB,UAAP,CAAD,CAAoB4B,MAApB,EAAV;QACAD,CAAC,CAACE,QAAF,CAAWP,CAAC,CAAC,gBAAD,CAAZ;QACAA,CAAC,CAAC,wBAAD,CAAD,CAA4BE,MAA5B;QACAF,CAAC,CAAC,aAAD,CAAD,CAAiBQ,IAAjB,CAAsB,YAAW;UAC/BR,CAAC,CAAC,IAAD,CAAD;WACGG,IADH,CACQ,eADR,EAEGM,KAFH,GAGGC,MAHH,CAGUV,CAAC,CAAC,IAAD,CAAD,CAAQG,IAAR,CAAa,mBAAb,EAAkC7B,MAH5C,EAD+B;SAAjC;QAMA0B,CAAC,CAAC,aAAD,CAAD,CAAiBQ,IAAjB,CAAsB,YAAW;UAC/BR,CAAC,CAAC,IAAD,CAAD;WACGG,IADH,CACQ,qBADR,EAEGM,KAFH,GAGGC,MAHH,CAGUV,CAAC,CAAC,IAAD,CAAD,CAAQG,IAAR,CAAa,WAAb,EAA0B7B,MAHpC,EAD+B;SAAjC;;;GAxBR,EAiCGqC,KAjCH,CAiCS,UAASC,GAAT,EAAc;IACnBjB,OAAO,CAACC,GAAR,CAAYgB,GAAZ;GAlCJ;;;;;;;;;;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9hYWhpbGdlcnQvRGVza3RvcC9EZXZlbG9wbWVudC9teWRhbGl0ZSBwcm9qZWN0L2RhbGl0ZS1uZy9wZWVyaW5zdC9zdGF0aWMvcGVlcmluc3QvanMvX2FqYXgvdXRpbHMuanMiLCIvVXNlcnMvYWFoaWxnZXJ0L0Rlc2t0b3AvRGV2ZWxvcG1lbnQvbXlkYWxpdGUgcHJvamVjdC9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL19hamF4L2Fzc2lnbm1lbnRfZGV0YWlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBnZXRDc3JmVG9rZW4oKSB7XG4gIGNvbnN0IG5hbWUgPSBcImNzcmZ0b2tlblwiO1xuICBpZiAoZG9jdW1lbnQuY29va2llICYmIGRvY3VtZW50LmNvb2tpZSAhPT0gXCJcIikge1xuICAgIHJldHVybiBkb2N1bWVudC5jb29raWVcbiAgICAgIC5zcGxpdChcIjtcIilcbiAgICAgIC5tYXAoYyA9PiBjLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoYyA9PiBjLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCArIDEpID09PSBuYW1lICsgXCI9XCIpXG4gICAgICAubWFwKGMgPT4gZGVjb2RlVVJJQ29tcG9uZW50KGMuc3Vic3RyaW5nKG5hbWUubGVuZ3RoICsgMSkpKVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRSZXEoZGF0YSwgbWV0aG9kKSB7XG4gIGlmIChtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJnZXRcIikge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJYLUNTUkZUb2tlblwiOiBnZXRDc3JmVG9rZW4oKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfSBlbHNlIGlmIChtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJwb3N0XCIpIHtcbiAgICBjb25zdCBib2R5ID0gZGF0YSA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogXCJcIjtcbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGJvZHk6IGJvZHksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtQ1NSRlRva2VuXCI6IGdldENzcmZUb2tlbigpLFxuICAgICAgfSxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRocm93IEVycm9yKGBNZXRob2QgJHttZXRob2R9IG5vdCBpbXBsZW1lbnRlZCB5ZXQuYCk7XG4gIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBnZXRDc3JmVG9rZW4gfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXNzaWdubWVudFF1ZXN0aW9uTGlzdChcbiAgdXJsLFxuICBxdWVzdGlvbklkLFxuICBhc3NpZ25tZW50SWRlbnRpZmllcixcbikge1xuICBjb25zdCB0b2tlbiA9IGdldENzcmZUb2tlbigpO1xuICBjb25zdCBkYXRhID0ge1xuICAgIHF1ZXN0aW9uX2lkOiBxdWVzdGlvbklkLFxuICAgIGFzc2lnbm1lbnRfaWRlbnRpZmllcjogYXNzaWdubWVudElkZW50aWZpZXIsXG4gIH07XG4gIGNvbnN0IHJlcSA9IHtcbiAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIixcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIFwiWC1DU1JGVG9rZW5cIjogdG9rZW4sXG4gICAgfSxcbiAgfTtcbiAgZmV0Y2godXJsLCByZXEpXG4gICAgLnRoZW4oZnVuY3Rpb24ocmVzcCkge1xuICAgICAgaWYgKCFyZXNwLm9rKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWFuaXB1bGF0ZSBET01cbiAgICAgICAgY29uc3QgbGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicXVlc3Rpb24tbGlzdFwiKTtcbiAgICAgICAgY29uc3QgY2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHF1ZXN0aW9uSWQpO1xuICAgICAgICBpZiAoJC5jb250YWlucyhsaXN0LCBjYXJkKSkge1xuICAgICAgICAgICQoXCIjXCIgKyBxdWVzdGlvbklkKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKFwiI1wiICsgcXVlc3Rpb25JZClcbiAgICAgICAgICAgIC5maW5kKCQoXCJidXR0b25cIikpXG4gICAgICAgICAgICAuaHRtbChcImNsZWFyXCIpO1xuICAgICAgICAgICQoXCIjXCIgKyBxdWVzdGlvbklkKS5maW5kKCQoXCIuc3RhdHNcIikucmVtb3ZlKCkpO1xuICAgICAgICAgIGNvbnN0IHEgPSAkKFwiI1wiICsgcXVlc3Rpb25JZCkuZGV0YWNoKCk7XG4gICAgICAgICAgcS5hcHBlbmRUbygkKFwiI3F1ZXN0aW9uLWxpc3RcIikpO1xuICAgICAgICAgICQoXCIjZW1wdHktYXNzaWdubWVudC1saXN0XCIpLnJlbW92ZSgpO1xuICAgICAgICAgICQoXCIuc2VhcmNoLXNldFwiKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgICAgICAgICAuZmluZChcIi5maWx0ZXItY291bnRcIilcbiAgICAgICAgICAgICAgLmVtcHR5KClcbiAgICAgICAgICAgICAgLmFwcGVuZCgkKHRoaXMpLmZpbmQoXCIubWRjLWNhcmQ6dmlzaWJsZVwiKS5sZW5ndGgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpcyxtYXgtbGVuXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJChcIi5zZWFyY2gtc2V0XCIpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICAgICAgICAgIC5maW5kKFwiLmZpbHRlci1jb3VudC10b3RhbFwiKVxuICAgICAgICAgICAgICAuZW1wdHkoKVxuICAgICAgICAgICAgICAuYXBwZW5kKCQodGhpcykuZmluZChcIi5tZGMtY2FyZFwiKS5sZW5ndGgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpcyxtYXgtbGVuXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7XG59XG4iXSwibmFtZXMiOlsiZ2V0Q3NyZlRva2VuIiwibmFtZSIsImRvY3VtZW50IiwiY29va2llIiwic3BsaXQiLCJtYXAiLCJjIiwidHJpbSIsImZpbHRlciIsInN1YnN0cmluZyIsImxlbmd0aCIsImRlY29kZVVSSUNvbXBvbmVudCIsInVwZGF0ZUFzc2lnbm1lbnRRdWVzdGlvbkxpc3QiLCJ1cmwiLCJxdWVzdGlvbklkIiwiYXNzaWdubWVudElkZW50aWZpZXIiLCJ0b2tlbiIsImRhdGEiLCJxdWVzdGlvbl9pZCIsImFzc2lnbm1lbnRfaWRlbnRpZmllciIsInJlcSIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY3JlZGVudGlhbHMiLCJoZWFkZXJzIiwiZmV0Y2giLCJ0aGVuIiwicmVzcCIsIm9rIiwiY29uc29sZSIsImxvZyIsImxpc3QiLCJnZXRFbGVtZW50QnlJZCIsImNhcmQiLCIkIiwiY29udGFpbnMiLCJyZW1vdmUiLCJmaW5kIiwiaHRtbCIsInEiLCJkZXRhY2giLCJhcHBlbmRUbyIsImVhY2giLCJlbXB0eSIsImFwcGVuZCIsImNhdGNoIiwiZXJyIl0sIm1hcHBpbmdzIjoiOzs7QUFBTyxTQUFTQSxZQUFULEdBQXdCO01BQ3ZCQyxJQUFJLEdBQUcsV0FBYjs7TUFDSUMsUUFBUSxDQUFDQyxNQUFULElBQW1CRCxRQUFRLENBQUNDLE1BQVQsS0FBb0IsRUFBM0MsRUFBK0M7V0FDdENELFFBQVEsQ0FBQ0MsTUFBVCxDQUNKQyxLQURJLENBQ0UsR0FERixFQUVKQyxHQUZJLENBRUEsVUFBQUMsQ0FBQzthQUFJQSxDQUFDLENBQUNDLElBQUYsRUFBSjtLQUZELEVBR0pDLE1BSEksQ0FHRyxVQUFBRixDQUFDO2FBQUlBLENBQUMsQ0FBQ0csU0FBRixDQUFZLENBQVosRUFBZVIsSUFBSSxDQUFDUyxNQUFMLEdBQWMsQ0FBN0IsTUFBb0NULElBQUksR0FBRyxHQUEvQztLQUhKLEVBSUpJLEdBSkksQ0FJQSxVQUFBQyxDQUFDO2FBQUlLLGtCQUFrQixDQUFDTCxDQUFDLENBQUNHLFNBQUYsQ0FBWVIsSUFBSSxDQUFDUyxNQUFMLEdBQWMsQ0FBMUIsQ0FBRCxDQUF0QjtLQUpELEVBSXVELENBSnZELENBQVA7R0FERixNQU1PO1dBQ0UsSUFBUDs7OztBQ1RKOztBQUVBLEFBRU8sU0FBU0UsNEJBQVQsQ0FDTEMsR0FESyxFQUVMQyxVQUZLLEVBR0xDLG9CQUhLLEVBSUw7TUFDTUMsS0FBSyxHQUFHaEIsWUFBWSxFQUExQjtNQUNNaUIsSUFBSSxHQUFHO0lBQ1hDLFdBQVcsRUFBRUosVUFERjtJQUVYSyxxQkFBcUIsRUFBRUo7R0FGekI7TUFJTUssR0FBRyxHQUFHO0lBQ1ZDLE1BQU0sRUFBRSxNQURFO0lBRVZDLElBQUksRUFBRUMsSUFBSSxDQUFDQyxTQUFMLENBQWVQLElBQWYsQ0FGSTtJQUdWUSxXQUFXLEVBQUUsU0FISDtJQUlWQyxPQUFPLEVBQUU7c0JBQ1Msa0JBRFQ7cUJBRVFWOztHQU5uQjtFQVNBVyxLQUFLLENBQUNkLEdBQUQsRUFBTU8sR0FBTixDQUFMLENBQ0dRLElBREgsQ0FDUSxVQUFTQyxJQUFULEVBQWU7UUFDZixDQUFDQSxJQUFJLENBQUNDLEVBQVYsRUFBYztNQUNaQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUgsSUFBWjtLQURGLE1BRU87O1VBRUNJLElBQUksR0FBRy9CLFFBQVEsQ0FBQ2dDLGNBQVQsQ0FBd0IsZUFBeEIsQ0FBYjtVQUNNQyxJQUFJLEdBQUdqQyxRQUFRLENBQUNnQyxjQUFULENBQXdCcEIsVUFBeEIsQ0FBYjs7VUFDSXNCLENBQUMsQ0FBQ0MsUUFBRixDQUFXSixJQUFYLEVBQWlCRSxJQUFqQixDQUFKLEVBQTRCO1FBQzFCQyxDQUFDLENBQUMsTUFBTXRCLFVBQVAsQ0FBRCxDQUFvQndCLE1BQXBCO09BREYsTUFFTztRQUNMRixDQUFDLENBQUMsTUFBTXRCLFVBQVAsQ0FBRCxDQUNHeUIsSUFESCxDQUNRSCxDQUFDLENBQUMsUUFBRCxDQURULEVBRUdJLElBRkgsQ0FFUSxPQUZSO1FBR0FKLENBQUMsQ0FBQyxNQUFNdEIsVUFBUCxDQUFELENBQW9CeUIsSUFBcEIsQ0FBeUJILENBQUMsQ0FBQyxRQUFELENBQUQsQ0FBWUUsTUFBWixFQUF6QjtZQUNNRyxDQUFDLEdBQUdMLENBQUMsQ0FBQyxNQUFNdEIsVUFBUCxDQUFELENBQW9CNEIsTUFBcEIsRUFBVjtRQUNBRCxDQUFDLENBQUNFLFFBQUYsQ0FBV1AsQ0FBQyxDQUFDLGdCQUFELENBQVo7UUFDQUEsQ0FBQyxDQUFDLHdCQUFELENBQUQsQ0FBNEJFLE1BQTVCO1FBQ0FGLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUJRLElBQWpCLENBQXNCLFlBQVc7VUFDL0JSLENBQUMsQ0FBQyxJQUFELENBQUQ7V0FDR0csSUFESCxDQUNRLGVBRFIsRUFFR00sS0FGSCxHQUdHQyxNQUhILENBR1VWLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUcsSUFBUixDQUFhLG1CQUFiLEVBQWtDN0IsTUFINUMsRUFEK0I7U0FBakM7UUFNQTBCLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBaUJRLElBQWpCLENBQXNCLFlBQVc7VUFDL0JSLENBQUMsQ0FBQyxJQUFELENBQUQ7V0FDR0csSUFESCxDQUNRLHFCQURSLEVBRUdNLEtBRkgsR0FHR0MsTUFISCxDQUdVVixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFHLElBQVIsQ0FBYSxXQUFiLEVBQTBCN0IsTUFIcEMsRUFEK0I7U0FBakM7OztHQXhCUixFQWlDR3FDLEtBakNILENBaUNTLFVBQVNDLEdBQVQsRUFBYztJQUNuQmpCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZZ0IsR0FBWjtHQWxDSjs7Ozs7Ozs7Ozs7In0="}

{"version":3,"file":"ajax.min.js","sources":["peerinst/static/peerinst/js/_ajax/utils.js","peerinst/static/peerinst/js/_ajax/assignment_detail.js"],"sourcesContent":["export function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n      credentials: \"same-origin\",\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","\"use strict\";\n\nimport { getCsrfToken } from \"./utils.js\";\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\"button\"))\n            .html(\"clear\");\n          $(\"#\" + questionId).find($(\".stats\").remove());\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","updateAssignmentQuestionList","url","questionId","assignmentIdentifier","token","data","question_id","assignment_identifier","req","method","body","JSON","stringify","credentials","headers","fetch","then","resp","ok","console","log","list","getElementById","card","$","contains","remove","find","html","q","detach","appendTo","each","empty","append","length","catch","err"],"mappings":";;;AAAO,SAASA,YAAT,GAAwB;SACtBC,QAAQ,CACZC,iBADI,CACc,qBADd,EACqC,CADrC,EAEJC,YAFI,CAES,OAFT,CAAP;;;ACDF;;AAEA,AAEO,SAASC,4BAAT,CACLC,GADK,EAELC,UAFK,EAGLC,oBAHK,EAIL;MACMC,KAAK,GAAGR,YAAY,EAA1B;MACMS,IAAI,GAAG;IACXC,WAAW,EAAEJ,UADF;IAEXK,qBAAqB,EAAEJ;GAFzB;MAIMK,GAAG,GAAG;IACVC,MAAM,EAAE,MADE;IAEVC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf,CAFI;IAGVQ,WAAW,EAAE,SAHH;IAIVC,OAAO,EAAE;sBACS,kBADT;qBAEQV;;GANnB;EASAW,KAAK,CAACd,GAAD,EAAMO,GAAN,CAAL,CACGQ,IADH,CACQ,UAASC,IAAT,EAAe;QACf,CAACA,IAAI,CAACC,EAAV,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYH,IAAZ;KADF,MAEO;;UAECI,IAAI,GAAGxB,QAAQ,CAACyB,cAAT,CAAwB,eAAxB,CAAb;UACMC,IAAI,GAAG1B,QAAQ,CAACyB,cAAT,CAAwBpB,UAAxB,CAAb;;UACIsB,CAAC,CAACC,QAAF,CAAWJ,IAAX,EAAiBE,IAAjB,CAAJ,EAA4B;QAC1BC,CAAC,CAAC,MAAMtB,UAAP,CAAD,CAAoBwB,MAApB;OADF,MAEO;QACLF,CAAC,CAAC,MAAMtB,UAAP,CAAD,CACGyB,IADH,CACQH,CAAC,CAAC,QAAD,CADT,EAEGI,IAFH,CAEQ,OAFR;QAGAJ,CAAC,CAAC,MAAMtB,UAAP,CAAD,CAAoByB,IAApB,CAAyBH,CAAC,CAAC,QAAD,CAAD,CAAYE,MAAZ,EAAzB;YACMG,CAAC,GAAGL,CAAC,CAAC,MAAMtB,UAAP,CAAD,CAAoB4B,MAApB,EAAV;QACAD,CAAC,CAACE,QAAF,CAAWP,CAAC,CAAC,gBAAD,CAAZ;QACAA,CAAC,CAAC,wBAAD,CAAD,CAA4BE,MAA5B;QACAF,CAAC,CAAC,aAAD,CAAD,CAAiBQ,IAAjB,CAAsB,YAAW;UAC/BR,CAAC,CAAC,IAAD,CAAD;WACGG,IADH,CACQ,eADR,EAEGM,KAFH,GAGGC,MAHH,CAGUV,CAAC,CAAC,IAAD,CAAD,CAAQG,IAAR,CAAa,mBAAb,EAAkCQ,MAH5C,EAD+B;SAAjC;QAMAX,CAAC,CAAC,aAAD,CAAD,CAAiBQ,IAAjB,CAAsB,YAAW;UAC/BR,CAAC,CAAC,IAAD,CAAD;WACGG,IADH,CACQ,qBADR,EAEGM,KAFH,GAGGC,MAHH,CAGUV,CAAC,CAAC,IAAD,CAAD,CAAQG,IAAR,CAAa,WAAb,EAA0BQ,MAHpC,EAD+B;SAAjC;;;GAxBR,EAiCGC,KAjCH,CAiCS,UAASC,GAAT,EAAc;IACnBlB,OAAO,CAACC,GAAR,CAAYiB,GAAZ;GAlCJ;;;;;;;;;;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9ob21lL2FudG9pbmUvZG9jdW1lbnRzL3dvcmsvc2NpdmVyby9wcm9qZWN0cy9kYWxpdGUvZGFsaXRlL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fYWpheC91dGlscy5qcyIsIi9ob21lL2FudG9pbmUvZG9jdW1lbnRzL3dvcmsvc2NpdmVyby9wcm9qZWN0cy9kYWxpdGUvZGFsaXRlL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fYWpheC9hc3NpZ25tZW50X2RldGFpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0Q3NyZlRva2VuKCkge1xuICByZXR1cm4gZG9jdW1lbnRcbiAgICAuZ2V0RWxlbWVudHNCeU5hbWUoXCJjc3JmbWlkZGxld2FyZXRva2VuXCIpWzBdXG4gICAgLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRSZXEoZGF0YSwgbWV0aG9kKSB7XG4gIGlmIChtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJnZXRcIikge1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJYLUNTUkZUb2tlblwiOiBnZXRDc3JmVG9rZW4oKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfSBlbHNlIGlmIChtZXRob2QudG9Mb3dlckNhc2UoKSA9PT0gXCJwb3N0XCIpIHtcbiAgICBjb25zdCBib2R5ID0gZGF0YSA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogXCJcIjtcbiAgICByZXR1cm4ge1xuICAgICAgbWV0aG9kOiBtZXRob2QudG9VcHBlckNhc2UoKSxcbiAgICAgIGJvZHk6IGJvZHksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtQ1NSRlRva2VuXCI6IGdldENzcmZUb2tlbigpLFxuICAgICAgfSxcbiAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcihgTWV0aG9kICR7bWV0aG9kfSBub3QgaW1wbGVtZW50ZWQgeWV0LmApO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgZ2V0Q3NyZlRva2VuIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUFzc2lnbm1lbnRRdWVzdGlvbkxpc3QoXG4gIHVybCxcbiAgcXVlc3Rpb25JZCxcbiAgYXNzaWdubWVudElkZW50aWZpZXIsXG4pIHtcbiAgY29uc3QgdG9rZW4gPSBnZXRDc3JmVG9rZW4oKTtcbiAgY29uc3QgZGF0YSA9IHtcbiAgICBxdWVzdGlvbl9pZDogcXVlc3Rpb25JZCxcbiAgICBhc3NpZ25tZW50X2lkZW50aWZpZXI6IGFzc2lnbm1lbnRJZGVudGlmaWVyLFxuICB9O1xuICBjb25zdCByZXEgPSB7XG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXG4gICAgaGVhZGVyczoge1xuICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBcIlgtQ1NSRlRva2VuXCI6IHRva2VuLFxuICAgIH0sXG4gIH07XG4gIGZldGNoKHVybCwgcmVxKVxuICAgIC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgIGlmICghcmVzcC5vaykge1xuICAgICAgICBjb25zb2xlLmxvZyhyZXNwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1hbmlwdWxhdGUgRE9NXG4gICAgICAgIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXN0aW9uLWxpc3RcIik7XG4gICAgICAgIGNvbnN0IGNhcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChxdWVzdGlvbklkKTtcbiAgICAgICAgaWYgKCQuY29udGFpbnMobGlzdCwgY2FyZCkpIHtcbiAgICAgICAgICAkKFwiI1wiICsgcXVlc3Rpb25JZCkucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJChcIiNcIiArIHF1ZXN0aW9uSWQpXG4gICAgICAgICAgICAuZmluZCgkKFwiYnV0dG9uXCIpKVxuICAgICAgICAgICAgLmh0bWwoXCJjbGVhclwiKTtcbiAgICAgICAgICAkKFwiI1wiICsgcXVlc3Rpb25JZCkuZmluZCgkKFwiLnN0YXRzXCIpLnJlbW92ZSgpKTtcbiAgICAgICAgICBjb25zdCBxID0gJChcIiNcIiArIHF1ZXN0aW9uSWQpLmRldGFjaCgpO1xuICAgICAgICAgIHEuYXBwZW5kVG8oJChcIiNxdWVzdGlvbi1saXN0XCIpKTtcbiAgICAgICAgICAkKFwiI2VtcHR5LWFzc2lnbm1lbnQtbGlzdFwiKS5yZW1vdmUoKTtcbiAgICAgICAgICAkKFwiLnNlYXJjaC1zZXRcIikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgICAgICAgICAgLmZpbmQoXCIuZmlsdGVyLWNvdW50XCIpXG4gICAgICAgICAgICAgIC5lbXB0eSgpXG4gICAgICAgICAgICAgIC5hcHBlbmQoJCh0aGlzKS5maW5kKFwiLm1kYy1jYXJkOnZpc2libGVcIikubGVuZ3RoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXMsbWF4LWxlblxuICAgICAgICAgIH0pO1xuICAgICAgICAgICQoXCIuc2VhcmNoLXNldFwiKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgICAgICAgICAuZmluZChcIi5maWx0ZXItY291bnQtdG90YWxcIilcbiAgICAgICAgICAgICAgLmVtcHR5KClcbiAgICAgICAgICAgICAgLmFwcGVuZCgkKHRoaXMpLmZpbmQoXCIubWRjLWNhcmRcIikubGVuZ3RoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1pbnZhbGlkLXRoaXMsbWF4LWxlblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufVxuIl0sIm5hbWVzIjpbImdldENzcmZUb2tlbiIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJ1cGRhdGVBc3NpZ25tZW50UXVlc3Rpb25MaXN0IiwidXJsIiwicXVlc3Rpb25JZCIsImFzc2lnbm1lbnRJZGVudGlmaWVyIiwidG9rZW4iLCJkYXRhIiwicXVlc3Rpb25faWQiLCJhc3NpZ25tZW50X2lkZW50aWZpZXIiLCJyZXEiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWRlbnRpYWxzIiwiaGVhZGVycyIsImZldGNoIiwidGhlbiIsInJlc3AiLCJvayIsImNvbnNvbGUiLCJsb2ciLCJsaXN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJjYXJkIiwiJCIsImNvbnRhaW5zIiwicmVtb3ZlIiwiZmluZCIsImh0bWwiLCJxIiwiZGV0YWNoIiwiYXBwZW5kVG8iLCJlYWNoIiwiZW1wdHkiLCJhcHBlbmQiLCJsZW5ndGgiLCJjYXRjaCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7O0FBQU8sU0FBU0EsWUFBVCxHQUF3QjtTQUN0QkMsUUFBUSxDQUNaQyxpQkFESSxDQUNjLHFCQURkLEVBQ3FDLENBRHJDLEVBRUpDLFlBRkksQ0FFUyxPQUZULENBQVA7OztBQ0RGOztBQUVBLEFBRU8sU0FBU0MsNEJBQVQsQ0FDTEMsR0FESyxFQUVMQyxVQUZLLEVBR0xDLG9CQUhLLEVBSUw7TUFDTUMsS0FBSyxHQUFHUixZQUFZLEVBQTFCO01BQ01TLElBQUksR0FBRztJQUNYQyxXQUFXLEVBQUVKLFVBREY7SUFFWEsscUJBQXFCLEVBQUVKO0dBRnpCO01BSU1LLEdBQUcsR0FBRztJQUNWQyxNQUFNLEVBQUUsTUFERTtJQUVWQyxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlUCxJQUFmLENBRkk7SUFHVlEsV0FBVyxFQUFFLFNBSEg7SUFJVkMsT0FBTyxFQUFFO3NCQUNTLGtCQURUO3FCQUVRVjs7R0FObkI7RUFTQVcsS0FBSyxDQUFDZCxHQUFELEVBQU1PLEdBQU4sQ0FBTCxDQUNHUSxJQURILENBQ1EsVUFBU0MsSUFBVCxFQUFlO1FBQ2YsQ0FBQ0EsSUFBSSxDQUFDQyxFQUFWLEVBQWM7TUFDWkMsT0FBTyxDQUFDQyxHQUFSLENBQVlILElBQVo7S0FERixNQUVPOztVQUVDSSxJQUFJLEdBQUd4QixRQUFRLENBQUN5QixjQUFULENBQXdCLGVBQXhCLENBQWI7VUFDTUMsSUFBSSxHQUFHMUIsUUFBUSxDQUFDeUIsY0FBVCxDQUF3QnBCLFVBQXhCLENBQWI7O1VBQ0lzQixDQUFDLENBQUNDLFFBQUYsQ0FBV0osSUFBWCxFQUFpQkUsSUFBakIsQ0FBSixFQUE0QjtRQUMxQkMsQ0FBQyxDQUFDLE1BQU10QixVQUFQLENBQUQsQ0FBb0J3QixNQUFwQjtPQURGLE1BRU87UUFDTEYsQ0FBQyxDQUFDLE1BQU10QixVQUFQLENBQUQsQ0FDR3lCLElBREgsQ0FDUUgsQ0FBQyxDQUFDLFFBQUQsQ0FEVCxFQUVHSSxJQUZILENBRVEsT0FGUjtRQUdBSixDQUFDLENBQUMsTUFBTXRCLFVBQVAsQ0FBRCxDQUFvQnlCLElBQXBCLENBQXlCSCxDQUFDLENBQUMsUUFBRCxDQUFELENBQVlFLE1BQVosRUFBekI7WUFDTUcsQ0FBQyxHQUFHTCxDQUFDLENBQUMsTUFBTXRCLFVBQVAsQ0FBRCxDQUFvQjRCLE1BQXBCLEVBQVY7UUFDQUQsQ0FBQyxDQUFDRSxRQUFGLENBQVdQLENBQUMsQ0FBQyxnQkFBRCxDQUFaO1FBQ0FBLENBQUMsQ0FBQyx3QkFBRCxDQUFELENBQTRCRSxNQUE1QjtRQUNBRixDQUFDLENBQUMsYUFBRCxDQUFELENBQWlCUSxJQUFqQixDQUFzQixZQUFXO1VBQy9CUixDQUFDLENBQUMsSUFBRCxDQUFEO1dBQ0dHLElBREgsQ0FDUSxlQURSLEVBRUdNLEtBRkgsR0FHR0MsTUFISCxDQUdVVixDQUFDLENBQUMsSUFBRCxDQUFELENBQVFHLElBQVIsQ0FBYSxtQkFBYixFQUFrQ1EsTUFINUMsRUFEK0I7U0FBakM7UUFNQVgsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUFpQlEsSUFBakIsQ0FBc0IsWUFBVztVQUMvQlIsQ0FBQyxDQUFDLElBQUQsQ0FBRDtXQUNHRyxJQURILENBQ1EscUJBRFIsRUFFR00sS0FGSCxHQUdHQyxNQUhILENBR1VWLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBUUcsSUFBUixDQUFhLFdBQWIsRUFBMEJRLE1BSHBDLEVBRCtCO1NBQWpDOzs7R0F4QlIsRUFpQ0dDLEtBakNILENBaUNTLFVBQVNDLEdBQVQsRUFBYztJQUNuQmxCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZaUIsR0FBWjtHQWxDSjs7Ozs7Ozs7Ozs7In0="}
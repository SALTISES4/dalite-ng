{"version":3,"file":"index.min.js","sources":["node_modules/@material/auto-init/index.js","node_modules/@material/animation/index.js","node_modules/@material/base/foundation.js","node_modules/@material/base/component.js","node_modules/@material/ripple/adapter.js","node_modules/@material/ripple/constants.js","node_modules/@material/ripple/util.js","node_modules/@material/ripple/foundation.js","node_modules/@material/ripple/index.js","node_modules/@material/selection-control/index.js","node_modules/@material/checkbox/adapter.js","node_modules/@material/checkbox/constants.js","node_modules/@material/checkbox/foundation.js","node_modules/@material/checkbox/index.js","node_modules/@material/chips/chip/adapter.js","node_modules/@material/chips/chip/constants.js","node_modules/@material/chips/chip/foundation.js","node_modules/@material/chips/chip/index.js","node_modules/@material/chips/chip-set/adapter.js","node_modules/@material/chips/chip-set/constants.js","node_modules/@material/chips/chip-set/foundation.js","node_modules/@material/chips/chip-set/index.js","node_modules/@material/chips/index.js","node_modules/@material/dialog/adapter.js","node_modules/@material/dialog/constants.js","node_modules/@material/dialog/foundation.js","node_modules/tabbable/index.js","node_modules/xtend/immutable.js","node_modules/focus-trap/index.js","node_modules/@material/dialog/util.js","node_modules/@material/dom/ponyfill.js","node_modules/@material/dialog/index.js","node_modules/@material/drawer/adapter.js","node_modules/@material/drawer/constants.js","node_modules/@material/drawer/dismissible/foundation.js","node_modules/@material/drawer/modal/foundation.js","node_modules/@material/list/adapter.js","node_modules/@material/list/constants.js","node_modules/@material/list/foundation.js","node_modules/@material/list/index.js","node_modules/@material/drawer/util.js","node_modules/@material/drawer/index.js","node_modules/@material/textfield/helper-text/adapter.js","node_modules/@material/textfield/helper-text/constants.js","node_modules/@material/textfield/helper-text/foundation.js","node_modules/@material/textfield/helper-text/index.js","node_modules/@material/icon-toggle/adapter.js","node_modules/@material/icon-toggle/constants.js","node_modules/@material/icon-toggle/foundation.js","node_modules/@material/icon-toggle/index.js","node_modules/@material/radio/adapter.js","node_modules/@material/radio/constants.js","node_modules/@material/radio/foundation.js","node_modules/@material/radio/index.js","node_modules/@material/floating-label/adapter.js","node_modules/@material/floating-label/constants.js","node_modules/@material/floating-label/foundation.js","node_modules/@material/floating-label/index.js","node_modules/@material/line-ripple/adapter.js","node_modules/@material/line-ripple/constants.js","node_modules/@material/line-ripple/foundation.js","node_modules/@material/line-ripple/index.js","node_modules/@material/menu/adapter.js","node_modules/@material/menu/constants.js","node_modules/@material/menu-surface/adapter.js","node_modules/@material/menu-surface/constants.js","node_modules/@material/menu-surface/foundation.js","node_modules/@material/menu/foundation.js","node_modules/@material/menu-surface/util.js","node_modules/@material/menu-surface/index.js","node_modules/@material/menu/index.js","node_modules/@material/notched-outline/adapter.js","node_modules/@material/notched-outline/constants.js","node_modules/@material/notched-outline/foundation.js","node_modules/@material/notched-outline/index.js","node_modules/@material/select/icon/adapter.js","node_modules/@material/select/icon/constants.js","node_modules/@material/select/icon/foundation.js","node_modules/@material/select/icon/index.js","node_modules/@material/select/helper-text/adapter.js","node_modules/@material/select/helper-text/constants.js","node_modules/@material/select/helper-text/foundation.js","node_modules/@material/select/helper-text/index.js","node_modules/@material/select/adapter.js","node_modules/@material/select/constants.js","node_modules/@material/select/foundation.js","node_modules/@material/select/index.js","node_modules/@material/textfield/constants.js","node_modules/@material/textfield/character-counter/adapter.js","node_modules/@material/textfield/character-counter/constants.js","node_modules/@material/textfield/character-counter/foundation.js","node_modules/@material/textfield/icon/adapter.js","node_modules/@material/textfield/icon/constants.js","node_modules/@material/textfield/icon/foundation.js","node_modules/@material/textfield/adapter.js","node_modules/@material/textfield/foundation.js","node_modules/@material/textfield/character-counter/index.js","node_modules/@material/textfield/icon/index.js","node_modules/@material/textfield/index.js","node_modules/@material/toolbar/constants.js","node_modules/@material/toolbar/foundation.js","node_modules/@material/toolbar/index.js","node_modules/d3-array/src/ascending.js","node_modules/d3-array/src/bisector.js","node_modules/d3-array/src/bisect.js","node_modules/d3-array/src/range.js","node_modules/d3-array/src/ticks.js","node_modules/d3-array/src/max.js","node_modules/d3-axis/src/array.js","node_modules/d3-axis/src/identity.js","node_modules/d3-axis/src/axis.js","node_modules/d3-dispatch/src/dispatch.js","node_modules/d3-selection/src/namespaces.js","node_modules/d3-selection/src/namespace.js","node_modules/d3-selection/src/creator.js","node_modules/d3-selection/src/selector.js","node_modules/d3-selection/src/selection/select.js","node_modules/d3-selection/src/selectorAll.js","node_modules/d3-selection/src/selection/selectAll.js","node_modules/d3-selection/src/matcher.js","node_modules/d3-selection/src/selection/filter.js","node_modules/d3-selection/src/selection/sparse.js","node_modules/d3-selection/src/selection/enter.js","node_modules/d3-selection/src/constant.js","node_modules/d3-selection/src/selection/data.js","node_modules/d3-selection/src/selection/exit.js","node_modules/d3-selection/src/selection/join.js","node_modules/d3-selection/src/selection/merge.js","node_modules/d3-selection/src/selection/order.js","node_modules/d3-selection/src/selection/sort.js","node_modules/d3-selection/src/selection/call.js","node_modules/d3-selection/src/selection/nodes.js","node_modules/d3-selection/src/selection/node.js","node_modules/d3-selection/src/selection/size.js","node_modules/d3-selection/src/selection/empty.js","node_modules/d3-selection/src/selection/each.js","node_modules/d3-selection/src/selection/attr.js","node_modules/d3-selection/src/window.js","node_modules/d3-selection/src/selection/style.js","node_modules/d3-selection/src/selection/property.js","node_modules/d3-selection/src/selection/classed.js","node_modules/d3-selection/src/selection/text.js","node_modules/d3-selection/src/selection/html.js","node_modules/d3-selection/src/selection/raise.js","node_modules/d3-selection/src/selection/lower.js","node_modules/d3-selection/src/selection/append.js","node_modules/d3-selection/src/selection/insert.js","node_modules/d3-selection/src/selection/remove.js","node_modules/d3-selection/src/selection/clone.js","node_modules/d3-selection/src/selection/datum.js","node_modules/d3-selection/src/selection/on.js","node_modules/d3-selection/src/selection/dispatch.js","node_modules/d3-selection/src/selection/index.js","node_modules/d3-selection/src/select.js","node_modules/d3-selection/src/sourceEvent.js","node_modules/d3-selection/src/point.js","node_modules/d3-selection/src/mouse.js","node_modules/d3-selection/src/selectAll.js","node_modules/d3-drag/src/event.js","node_modules/d3-color/src/define.js","node_modules/d3-color/src/color.js","node_modules/d3-color/src/math.js","node_modules/d3-color/src/lab.js","node_modules/d3-color/src/cubehelix.js","node_modules/d3-interpolate/src/basis.js","node_modules/d3-interpolate/src/basisClosed.js","node_modules/d3-interpolate/src/constant.js","node_modules/d3-interpolate/src/color.js","node_modules/d3-interpolate/src/rgb.js","node_modules/d3-interpolate/src/array.js","node_modules/d3-interpolate/src/date.js","node_modules/d3-interpolate/src/number.js","node_modules/d3-interpolate/src/object.js","node_modules/d3-interpolate/src/string.js","node_modules/d3-interpolate/src/value.js","node_modules/d3-interpolate/src/round.js","node_modules/d3-interpolate/src/transform/decompose.js","node_modules/d3-interpolate/src/transform/parse.js","node_modules/d3-interpolate/src/transform/index.js","node_modules/d3-interpolate/src/cubehelix.js","node_modules/d3-timer/src/timer.js","node_modules/d3-timer/src/timeout.js","node_modules/d3-transition/src/transition/schedule.js","node_modules/d3-transition/src/interrupt.js","node_modules/d3-transition/src/selection/interrupt.js","node_modules/d3-transition/src/transition/tween.js","node_modules/d3-transition/src/transition/interpolate.js","node_modules/d3-transition/src/transition/attr.js","node_modules/d3-transition/src/transition/attrTween.js","node_modules/d3-transition/src/transition/delay.js","node_modules/d3-transition/src/transition/duration.js","node_modules/d3-transition/src/transition/ease.js","node_modules/d3-transition/src/transition/filter.js","node_modules/d3-transition/src/transition/merge.js","node_modules/d3-transition/src/transition/on.js","node_modules/d3-transition/src/transition/remove.js","node_modules/d3-transition/src/transition/select.js","node_modules/d3-transition/src/transition/selectAll.js","node_modules/d3-transition/src/transition/selection.js","node_modules/d3-transition/src/transition/style.js","node_modules/d3-transition/src/transition/styleTween.js","node_modules/d3-transition/src/transition/text.js","node_modules/d3-transition/src/transition/transition.js","node_modules/d3-transition/src/transition/end.js","node_modules/d3-transition/src/transition/index.js","node_modules/d3-ease/src/cubic.js","node_modules/d3-transition/src/selection/transition.js","node_modules/d3-transition/src/selection/index.js","node_modules/d3-transition/src/active.js","node_modules/d3-brush/src/brush.js","node_modules/d3-path/src/path.js","node_modules/d3-collection/src/map.js","node_modules/d3-collection/src/keys.js","node_modules/d3-collection/src/values.js","node_modules/d3-collection/src/entries.js","node_modules/d3-contour/src/blur.js","node_modules/d3-dsv/src/dsv.js","node_modules/d3-dsv/src/csv.js","node_modules/d3-dsv/src/tsv.js","node_modules/d3-quadtree/src/add.js","node_modules/d3-quadtree/src/cover.js","node_modules/d3-quadtree/src/data.js","node_modules/d3-quadtree/src/extent.js","node_modules/d3-quadtree/src/quad.js","node_modules/d3-quadtree/src/find.js","node_modules/d3-quadtree/src/remove.js","node_modules/d3-quadtree/src/root.js","node_modules/d3-quadtree/src/size.js","node_modules/d3-quadtree/src/visit.js","node_modules/d3-quadtree/src/visitAfter.js","node_modules/d3-quadtree/src/x.js","node_modules/d3-quadtree/src/y.js","node_modules/d3-quadtree/src/quadtree.js","node_modules/d3-format/src/formatDecimal.js","node_modules/d3-format/src/exponent.js","node_modules/d3-format/src/formatGroup.js","node_modules/d3-format/src/formatNumerals.js","node_modules/d3-format/src/formatSpecifier.js","node_modules/d3-format/src/formatTrim.js","node_modules/d3-format/src/formatPrefixAuto.js","node_modules/d3-format/src/formatRounded.js","node_modules/d3-format/src/formatTypes.js","node_modules/d3-format/src/identity.js","node_modules/d3-format/src/locale.js","node_modules/d3-format/src/defaultLocale.js","node_modules/d3-format/src/precisionFixed.js","node_modules/d3-format/src/precisionPrefix.js","node_modules/d3-format/src/precisionRound.js","node_modules/d3-geo/src/adder.js","node_modules/d3-geo/src/math.js","node_modules/d3-geo/src/area.js","node_modules/d3-geo/src/cartesian.js","node_modules/d3-geo/src/bounds.js","node_modules/d3-geo/src/circle.js","node_modules/d3-geo/src/polygonContains.js","node_modules/d3-geo/src/length.js","node_modules/d3-geo/src/path/area.js","node_modules/d3-geo/src/path/measure.js","node_modules/d3-geo/src/projection/azimuthal.js","node_modules/d3-geo/src/projection/azimuthalEqualArea.js","node_modules/d3-geo/src/projection/azimuthalEquidistant.js","node_modules/d3-geo/src/projection/gnomonic.js","node_modules/d3-geo/src/projection/orthographic.js","node_modules/d3-geo/src/projection/stereographic.js","node_modules/d3-polygon/src/cross.js","node_modules/d3-scale/src/init.js","node_modules/d3-scale/src/array.js","node_modules/d3-scale/src/ordinal.js","node_modules/d3-scale/src/band.js","node_modules/d3-scale/src/constant.js","node_modules/d3-scale/src/number.js","node_modules/d3-scale/src/continuous.js","node_modules/d3-scale/src/tickFormat.js","node_modules/d3-scale/src/linear.js","node_modules/d3-scale/src/nice.js","node_modules/d3-time/src/interval.js","node_modules/d3-time/src/millisecond.js","node_modules/d3-time/src/duration.js","node_modules/d3-time/src/second.js","node_modules/d3-time/src/minute.js","node_modules/d3-time/src/hour.js","node_modules/d3-time/src/day.js","node_modules/d3-time/src/week.js","node_modules/d3-time/src/month.js","node_modules/d3-time/src/year.js","node_modules/d3-time/src/utcMinute.js","node_modules/d3-time/src/utcHour.js","node_modules/d3-time/src/utcDay.js","node_modules/d3-time/src/utcWeek.js","node_modules/d3-time/src/utcMonth.js","node_modules/d3-time/src/utcYear.js","node_modules/d3-time-format/src/locale.js","node_modules/d3-time-format/src/defaultLocale.js","node_modules/d3-time-format/src/isoFormat.js","node_modules/d3-time-format/src/isoParse.js","node_modules/d3-scale/src/time.js","node_modules/d3-scale-chromatic/src/colors.js","node_modules/d3-scale-chromatic/src/categorical/category10.js","node_modules/d3-scale-chromatic/src/categorical/Accent.js","node_modules/d3-scale-chromatic/src/categorical/Dark2.js","node_modules/d3-scale-chromatic/src/categorical/Paired.js","node_modules/d3-scale-chromatic/src/categorical/Pastel1.js","node_modules/d3-scale-chromatic/src/categorical/Pastel2.js","node_modules/d3-scale-chromatic/src/categorical/Set1.js","node_modules/d3-scale-chromatic/src/categorical/Set2.js","node_modules/d3-scale-chromatic/src/categorical/Set3.js","node_modules/d3-scale-chromatic/src/ramp.js","node_modules/d3-scale-chromatic/src/diverging/BrBG.js","node_modules/d3-scale-chromatic/src/diverging/PRGn.js","node_modules/d3-scale-chromatic/src/diverging/PiYG.js","node_modules/d3-scale-chromatic/src/diverging/PuOr.js","node_modules/d3-scale-chromatic/src/diverging/RdBu.js","node_modules/d3-scale-chromatic/src/diverging/RdGy.js","node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js","node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js","node_modules/d3-scale-chromatic/src/diverging/Spectral.js","node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js","node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js","node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js","node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js","node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js","node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js","node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js","node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js","node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js","node_modules/d3-scale-chromatic/src/sequential-single/Blues.js","node_modules/d3-scale-chromatic/src/sequential-single/Greens.js","node_modules/d3-scale-chromatic/src/sequential-single/Greys.js","node_modules/d3-scale-chromatic/src/sequential-single/Purples.js","node_modules/d3-scale-chromatic/src/sequential-single/Reds.js","node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js","node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js","node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js","node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js","node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js","node_modules/d3-shape/src/constant.js","node_modules/d3-shape/src/curve/linear.js","node_modules/d3-shape/src/point.js","node_modules/d3-shape/src/line.js","node_modules/d3-shape/src/area.js","node_modules/d3-shape/src/curve/monotone.js","node_modules/d3-shape/src/curve/natural.js","node_modules/d3-shape/src/curve/step.js","peerinst/static/peerinst/js/custom_elements.js","peerinst/static/peerinst/js/index.js"],"sourcesContent":["/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst registry = Object.create(null);\n\nconst CONSOLE_WARN = console.warn.bind(console);\n\nfunction _emit(evtType, evtData, shouldBubble = false) {\n  let evt;\n  if (typeof CustomEvent === 'function') {\n    evt = new CustomEvent(evtType, {\n      detail: evtData,\n      bubbles: shouldBubble,\n    });\n  } else {\n    evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n  }\n\n  document.dispatchEvent(evt);\n}\n\n/**\n * Auto-initializes all mdc components on a page.\n */\nexport default function mdcAutoInit(root = document, warn = CONSOLE_WARN) {\n  const components = [];\n  const nodes = root.querySelectorAll('[data-mdc-auto-init]');\n  for (let i = 0, node; (node = nodes[i]); i++) {\n    const ctorName = node.dataset.mdcAutoInit;\n    if (!ctorName) {\n      throw new Error('(mdc-auto-init) Constructor name must be given.');\n    }\n\n    const Ctor = registry[ctorName];\n    if (typeof Ctor !== 'function') {\n      throw new Error(\n        `(mdc-auto-init) Could not find constructor in registry for ${ctorName}`);\n    }\n\n    if (node[ctorName]) {\n      warn(`(mdc-auto-init) Component already initialized for ${node}. Skipping...`);\n      continue;\n    }\n\n    // TODO: Should we make an eslint rule for an attachTo() static method?\n    const component = Ctor.attachTo(node);\n    Object.defineProperty(node, ctorName, {\n      value: component,\n      writable: false,\n      enumerable: false,\n      configurable: true,\n    });\n    components.push(component);\n  }\n\n  _emit('MDCAutoInit:End', {});\n  return components;\n}\n\nmdcAutoInit.register = function(componentName, Ctor, warn = CONSOLE_WARN) {\n  if (typeof Ctor !== 'function') {\n    throw new Error(`(mdc-auto-init) Invalid Ctor value ${Ctor}. Expected function`);\n  }\n  if (registry[componentName]) {\n    warn(\n      `(mdc-auto-init) Overriding registration for ${componentName} with ${Ctor}. ` +\n      `Was: ${registry[componentName]}`);\n  }\n  registry[componentName] = Ctor;\n};\n\nmdcAutoInit.deregister = function(componentName) {\n  delete registry[componentName];\n};\n\nmdcAutoInit.deregisterAll = function() {\n  Object.keys(registry).forEach(this.deregister, this);\n};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @typedef {{\n *   noPrefix: string,\n *   webkitPrefix: string,\n *   styleProperty: string\n * }}\n */\nlet VendorPropertyMapType;\n\n/** @const {Object<string, !VendorPropertyMapType>} */\nconst eventTypeMap = {\n  'animationstart': {\n    noPrefix: 'animationstart',\n    webkitPrefix: 'webkitAnimationStart',\n    styleProperty: 'animation',\n  },\n  'animationend': {\n    noPrefix: 'animationend',\n    webkitPrefix: 'webkitAnimationEnd',\n    styleProperty: 'animation',\n  },\n  'animationiteration': {\n    noPrefix: 'animationiteration',\n    webkitPrefix: 'webkitAnimationIteration',\n    styleProperty: 'animation',\n  },\n  'transitionend': {\n    noPrefix: 'transitionend',\n    webkitPrefix: 'webkitTransitionEnd',\n    styleProperty: 'transition',\n  },\n};\n\n/** @const {Object<string, !VendorPropertyMapType>} */\nconst cssPropertyMap = {\n  'animation': {\n    noPrefix: 'animation',\n    webkitPrefix: '-webkit-animation',\n  },\n  'transform': {\n    noPrefix: 'transform',\n    webkitPrefix: '-webkit-transform',\n  },\n  'transition': {\n    noPrefix: 'transition',\n    webkitPrefix: '-webkit-transition',\n  },\n};\n\n/**\n * @param {!Object} windowObj\n * @return {boolean}\n */\nfunction hasProperShape(windowObj) {\n  return (windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function');\n}\n\n/**\n * @param {string} eventType\n * @return {boolean}\n */\nfunction eventFoundInMaps(eventType) {\n  return (eventType in eventTypeMap || eventType in cssPropertyMap);\n}\n\n/**\n * @param {string} eventType\n * @param {!Object<string, !VendorPropertyMapType>} map\n * @param {!Element} el\n * @return {string}\n */\nfunction getJavaScriptEventName(eventType, map, el) {\n  return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;\n}\n\n/**\n * Helper function to determine browser prefix for CSS3 animation events\n * and property names.\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getAnimationName(windowObj, eventType) {\n  if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {\n    return eventType;\n  }\n\n  const map = /** @type {!Object<string, !VendorPropertyMapType>} */ (\n    eventType in eventTypeMap ? eventTypeMap : cssPropertyMap\n  );\n  const el = windowObj['document']['createElement']('div');\n  let eventName = '';\n\n  if (map === eventTypeMap) {\n    eventName = getJavaScriptEventName(eventType, map, el);\n  } else {\n    eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;\n  }\n\n  return eventName;\n}\n\n// Public functions to access getAnimationName() for JavaScript events or CSS\n// property names.\n\nconst transformStyleProperties = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'MSTransform'];\n\n/**\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getCorrectEventName(windowObj, eventType) {\n  return getAnimationName(windowObj, eventType);\n}\n\n/**\n * @param {!Object} windowObj\n * @param {string} eventType\n * @return {string}\n */\nfunction getCorrectPropertyName(windowObj, eventType) {\n  return getAnimationName(windowObj, eventType);\n}\n\nexport {transformStyleProperties, getCorrectEventName, getCorrectPropertyName};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @template A\n */\nclass MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports every\n    // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n    return {};\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n    return {};\n  }\n\n  /** @return enum{numbers} */\n  static get numbers() {\n    // Classes extending MDCFoundation should implement this method to return an object which exports all\n    // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n    return {};\n  }\n\n  /** @return {!Object} */\n  static get defaultAdapter() {\n    // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n    // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n    // validation.\n    return {};\n  }\n\n  /**\n   * @param {A=} adapter\n   */\n  constructor(adapter = {}) {\n    /** @protected {!A} */\n    this.adapter_ = adapter;\n  }\n\n  init() {\n    // Subclasses should override this method to perform initialization routines (registering events, etc.)\n  }\n\n  destroy() {\n    // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n  }\n}\n\nexport default MDCFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from './foundation';\n\n/**\n * @template F\n */\nclass MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCComponent}\n   */\n  static attachTo(root) {\n    // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n    // returns an instantiated component with its root set to that element. Also note that in the cases of\n    // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n    // from getDefaultFoundation().\n    return new MDCComponent(root, new MDCFoundation());\n  }\n\n  /**\n   * @param {!Element} root\n   * @param {F=} foundation\n   * @param {...?} args\n   */\n  constructor(root, foundation = undefined, ...args) {\n    /** @protected {!Element} */\n    this.root_ = root;\n    this.initialize(...args);\n    // Note that we initialize foundation here and not within the constructor's default param so that\n    // this.root_ is defined and can be used within the foundation class.\n    /** @protected {!F} */\n    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;\n    this.foundation_.init();\n    this.initialSyncWithDOM();\n  }\n\n  initialize(/* ...args */) {\n    // Subclasses can override this to do any additional setup work that would be considered part of a\n    // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n    // initialized. Any additional arguments besides root and foundation will be passed in here.\n  }\n\n  /**\n   * @return {!F} foundation\n   */\n  getDefaultFoundation() {\n    // Subclasses must override this method to return a properly configured foundation class for the\n    // component.\n    throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' +\n      'foundation class');\n  }\n\n  initialSyncWithDOM() {\n    // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n    // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n    // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n    // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n  }\n\n  destroy() {\n    // Subclasses may implement this method to release any resources / deregister any listeners they have\n    // attached. An example of this might be deregistering a resize event from the window object.\n    this.foundation_.destroy();\n  }\n\n  /**\n   * Wrapper method to add an event listener to the component's root element. This is most useful when\n   * listening for custom events.\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  listen(evtType, handler) {\n    this.root_.addEventListener(evtType, handler);\n  }\n\n  /**\n   * Wrapper method to remove an event listener to the component's root element. This is most useful when\n   * unlistening for custom events.\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  unlisten(evtType, handler) {\n    this.root_.removeEventListener(evtType, handler);\n  }\n\n  /**\n   * Fires a cross-browser-compatible custom event from the component root of the given type,\n   * with the given data.\n   * @param {string} evtType\n   * @param {!Object} evtData\n   * @param {boolean=} shouldBubble\n   */\n  emit(evtType, evtData, shouldBubble = false) {\n    let evt;\n    if (typeof CustomEvent === 'function') {\n      evt = new CustomEvent(evtType, {\n        detail: evtData,\n        bubbles: shouldBubble,\n      });\n    } else {\n      evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n    }\n\n    this.root_.dispatchEvent(evt);\n  }\n}\n\nexport default MDCComponent;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Ripple. Provides an interface for managing\n * - classes\n * - dom\n * - CSS variables\n * - position\n * - dimensions\n * - scroll position\n * - event handlers\n * - unbounded, active and disabled states\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCRippleAdapter {\n  /** @return {boolean} */\n  browserSupportsCssVars() {}\n\n  /** @return {boolean} */\n  isUnbounded() {}\n\n  /** @return {boolean} */\n  isSurfaceActive() {}\n\n  /** @return {boolean} */\n  isSurfaceDisabled() {}\n\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /** @param {!EventTarget} target */\n  containsEventTarget(target) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  registerInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  deregisterInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  registerDocumentInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {string} evtType\n   * @param {!Function} handler\n   */\n  deregisterDocumentInteractionHandler(evtType, handler) {}\n\n  /**\n   * @param {!Function} handler\n   */\n  registerResizeHandler(handler) {}\n\n  /**\n   * @param {!Function} handler\n   */\n  deregisterResizeHandler(handler) {}\n\n  /**\n   * @param {string} varName\n   * @param {?number|string} value\n   */\n  updateCssVariable(varName, value) {}\n\n  /** @return {!ClientRect} */\n  computeBoundingRect() {}\n\n  /** @return {{x: number, y: number}} */\n  getWindowPageOffset() {}\n}\n\nexport default MDCRippleAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst cssClasses = {\n  // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n  // given that it's an 'upgrade' to an existing component. That being said it is the root\n  // CSS class that all other CSS classes derive from.\n  ROOT: 'mdc-ripple-upgraded',\n  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',\n  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',\n};\n\nconst strings = {\n  VAR_LEFT: '--mdc-ripple-left',\n  VAR_TOP: '--mdc-ripple-top',\n  VAR_FG_SIZE: '--mdc-ripple-fg-size',\n  VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',\n};\n\nconst numbers = {\n  PADDING: 10,\n  INITIAL_ORIGIN_SCALE: 0.6,\n  DEACTIVATION_TIMEOUT_MS: 225, // Corresponds to $mdc-ripple-translate-duration (i.e. activation animation duration)\n  FG_DEACTIVATION_MS: 150, // Corresponds to $mdc-ripple-fade-out-duration (i.e. deactivation animation duration)\n  TAP_DELAY_MS: 300, // Delay between touch and simulated mouse events on touch devices\n};\n\nexport {cssClasses, strings, numbers};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.\n * @private {boolean|undefined}\n */\nlet supportsCssVariables_;\n\n/**\n * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.\n * @private {boolean|undefined}\n */\nlet supportsPassive_;\n\n/**\n * @param {!Window} windowObj\n * @return {boolean}\n */\nfunction detectEdgePseudoVarBug(windowObj) {\n  // Detect versions of Edge with buggy var() support\n  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/\n  const document = windowObj.document;\n  const node = document.createElement('div');\n  node.className = 'mdc-ripple-surface--test-edge-var-bug';\n  document.body.appendChild(node);\n\n  // The bug exists if ::before style ends up propagating to the parent element.\n  // Additionally, getComputedStyle returns null in iframes with display: \"none\" in Firefox,\n  // but Firefox is known to support CSS custom properties correctly.\n  // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  const computedStyle = windowObj.getComputedStyle(node);\n  const hasPseudoVarBug = computedStyle !== null && computedStyle.borderTopStyle === 'solid';\n  node.remove();\n  return hasPseudoVarBug;\n}\n\n/**\n * @param {!Window} windowObj\n * @param {boolean=} forceRefresh\n * @return {boolean|undefined}\n */\n\nfunction supportsCssVariables(windowObj, forceRefresh = false) {\n  let supportsCssVariables = supportsCssVariables_;\n  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n    return supportsCssVariables;\n  }\n\n  const supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';\n  if (!supportsFunctionPresent) {\n    return;\n  }\n\n  const explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');\n  // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n  // See: README section on Safari\n  const weAreFeatureDetectingSafari10plus = (\n    windowObj.CSS.supports('(--css-vars: yes)') &&\n    windowObj.CSS.supports('color', '#00000000')\n  );\n\n  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {\n    supportsCssVariables = !detectEdgePseudoVarBug(windowObj);\n  } else {\n    supportsCssVariables = false;\n  }\n\n  if (!forceRefresh) {\n    supportsCssVariables_ = supportsCssVariables;\n  }\n  return supportsCssVariables;\n}\n\n//\n/**\n * Determine whether the current browser supports passive event listeners, and if so, use them.\n * @param {!Window=} globalObj\n * @param {boolean=} forceRefresh\n * @return {boolean|!EventListenerOptions}\n */\nfunction applyPassive(globalObj = window, forceRefresh = false) {\n  if (supportsPassive_ === undefined || forceRefresh) {\n    let isSupported = false;\n    try {\n      globalObj.document.addEventListener('test', null, {get passive() {\n        isSupported = true;\n        return isSupported;\n      }});\n    } catch (e) { }\n\n    supportsPassive_ = isSupported;\n  }\n\n  return supportsPassive_\n    ? /** @type {!EventListenerOptions} */ ({passive: true})\n    : false;\n}\n\n/**\n * @param {!Object} HTMLElementPrototype\n * @return {string}\n */\nfunction getMatchesProperty(HTMLElementPrototype) {\n  /**\n   * Order is important because we return the first existing method we find.\n   * Do not change the order of the items in the below array.\n   */\n  const matchesMethods = ['matches', 'webkitMatchesSelector', 'msMatchesSelector'];\n  let method = 'matches';\n  for (let i = 0; i < matchesMethods.length; i++) {\n    const matchesMethod = matchesMethods[i];\n    if (matchesMethod in HTMLElementPrototype) {\n      method = matchesMethod;\n      break;\n    }\n  }\n\n  return method;\n}\n\n/**\n * @param {!Event} ev\n * @param {{x: number, y: number}} pageOffset\n * @param {!ClientRect} clientRect\n * @return {{x: number, y: number}}\n */\nfunction getNormalizedEventCoords(ev, pageOffset, clientRect) {\n  const {x, y} = pageOffset;\n  const documentX = x + clientRect.left;\n  const documentY = y + clientRect.top;\n\n  let normalizedX;\n  let normalizedY;\n  // Determine touch point relative to the ripple container.\n  if (ev.type === 'touchstart') {\n    ev = /** @type {!TouchEvent} */ (ev);\n    normalizedX = ev.changedTouches[0].pageX - documentX;\n    normalizedY = ev.changedTouches[0].pageY - documentY;\n  } else {\n    ev = /** @type {!MouseEvent} */ (ev);\n    normalizedX = ev.pageX - documentX;\n    normalizedY = ev.pageY - documentY;\n  }\n\n  return {x: normalizedX, y: normalizedY};\n}\n\nexport {supportsCssVariables, applyPassive, getMatchesProperty, getNormalizedEventCoords};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCRippleAdapter from './adapter';\nimport {cssClasses, strings, numbers} from './constants';\nimport {getNormalizedEventCoords} from './util';\n\n/**\n * @typedef {{\n *   isActivated: (boolean|undefined),\n *   hasDeactivationUXRun: (boolean|undefined),\n *   wasActivatedByPointer: (boolean|undefined),\n *   wasElementMadeActive: (boolean|undefined),\n *   activationEvent: (!Event|undefined),\n *   isProgrammatic: (boolean|undefined)\n * }}\n */\nlet ActivationStateType;\n\n/**\n * @typedef {{\n *   activate: (string|undefined),\n *   deactivate: (string|undefined),\n *   focus: (string|undefined),\n *   blur: (string|undefined)\n * }}\n */\nlet ListenerInfoType;\n\n/**\n * @typedef {{\n *   activate: function(!Event),\n *   deactivate: function(!Event=),\n *   focus: function(),\n *   blur: function()\n * }}\n */\nlet ListenersType;\n\n/**\n * @typedef {{\n *   x: number,\n *   y: number\n * }}\n */\nlet PointType;\n\n// Activation events registered on the root element of each instance for activation\nconst ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];\n\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nconst POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];\n\n// Tracks activations that have occurred on the current frame, to avoid simultaneous nested activations\n/** @type {!Array<!EventTarget>} */\nlet activatedTargets = [];\n\n/**\n * @extends {MDCFoundation<!MDCRippleAdapter>}\n */\nclass MDCRippleFoundation extends MDCFoundation {\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get strings() {\n    return strings;\n  }\n\n  static get numbers() {\n    return numbers;\n  }\n\n  static get defaultAdapter() {\n    return {\n      browserSupportsCssVars: () => /* boolean - cached */ {},\n      isUnbounded: () => /* boolean */ {},\n      isSurfaceActive: () => /* boolean */ {},\n      isSurfaceDisabled: () => /* boolean */ {},\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      containsEventTarget: (/* target: !EventTarget */) => {},\n      registerInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      deregisterInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      registerDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      deregisterDocumentInteractionHandler: (/* evtType: string, handler: EventListener */) => {},\n      registerResizeHandler: (/* handler: EventListener */) => {},\n      deregisterResizeHandler: (/* handler: EventListener */) => {},\n      updateCssVariable: (/* varName: string, value: string */) => {},\n      computeBoundingRect: () => /* ClientRect */ {},\n      getWindowPageOffset: () => /* {x: number, y: number} */ {},\n    };\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCRippleFoundation.defaultAdapter, adapter));\n\n    /** @private {number} */\n    this.layoutFrame_ = 0;\n\n    /** @private {!ClientRect} */\n    this.frame_ = /** @type {!ClientRect} */ ({width: 0, height: 0});\n\n    /** @private {!ActivationStateType} */\n    this.activationState_ = this.defaultActivationState_();\n\n    /** @private {number} */\n    this.initialSize_ = 0;\n\n    /** @private {number} */\n    this.maxRadius_ = 0;\n\n    /** @private {function(!Event)} */\n    this.activateHandler_ = (e) => this.activate_(e);\n\n    /** @private {function(!Event=)} */\n    this.deactivateHandler_ = () => this.deactivate_();\n\n    /** @private {function(!Event=)} */\n    this.focusHandler_ = () => this.handleFocus();\n\n    /** @private {function(!Event=)} */\n    this.blurHandler_ = () => this.handleBlur();\n\n    /** @private {!Function} */\n    this.resizeHandler_ = () => this.layout();\n\n    /** @private {{left: number, top:number}} */\n    this.unboundedCoords_ = {\n      left: 0,\n      top: 0,\n    };\n\n    /** @private {number} */\n    this.fgScale_ = 0;\n\n    /** @private {number} */\n    this.activationTimer_ = 0;\n\n    /** @private {number} */\n    this.fgDeactivationRemovalTimer_ = 0;\n\n    /** @private {boolean} */\n    this.activationAnimationHasEnded_ = false;\n\n    /** @private {!Function} */\n    this.activationTimerCallback_ = () => {\n      this.activationAnimationHasEnded_ = true;\n      this.runDeactivationUXLogicIfReady_();\n    };\n\n    /** @private {!Event|undefined} */\n    this.previousActivationEvent_;\n  }\n\n  /**\n   * We compute this property so that we are not querying information about the client\n   * until the point in time where the foundation requests it. This prevents scenarios where\n   * client-side feature-detection may happen too early, such as when components are rendered on the server\n   * and then initialized at mount time on the client.\n   * @return {boolean}\n   * @private\n   */\n  supportsPressRipple_() {\n    return this.adapter_.browserSupportsCssVars();\n  }\n\n  /**\n   * @return {!ActivationStateType}\n   */\n  defaultActivationState_() {\n    return {\n      isActivated: false,\n      hasDeactivationUXRun: false,\n      wasActivatedByPointer: false,\n      wasElementMadeActive: false,\n      activationEvent: undefined,\n      isProgrammatic: false,\n    };\n  }\n\n  /** @override */\n  init() {\n    const supportsPressRipple = this.supportsPressRipple_();\n\n    this.registerRootHandlers_(supportsPressRipple);\n\n    if (supportsPressRipple) {\n      const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;\n      requestAnimationFrame(() => {\n        this.adapter_.addClass(ROOT);\n        if (this.adapter_.isUnbounded()) {\n          this.adapter_.addClass(UNBOUNDED);\n          // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n          this.layoutInternal_();\n        }\n      });\n    }\n  }\n\n  /** @override */\n  destroy() {\n    if (this.supportsPressRipple_()) {\n      if (this.activationTimer_) {\n        clearTimeout(this.activationTimer_);\n        this.activationTimer_ = 0;\n        this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n      }\n\n      if (this.fgDeactivationRemovalTimer_) {\n        clearTimeout(this.fgDeactivationRemovalTimer_);\n        this.fgDeactivationRemovalTimer_ = 0;\n        this.adapter_.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n      }\n\n      const {ROOT, UNBOUNDED} = MDCRippleFoundation.cssClasses;\n      requestAnimationFrame(() => {\n        this.adapter_.removeClass(ROOT);\n        this.adapter_.removeClass(UNBOUNDED);\n        this.removeCssVars_();\n      });\n    }\n\n    this.deregisterRootHandlers_();\n    this.deregisterDeactivationHandlers_();\n  }\n\n  /**\n   * @param {boolean} supportsPressRipple Passed from init to save a redundant function call\n   * @private\n   */\n  registerRootHandlers_(supportsPressRipple) {\n    if (supportsPressRipple) {\n      ACTIVATION_EVENT_TYPES.forEach((type) => {\n        this.adapter_.registerInteractionHandler(type, this.activateHandler_);\n      });\n      if (this.adapter_.isUnbounded()) {\n        this.adapter_.registerResizeHandler(this.resizeHandler_);\n      }\n    }\n\n    this.adapter_.registerInteractionHandler('focus', this.focusHandler_);\n    this.adapter_.registerInteractionHandler('blur', this.blurHandler_);\n  }\n\n  /**\n   * @param {!Event} e\n   * @private\n   */\n  registerDeactivationHandlers_(e) {\n    if (e.type === 'keydown') {\n      this.adapter_.registerInteractionHandler('keyup', this.deactivateHandler_);\n    } else {\n      POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {\n        this.adapter_.registerDocumentInteractionHandler(type, this.deactivateHandler_);\n      });\n    }\n  }\n\n  /** @private */\n  deregisterRootHandlers_() {\n    ACTIVATION_EVENT_TYPES.forEach((type) => {\n      this.adapter_.deregisterInteractionHandler(type, this.activateHandler_);\n    });\n    this.adapter_.deregisterInteractionHandler('focus', this.focusHandler_);\n    this.adapter_.deregisterInteractionHandler('blur', this.blurHandler_);\n\n    if (this.adapter_.isUnbounded()) {\n      this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n    }\n  }\n\n  /** @private */\n  deregisterDeactivationHandlers_() {\n    this.adapter_.deregisterInteractionHandler('keyup', this.deactivateHandler_);\n    POINTER_DEACTIVATION_EVENT_TYPES.forEach((type) => {\n      this.adapter_.deregisterDocumentInteractionHandler(type, this.deactivateHandler_);\n    });\n  }\n\n  /** @private */\n  removeCssVars_() {\n    const {strings} = MDCRippleFoundation;\n    Object.keys(strings).forEach((k) => {\n      if (k.indexOf('VAR_') === 0) {\n        this.adapter_.updateCssVariable(strings[k], null);\n      }\n    });\n  }\n\n  /**\n   * @param {!Event=} e\n   * @private\n   */\n  activate_(e) {\n    if (this.adapter_.isSurfaceDisabled()) {\n      return;\n    }\n\n    const activationState = this.activationState_;\n    if (activationState.isActivated) {\n      return;\n    }\n\n    // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n    const previousActivationEvent = this.previousActivationEvent_;\n    const isSameInteraction = previousActivationEvent && e !== undefined && previousActivationEvent.type !== e.type;\n    if (isSameInteraction) {\n      return;\n    }\n\n    activationState.isActivated = true;\n    activationState.isProgrammatic = e === undefined;\n    activationState.activationEvent = e;\n    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e !== undefined && (\n      e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown'\n    );\n\n    const hasActivatedChild = e !== undefined && activatedTargets.length > 0 && activatedTargets.some(\n      (target) => this.adapter_.containsEventTarget(target));\n    if (hasActivatedChild) {\n      // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n      this.resetActivationState_();\n      return;\n    }\n\n    if (e !== undefined) {\n      activatedTargets.push(/** @type {!EventTarget} */ (e.target));\n      this.registerDeactivationHandlers_(e);\n    }\n\n    activationState.wasElementMadeActive = this.checkElementMadeActive_(e);\n    if (activationState.wasElementMadeActive) {\n      this.animateActivation_();\n    }\n\n    requestAnimationFrame(() => {\n      // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n      activatedTargets = [];\n\n      if (!activationState.wasElementMadeActive && e !== undefined && (e.key === ' ' || e.keyCode === 32)) {\n        // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n        // active states inconsistently when they're called within event handling code:\n        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n        // variable is set within a rAF callback for a submit button interaction (#2241).\n        activationState.wasElementMadeActive = this.checkElementMadeActive_(e);\n        if (activationState.wasElementMadeActive) {\n          this.animateActivation_();\n        }\n      }\n\n      if (!activationState.wasElementMadeActive) {\n        // Reset activation state immediately if element was not made active.\n        this.activationState_ = this.defaultActivationState_();\n      }\n    });\n  }\n\n  /**\n   * @param {!Event=} e\n   * @private\n   */\n  checkElementMadeActive_(e) {\n    return (e !== undefined && e.type === 'keydown') ? this.adapter_.isSurfaceActive() : true;\n  }\n\n  /**\n   * @param {!Event=} event Optional event containing position information.\n   */\n  activate(event) {\n    this.activate_(event);\n  }\n\n  /** @private */\n  animateActivation_() {\n    const {VAR_FG_TRANSLATE_START, VAR_FG_TRANSLATE_END} = MDCRippleFoundation.strings;\n    const {FG_DEACTIVATION, FG_ACTIVATION} = MDCRippleFoundation.cssClasses;\n    const {DEACTIVATION_TIMEOUT_MS} = MDCRippleFoundation.numbers;\n\n    this.layoutInternal_();\n\n    let translateStart = '';\n    let translateEnd = '';\n\n    if (!this.adapter_.isUnbounded()) {\n      const {startPoint, endPoint} = this.getFgTranslationCoordinates_();\n      translateStart = `${startPoint.x}px, ${startPoint.y}px`;\n      translateEnd = `${endPoint.x}px, ${endPoint.y}px`;\n    }\n\n    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n    this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n    // Cancel any ongoing activation/deactivation animations\n    clearTimeout(this.activationTimer_);\n    clearTimeout(this.fgDeactivationRemovalTimer_);\n    this.rmBoundedActivationClasses_();\n    this.adapter_.removeClass(FG_DEACTIVATION);\n\n    // Force layout in order to re-trigger the animation.\n    this.adapter_.computeBoundingRect();\n    this.adapter_.addClass(FG_ACTIVATION);\n    this.activationTimer_ = setTimeout(() => this.activationTimerCallback_(), DEACTIVATION_TIMEOUT_MS);\n  }\n\n  /**\n   * @private\n   * @return {{startPoint: PointType, endPoint: PointType}}\n   */\n  getFgTranslationCoordinates_() {\n    const {activationEvent, wasActivatedByPointer} = this.activationState_;\n\n    let startPoint;\n    if (wasActivatedByPointer) {\n      startPoint = getNormalizedEventCoords(\n        /** @type {!Event} */ (activationEvent),\n        this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect()\n      );\n    } else {\n      startPoint = {\n        x: this.frame_.width / 2,\n        y: this.frame_.height / 2,\n      };\n    }\n    // Center the element around the start point.\n    startPoint = {\n      x: startPoint.x - (this.initialSize_ / 2),\n      y: startPoint.y - (this.initialSize_ / 2),\n    };\n\n    const endPoint = {\n      x: (this.frame_.width / 2) - (this.initialSize_ / 2),\n      y: (this.frame_.height / 2) - (this.initialSize_ / 2),\n    };\n\n    return {startPoint, endPoint};\n  }\n\n  /** @private */\n  runDeactivationUXLogicIfReady_() {\n    // This method is called both when a pointing device is released, and when the activation animation ends.\n    // The deactivation animation should only run after both of those occur.\n    const {FG_DEACTIVATION} = MDCRippleFoundation.cssClasses;\n    const {hasDeactivationUXRun, isActivated} = this.activationState_;\n    const activationHasEnded = hasDeactivationUXRun || !isActivated;\n\n    if (activationHasEnded && this.activationAnimationHasEnded_) {\n      this.rmBoundedActivationClasses_();\n      this.adapter_.addClass(FG_DEACTIVATION);\n      this.fgDeactivationRemovalTimer_ = setTimeout(() => {\n        this.adapter_.removeClass(FG_DEACTIVATION);\n      }, numbers.FG_DEACTIVATION_MS);\n    }\n  }\n\n  /** @private */\n  rmBoundedActivationClasses_() {\n    const {FG_ACTIVATION} = MDCRippleFoundation.cssClasses;\n    this.adapter_.removeClass(FG_ACTIVATION);\n    this.activationAnimationHasEnded_ = false;\n    this.adapter_.computeBoundingRect();\n  }\n\n  resetActivationState_() {\n    this.previousActivationEvent_ = this.activationState_.activationEvent;\n    this.activationState_ = this.defaultActivationState_();\n    // Touch devices may fire additional events for the same interaction within a short time.\n    // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n    setTimeout(() => this.previousActivationEvent_ = undefined, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n  }\n\n  /**\n   * @private\n   */\n  deactivate_() {\n    const activationState = this.activationState_;\n    // This can happen in scenarios such as when you have a keyup event that blurs the element.\n    if (!activationState.isActivated) {\n      return;\n    }\n\n    const state = /** @type {!ActivationStateType} */ (Object.assign({}, activationState));\n\n    if (activationState.isProgrammatic) {\n      requestAnimationFrame(() => this.animateDeactivation_(state));\n      this.resetActivationState_();\n    } else {\n      this.deregisterDeactivationHandlers_();\n      requestAnimationFrame(() => {\n        this.activationState_.hasDeactivationUXRun = true;\n        this.animateDeactivation_(state);\n        this.resetActivationState_();\n      });\n    }\n  }\n\n  deactivate() {\n    this.deactivate_();\n  }\n\n  /**\n   * @param {!ActivationStateType} options\n   * @private\n   */\n  animateDeactivation_({wasActivatedByPointer, wasElementMadeActive}) {\n    if (wasActivatedByPointer || wasElementMadeActive) {\n      this.runDeactivationUXLogicIfReady_();\n    }\n  }\n\n  layout() {\n    if (this.layoutFrame_) {\n      cancelAnimationFrame(this.layoutFrame_);\n    }\n    this.layoutFrame_ = requestAnimationFrame(() => {\n      this.layoutInternal_();\n      this.layoutFrame_ = 0;\n    });\n  }\n\n  /** @private */\n  layoutInternal_() {\n    this.frame_ = this.adapter_.computeBoundingRect();\n    const maxDim = Math.max(this.frame_.height, this.frame_.width);\n\n    // Surface diameter is treated differently for unbounded vs. bounded ripples.\n    // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n    // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n    // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n    // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n    // `overflow: hidden`.\n    const getBoundedRadius = () => {\n      const hypotenuse = Math.sqrt(Math.pow(this.frame_.width, 2) + Math.pow(this.frame_.height, 2));\n      return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n    };\n\n    this.maxRadius_ = this.adapter_.isUnbounded() ? maxDim : getBoundedRadius();\n\n    // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n    this.initialSize_ = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n    this.fgScale_ = this.maxRadius_ / this.initialSize_;\n\n    this.updateLayoutCssVars_();\n  }\n\n  /** @private */\n  updateLayoutCssVars_() {\n    const {\n      VAR_FG_SIZE, VAR_LEFT, VAR_TOP, VAR_FG_SCALE,\n    } = MDCRippleFoundation.strings;\n\n    this.adapter_.updateCssVariable(VAR_FG_SIZE, `${this.initialSize_}px`);\n    this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);\n\n    if (this.adapter_.isUnbounded()) {\n      this.unboundedCoords_ = {\n        left: Math.round((this.frame_.width / 2) - (this.initialSize_ / 2)),\n        top: Math.round((this.frame_.height / 2) - (this.initialSize_ / 2)),\n      };\n\n      this.adapter_.updateCssVariable(VAR_LEFT, `${this.unboundedCoords_.left}px`);\n      this.adapter_.updateCssVariable(VAR_TOP, `${this.unboundedCoords_.top}px`);\n    }\n  }\n\n  /** @param {boolean} unbounded */\n  setUnbounded(unbounded) {\n    const {UNBOUNDED} = MDCRippleFoundation.cssClasses;\n    if (unbounded) {\n      this.adapter_.addClass(UNBOUNDED);\n    } else {\n      this.adapter_.removeClass(UNBOUNDED);\n    }\n  }\n\n  handleFocus() {\n    requestAnimationFrame(() =>\n      this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED));\n  }\n\n  handleBlur() {\n    requestAnimationFrame(() =>\n      this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED));\n  }\n}\n\nexport default MDCRippleFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport MDCRippleAdapter from './adapter';\nimport MDCRippleFoundation from './foundation';\nimport * as util from './util';\n\n/**\n * @extends MDCComponent<!MDCRippleFoundation>\n */\nclass MDCRipple extends MDCComponent {\n  /** @param {...?} args */\n  constructor(...args) {\n    super(...args);\n\n    /** @type {boolean} */\n    this.disabled = false;\n\n    /** @private {boolean} */\n    this.unbounded_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @param {{isUnbounded: (boolean|undefined)}=} options\n   * @return {!MDCRipple}\n   */\n  static attachTo(root, {isUnbounded = undefined} = {}) {\n    const ripple = new MDCRipple(root);\n    // Only override unbounded behavior if option is explicitly specified\n    if (isUnbounded !== undefined) {\n      ripple.unbounded = /** @type {boolean} */ (isUnbounded);\n    }\n    return ripple;\n  }\n\n  /**\n   * @param {!RippleCapableSurface} instance\n   * @return {!MDCRippleAdapter}\n   */\n  static createAdapter(instance) {\n    const MATCHES = util.getMatchesProperty(HTMLElement.prototype);\n\n    return {\n      browserSupportsCssVars: () => util.supportsCssVariables(window),\n      isUnbounded: () => instance.unbounded,\n      isSurfaceActive: () => instance.root_[MATCHES](':active'),\n      isSurfaceDisabled: () => instance.disabled,\n      addClass: (className) => instance.root_.classList.add(className),\n      removeClass: (className) => instance.root_.classList.remove(className),\n      containsEventTarget: (target) => instance.root_.contains(target),\n      registerInteractionHandler: (evtType, handler) =>\n        instance.root_.addEventListener(evtType, handler, util.applyPassive()),\n      deregisterInteractionHandler: (evtType, handler) =>\n        instance.root_.removeEventListener(evtType, handler, util.applyPassive()),\n      registerDocumentInteractionHandler: (evtType, handler) =>\n        document.documentElement.addEventListener(evtType, handler, util.applyPassive()),\n      deregisterDocumentInteractionHandler: (evtType, handler) =>\n        document.documentElement.removeEventListener(evtType, handler, util.applyPassive()),\n      registerResizeHandler: (handler) => window.addEventListener('resize', handler),\n      deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),\n      updateCssVariable: (varName, value) => instance.root_.style.setProperty(varName, value),\n      computeBoundingRect: () => instance.root_.getBoundingClientRect(),\n      getWindowPageOffset: () => ({x: window.pageXOffset, y: window.pageYOffset}),\n    };\n  }\n\n  /** @return {boolean} */\n  get unbounded() {\n    return this.unbounded_;\n  }\n\n  /** @param {boolean} unbounded */\n  set unbounded(unbounded) {\n    this.unbounded_ = Boolean(unbounded);\n    this.setUnbounded_();\n  }\n\n  /**\n   * Closure Compiler throws an access control error when directly accessing a\n   * protected or private property inside a getter/setter, like unbounded above.\n   * By accessing the protected property inside a method, we solve that problem.\n   * That's why this function exists.\n   * @private\n   */\n  setUnbounded_() {\n    this.foundation_.setUnbounded(this.unbounded_);\n  }\n\n  activate() {\n    this.foundation_.activate();\n  }\n\n  deactivate() {\n    this.foundation_.deactivate();\n  }\n\n  layout() {\n    this.foundation_.layout();\n  }\n\n  /**\n   * @return {!MDCRippleFoundation}\n   * @override\n   */\n  getDefaultFoundation() {\n    return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n  }\n\n  /** @override */\n  initialSyncWithDOM() {\n    this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;\n  }\n}\n\n/**\n * See Material Design spec for more details on when to use ripples.\n * https://material.io/guidelines/motion/choreography.html#choreography-creation\n * @record\n */\nclass RippleCapableSurface {}\n\n/** @protected {!Element} */\nRippleCapableSurface.prototype.root_;\n\n/**\n * Whether or not the ripple bleeds out of the bounds of the element.\n * @type {boolean|undefined}\n */\nRippleCapableSurface.prototype.unbounded;\n\n/**\n * Whether or not the ripple is attached to a disabled component.\n * @type {boolean|undefined}\n */\nRippleCapableSurface.prototype.disabled;\n\nexport {MDCRipple, MDCRippleFoundation, RippleCapableSurface, util};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint-disable no-unused-vars */\nimport {MDCRipple} from '@material/ripple/index';\n/* eslint-enable no-unused-vars */\n\n/**\n * @typedef {{\n *   checked: boolean,\n *   indeterminate: boolean,\n *   disabled: boolean,\n *   value: ?string\n * }}\n */\nlet MDCSelectionControlState;\n\n/**\n * @record\n */\nclass MDCSelectionControl {\n  /** @return {?MDCRipple} */\n  get ripple() {}\n}\n\nexport {MDCSelectionControlState, MDCSelectionControl};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint-disable no-unused-vars */\nimport {MDCSelectionControlState} from '@material/selection-control/index';\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Checkbox. Provides an interface for managing\n * - classes\n * - dom\n * - event handlers\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCCheckboxAdapter {\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /**\n   * Sets an attribute with a given value on the input element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setNativeControlAttr(attr, value) {}\n\n  /**\n   * Removes an attribute from the input element.\n   * @param {string} attr\n   */\n  removeNativeControlAttr(attr) {}\n\n  forceLayout() {}\n\n  /** @return {boolean} */\n  isAttachedToDOM() {}\n\n  /** @return {boolean} */\n  isIndeterminate() {}\n\n  /** @return {boolean} */\n  isChecked() {}\n\n  /** @return {boolean} */\n  hasNativeControl() {}\n\n  /** @param {boolean} disabled */\n  setNativeControlDisabled(disabled) {}\n}\n\nexport default MDCCheckboxAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @const {string} */\nconst ROOT = 'mdc-checkbox';\n\n/** @enum {string} */\nconst cssClasses = {\n  UPGRADED: 'mdc-checkbox--upgraded',\n  CHECKED: 'mdc-checkbox--checked',\n  INDETERMINATE: 'mdc-checkbox--indeterminate',\n  DISABLED: 'mdc-checkbox--disabled',\n  ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',\n  ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',\n  ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',\n  ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',\n  ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',\n  ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked',\n};\n\n/** @enum {string} */\nconst strings = {\n  NATIVE_CONTROL_SELECTOR: `.${ROOT}__native-control`,\n  TRANSITION_STATE_INIT: 'init',\n  TRANSITION_STATE_CHECKED: 'checked',\n  TRANSITION_STATE_UNCHECKED: 'unchecked',\n  TRANSITION_STATE_INDETERMINATE: 'indeterminate',\n  ARIA_CHECKED_ATTR: 'aria-checked',\n  ARIA_CHECKED_INDETERMINATE_VALUE: 'mixed',\n};\n\n/** @enum {number} */\nconst numbers = {\n  ANIM_END_LATCH_MS: 250,\n};\n\nexport {cssClasses, strings, numbers};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\n/* eslint-disable no-unused-vars */\nimport {MDCSelectionControlState} from '@material/selection-control/index';\nimport MDCCheckboxAdapter from './adapter';\n/* eslint-enable no-unused-vars */\nimport {cssClasses, strings, numbers} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCCheckboxAdapter>}\n */\nclass MDCCheckboxFoundation extends MDCFoundation {\n  /** @return enum {cssClasses} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {strings} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {numbers} */\n  static get numbers() {\n    return numbers;\n  }\n\n  /** @return {!MDCCheckboxAdapter} */\n  static get defaultAdapter() {\n    return /** @type {!MDCCheckboxAdapter} */ ({\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      setNativeControlAttr: (/* attr: string, value: string */) => {},\n      removeNativeControlAttr: (/* attr: string */) => {},\n      forceLayout: () => {},\n      isAttachedToDOM: () => /* boolean */ {},\n      isIndeterminate: () => /* boolean */ {},\n      isChecked: () => /* boolean */ {},\n      hasNativeControl: () => /* boolean */ {},\n      setNativeControlDisabled: (/* disabled: boolean */) => {},\n    });\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCCheckboxFoundation.defaultAdapter, adapter));\n\n    /** @private {string} */\n    this.currentCheckState_ = strings.TRANSITION_STATE_INIT;\n\n    /** @private {string} */\n    this.currentAnimationClass_ = '';\n\n    /** @private {number} */\n    this.animEndLatchTimer_ = 0;\n\n    /** @private {boolean} */\n    this.enableAnimationEndHandler_ = false;\n  }\n\n  /** @override */\n  init() {\n    this.currentCheckState_ = this.determineCheckState_();\n    this.updateAriaChecked_();\n    this.adapter_.addClass(cssClasses.UPGRADED);\n  }\n\n  /** @override */\n  destroy() {\n    clearTimeout(this.animEndLatchTimer_);\n  }\n\n  /** @param {boolean} disabled */\n  setDisabled(disabled) {\n    this.adapter_.setNativeControlDisabled(disabled);\n    if (disabled) {\n      this.adapter_.addClass(cssClasses.DISABLED);\n    } else {\n      this.adapter_.removeClass(cssClasses.DISABLED);\n    }\n  }\n\n  /**\n   * Handles the animationend event for the checkbox\n   */\n  handleAnimationEnd() {\n    if (!this.enableAnimationEndHandler_) return;\n\n    clearTimeout(this.animEndLatchTimer_);\n\n    this.animEndLatchTimer_ = setTimeout(() => {\n      this.adapter_.removeClass(this.currentAnimationClass_);\n      this.enableAnimationEndHandler_ = false;\n    }, numbers.ANIM_END_LATCH_MS);\n  }\n\n  /**\n   * Handles the change event for the checkbox\n   */\n  handleChange() {\n    this.transitionCheckState_();\n  }\n\n  /** @private */\n  transitionCheckState_() {\n    if (!this.adapter_.hasNativeControl()) {\n      return;\n    }\n    const oldState = this.currentCheckState_;\n    const newState = this.determineCheckState_();\n\n    if (oldState === newState) {\n      return;\n    }\n\n    this.updateAriaChecked_();\n\n    // Check to ensure that there isn't a previously existing animation class, in case for example\n    // the user interacted with the checkbox before the animation was finished.\n    if (this.currentAnimationClass_.length > 0) {\n      clearTimeout(this.animEndLatchTimer_);\n      this.adapter_.forceLayout();\n      this.adapter_.removeClass(this.currentAnimationClass_);\n    }\n\n    this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);\n    this.currentCheckState_ = newState;\n\n    // Check for parentNode so that animations are only run when the element is attached\n    // to the DOM.\n    if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {\n      this.adapter_.addClass(this.currentAnimationClass_);\n      this.enableAnimationEndHandler_ = true;\n    }\n  }\n\n  /**\n   * @return {string}\n   * @private\n   */\n  determineCheckState_() {\n    const {\n      TRANSITION_STATE_INDETERMINATE,\n      TRANSITION_STATE_CHECKED,\n      TRANSITION_STATE_UNCHECKED,\n    } = strings;\n\n    if (this.adapter_.isIndeterminate()) {\n      return TRANSITION_STATE_INDETERMINATE;\n    }\n    return this.adapter_.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;\n  }\n\n  /**\n   * @param {string} oldState\n   * @param {string} newState\n   * @return {string}\n   */\n  getTransitionAnimationClass_(oldState, newState) {\n    const {\n      TRANSITION_STATE_INIT,\n      TRANSITION_STATE_CHECKED,\n      TRANSITION_STATE_UNCHECKED,\n    } = strings;\n\n    const {\n      ANIM_UNCHECKED_CHECKED,\n      ANIM_UNCHECKED_INDETERMINATE,\n      ANIM_CHECKED_UNCHECKED,\n      ANIM_CHECKED_INDETERMINATE,\n      ANIM_INDETERMINATE_CHECKED,\n      ANIM_INDETERMINATE_UNCHECKED,\n    } = MDCCheckboxFoundation.cssClasses;\n\n    switch (oldState) {\n    case TRANSITION_STATE_INIT:\n      if (newState === TRANSITION_STATE_UNCHECKED) {\n        return '';\n      }\n    // fallthrough\n    case TRANSITION_STATE_UNCHECKED:\n      return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;\n    case TRANSITION_STATE_CHECKED:\n      return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;\n    // TRANSITION_STATE_INDETERMINATE\n    default:\n      return newState === TRANSITION_STATE_CHECKED ?\n        ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;\n    }\n  }\n\n  updateAriaChecked_() {\n    // Ensure aria-checked is set to mixed if checkbox is in indeterminate state.\n    if (this.adapter_.isIndeterminate()) {\n      this.adapter_.setNativeControlAttr(\n        strings.ARIA_CHECKED_ATTR, strings.ARIA_CHECKED_INDETERMINATE_VALUE);\n    } else {\n      // The on/off state does not need to keep track of aria-checked, since\n      // the screenreader uses the checked property on the checkbox element.\n      this.adapter_.removeNativeControlAttr(strings.ARIA_CHECKED_ATTR);\n    }\n  }\n}\n\nexport default MDCCheckboxFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport {getCorrectEventName} from '@material/animation/index';\nimport MDCComponent from '@material/base/component';\n/* eslint-disable no-unused-vars */\nimport {MDCSelectionControlState, MDCSelectionControl} from '@material/selection-control/index';\n/* eslint-enable no-unused-vars */\nimport MDCCheckboxFoundation from './foundation';\nimport {MDCRipple, MDCRippleFoundation} from '@material/ripple/index';\nimport {getMatchesProperty} from '@material/ripple/util';\n\n/** @const {!Array<string>} */\nconst CB_PROTO_PROPS = ['checked', 'indeterminate'];\n\n/**\n * @extends MDCComponent<!MDCCheckboxFoundation>\n * @implements {MDCSelectionControl}\n */\nclass MDCCheckbox extends MDCComponent {\n  static attachTo(root) {\n    return new MDCCheckbox(root);\n  }\n\n  /**\n   * Returns the state of the native control element, or null if the native control element is not present.\n   * @return {!MDCSelectionControlState}\n   * @private\n   */\n  get nativeCb_() {\n    const {NATIVE_CONTROL_SELECTOR} = MDCCheckboxFoundation.strings;\n    const cbEl = /** @type {!MDCSelectionControlState} */ (\n      this.root_.querySelector(NATIVE_CONTROL_SELECTOR));\n    return cbEl;\n  }\n\n  constructor(...args) {\n    super(...args);\n\n    /** @private {!MDCRipple} */\n    this.ripple_ = this.initRipple_();\n    /** @private {!Function} */\n    this.handleChange_;\n    /** @private {!Function} */\n    this.handleAnimationEnd_;\n  }\n\n  initialSyncWithDOM() {\n    this.handleChange_ = () => this.foundation_.handleChange();\n    this.handleAnimationEnd_= () => this.foundation_.handleAnimationEnd();\n    this.nativeCb_.addEventListener('change', this.handleChange_);\n    this.listen(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n    this.installPropertyChangeHooks_();\n  }\n\n  /**\n   * @return {!MDCRipple}\n   * @private\n   */\n  initRipple_() {\n    const MATCHES = getMatchesProperty(HTMLElement.prototype);\n    const adapter = Object.assign(MDCRipple.createAdapter(this), {\n      isUnbounded: () => true,\n      isSurfaceActive: () => this.nativeCb_[MATCHES](':active'),\n      registerInteractionHandler: (type, handler) => this.nativeCb_.addEventListener(type, handler),\n      deregisterInteractionHandler: (type, handler) => this.nativeCb_.removeEventListener(type, handler),\n    });\n    const foundation = new MDCRippleFoundation(adapter);\n    return new MDCRipple(this.root_, foundation);\n  }\n\n  /** @private */\n  installPropertyChangeHooks_() {\n    const nativeCb = this.nativeCb_;\n    const cbProto = Object.getPrototypeOf(nativeCb);\n\n    CB_PROTO_PROPS.forEach((controlState) => {\n      const desc = Object.getOwnPropertyDescriptor(cbProto, controlState);\n      // We have to check for this descriptor, since some browsers (Safari) don't support its return.\n      // See: https://bugs.webkit.org/show_bug.cgi?id=49739\n      if (validDescriptor(desc)) {\n        const nativeCbDesc = /** @type {!ObjectPropertyDescriptor} */ ({\n          get: desc.get,\n          set: (state) => {\n            desc.set.call(nativeCb, state);\n            this.foundation_.handleChange();\n          },\n          configurable: desc.configurable,\n          enumerable: desc.enumerable,\n        });\n        Object.defineProperty(nativeCb, controlState, nativeCbDesc);\n      }\n    });\n  }\n\n  /** @private */\n  uninstallPropertyChangeHooks_() {\n    const nativeCb = this.nativeCb_;\n    const cbProto = Object.getPrototypeOf(nativeCb);\n\n    CB_PROTO_PROPS.forEach((controlState) => {\n      const desc = /** @type {!ObjectPropertyDescriptor} */ (\n        Object.getOwnPropertyDescriptor(cbProto, controlState));\n      if (validDescriptor(desc)) {\n        Object.defineProperty(nativeCb, controlState, desc);\n      }\n    });\n  }\n\n  /** @return {!MDCCheckboxFoundation} */\n  getDefaultFoundation() {\n    return new MDCCheckboxFoundation({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      setNativeControlAttr: (attr, value) => this.nativeCb_.setAttribute(attr, value),\n      removeNativeControlAttr: (attr) => this.nativeCb_.removeAttribute(attr),\n      isIndeterminate: () => this.indeterminate,\n      isChecked: () => this.checked,\n      hasNativeControl: () => !!this.nativeCb_,\n      setNativeControlDisabled: (disabled) => this.nativeCb_.disabled = disabled,\n      forceLayout: () => this.root_.offsetWidth,\n      isAttachedToDOM: () => Boolean(this.root_.parentNode),\n    });\n  }\n\n  /** @return {!MDCRipple} */\n  get ripple() {\n    return this.ripple_;\n  }\n\n  /** @return {boolean} */\n  get checked() {\n    return this.nativeCb_.checked;\n  }\n\n  /** @param {boolean} checked */\n  set checked(checked) {\n    this.nativeCb_.checked = checked;\n  }\n\n  /** @return {boolean} */\n  get indeterminate() {\n    return this.nativeCb_.indeterminate;\n  }\n\n  /** @param {boolean} indeterminate */\n  set indeterminate(indeterminate) {\n    this.nativeCb_.indeterminate = indeterminate;\n  }\n\n  /** @return {boolean} */\n  get disabled() {\n    return this.nativeCb_.disabled;\n  }\n\n  /** @param {boolean} disabled */\n  set disabled(disabled) {\n    this.foundation_.setDisabled(disabled);\n  }\n\n  /** @return {?string} */\n  get value() {\n    return this.nativeCb_.value;\n  }\n\n  /** @param {?string} value */\n  set value(value) {\n    this.nativeCb_.value = value;\n  }\n\n  destroy() {\n    this.ripple_.destroy();\n    this.nativeCb_.removeEventListener('change', this.handleChange_);\n    this.unlisten(getCorrectEventName(window, 'animationend'), this.handleAnimationEnd_);\n    this.uninstallPropertyChangeHooks_();\n    super.destroy();\n  }\n}\n\n/**\n * @param {ObjectPropertyDescriptor|undefined} inputPropDesc\n * @return {boolean}\n */\nfunction validDescriptor(inputPropDesc) {\n  return !!inputPropDesc && typeof inputPropDesc.set === 'function';\n}\n\nexport {MDCCheckboxFoundation, MDCCheckbox};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Chip.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Chip into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCChipAdapter {\n  /**\n   * Adds a class to the root element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Adds a class to the leading icon element.\n   * @param {string} className\n   */\n  addClassToLeadingIcon(className) {}\n\n  /**\n   * Removes a class from the leading icon element.\n   * @param {string} className\n   */\n  removeClassFromLeadingIcon(className) {}\n\n  /**\n   * Returns true if target has className, false otherwise.\n   * @param {!EventTarget} target\n   * @param {string} className\n   * @return {boolean}\n   */\n  eventTargetHasClass(target, className) {}\n\n  /**\n   * Emits a custom \"MDCChip:interaction\" event denoting the chip has been\n   * interacted with (typically on click or keydown).\n   */\n  notifyInteraction() {}\n\n  /**\n   * Emits a custom \"MDCChip:selection\" event denoting the chip has been selected or deselected.\n   * @param {boolean} selected\n   */\n  notifySelection(selected) {}\n\n  /**\n   * Emits a custom \"MDCChip:trailingIconInteraction\" event denoting the trailing icon has been\n   * interacted with (typically on click or keydown).\n   */\n  notifyTrailingIconInteraction() {}\n\n  /**\n   * Emits a custom event \"MDCChip:removal\" denoting the chip will be removed.\n   */\n  notifyRemoval() {}\n\n  /**\n   * Returns the computed property value of the given style property on the root element.\n   * @param {string} propertyName\n   * @return {string}\n   */\n  getComputedStyleValue(propertyName) {}\n\n  /**\n   * Sets the property value of the given style property on the root element.\n   * @param {string} propertyName\n   * @param {string} value\n   */\n  setStyleProperty(propertyName, value) {}\n\n  /**\n   * Returns whether the chip has a leading icon.\n   * @return {boolean}\n   */\n  hasLeadingIcon() {}\n\n  /**\n   * Returns the bounding client rect of the root element.\n   * @return {!ClientRect}\n   */\n  getRootBoundingClientRect() {}\n\n  /**\n   * Returns the bounding client rect of the checkmark element or null if it doesn't exist.\n   * @return {?ClientRect}\n   */\n  getCheckmarkBoundingClientRect() {}\n}\n\nexport default MDCChipAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  ENTRY_ANIMATION_NAME: 'mdc-chip-entry',\n  INTERACTION_EVENT: 'MDCChip:interaction',\n  SELECTION_EVENT: 'MDCChip:selection',\n  TRAILING_ICON_INTERACTION_EVENT: 'MDCChip:trailingIconInteraction',\n  REMOVAL_EVENT: 'MDCChip:removal',\n  CHECKMARK_SELECTOR: '.mdc-chip__checkmark',\n  LEADING_ICON_SELECTOR: '.mdc-chip__icon--leading',\n  TRAILING_ICON_SELECTOR: '.mdc-chip__icon--trailing',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  CHECKMARK: 'mdc-chip__checkmark',\n  CHIP_EXIT: 'mdc-chip--exit',\n  HIDDEN_LEADING_ICON: 'mdc-chip__icon--leading-hidden',\n  LEADING_ICON: 'mdc-chip__icon--leading',\n  TRAILING_ICON: 'mdc-chip__icon--trailing',\n  SELECTED: 'mdc-chip--selected',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCChipAdapter from './adapter';\nimport {strings, cssClasses} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCChipAdapter>}\n * @final\n */\nclass MDCChipFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCChipAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCChipAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCChipAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      addClassToLeadingIcon: () => {},\n      removeClassFromLeadingIcon: () => {},\n      eventTargetHasClass: () => {},\n      notifyInteraction: () => {},\n      notifySelection: () => {},\n      notifyTrailingIconInteraction: () => {},\n      notifyRemoval: () => {},\n      getComputedStyleValue: () => {},\n      setStyleProperty: () => {},\n      hasLeadingIcon: () => {},\n      getRootBoundingClientRect: () => {},\n      getCheckmarkBoundingClientRect: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCChipAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCChipFoundation.defaultAdapter, adapter));\n\n    /**\n     * Whether a trailing icon click should immediately trigger exit/removal of the chip.\n     * @private {boolean}\n     * */\n    this.shouldRemoveOnTrailingIconClick_ = true;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isSelected() {\n    return this.adapter_.hasClass(cssClasses.SELECTED);\n  }\n\n  /**\n   * @param {boolean} selected\n   */\n  setSelected(selected) {\n    if (selected) {\n      this.adapter_.addClass(cssClasses.SELECTED);\n    } else {\n      this.adapter_.removeClass(cssClasses.SELECTED);\n    }\n    this.adapter_.notifySelection(selected);\n  }\n\n  /**\n   * @return {boolean}\n   */\n  getShouldRemoveOnTrailingIconClick() {\n    return this.shouldRemoveOnTrailingIconClick_;\n  }\n\n  /**\n   * @param {boolean} shouldRemove\n   */\n  setShouldRemoveOnTrailingIconClick(shouldRemove) {\n    this.shouldRemoveOnTrailingIconClick_ = shouldRemove;\n  }\n\n  /** @return {!ClientRect} */\n  getDimensions() {\n    // When a chip has a checkmark and not a leading icon, the bounding rect changes in size depending on the current\n    // size of the checkmark.\n    if (!this.adapter_.hasLeadingIcon() && this.adapter_.getCheckmarkBoundingClientRect() !== null) {\n      const height = this.adapter_.getRootBoundingClientRect().height;\n      // The checkmark's width is initially set to 0, so use the checkmark's height as a proxy since the checkmark\n      // should always be square.\n      const width =\n          this.adapter_.getRootBoundingClientRect().width + this.adapter_.getCheckmarkBoundingClientRect().height;\n      return /** @type {!ClientRect} */ ({height, width});\n    } else {\n      return this.adapter_.getRootBoundingClientRect();\n    }\n  }\n\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n  beginExit() {\n    this.adapter_.addClass(cssClasses.CHIP_EXIT);\n  }\n\n  /**\n   * Handles an interaction event on the root element.\n   * @param {!Event} evt\n   */\n  handleInteraction(evt) {\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyInteraction();\n    }\n  }\n\n  /**\n   * Handles a transition end event on the root element.\n   * @param {!Event} evt\n   */\n  handleTransitionEnd(evt) {\n    // Handle transition end event on the chip when it is about to be removed.\n    if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.CHIP_EXIT)) {\n      if (evt.propertyName === 'width') {\n        this.adapter_.notifyRemoval();\n      } else if (evt.propertyName === 'opacity') {\n        // See: https://css-tricks.com/using-css-transitions-auto-dimensions/#article-header-id-5\n        const chipWidth = this.adapter_.getComputedStyleValue('width');\n\n        // On the next frame (once we get the computed width), explicitly set the chip's width\n        // to its current pixel width, so we aren't transitioning out of 'auto'.\n        requestAnimationFrame(() => {\n          this.adapter_.setStyleProperty('width', chipWidth);\n\n          // To mitigate jitter, start transitioning padding and margin before width.\n          this.adapter_.setStyleProperty('padding', '0');\n          this.adapter_.setStyleProperty('margin', '0');\n\n          // On the next frame (once width is explicitly set), transition width to 0.\n          requestAnimationFrame(() => {\n            this.adapter_.setStyleProperty('width', '0');\n          });\n        });\n      }\n      return;\n    }\n\n    // Handle a transition end event on the leading icon or checkmark, since the transition end event bubbles.\n    if (evt.propertyName !== 'opacity') {\n      return;\n    }\n    if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.LEADING_ICON) &&\n        this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.addClassToLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    } else if (this.adapter_.eventTargetHasClass(/** @type {!EventTarget} */ (evt.target), cssClasses.CHECKMARK) &&\n               !this.adapter_.hasClass(cssClasses.SELECTED)) {\n      this.adapter_.removeClassFromLeadingIcon(cssClasses.HIDDEN_LEADING_ICON);\n    }\n  }\n\n  /**\n   * Handles an interaction event on the trailing icon element. This is used to\n   * prevent the ripple from activating on interaction with the trailing icon.\n   * @param {!Event} evt\n   */\n  handleTrailingIconInteraction(evt) {\n    evt.stopPropagation();\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyTrailingIconInteraction();\n      if (this.shouldRemoveOnTrailingIconClick_) {\n        this.beginExit();\n      }\n    }\n  }\n}\n\n/**\n * @typedef {{\n *   detail: {\n *     chipId: string,\n *   },\n *   bubbles: boolean,\n * }}\n */\nlet MDCChipInteractionEventType;\n\n/**\n * @typedef {{\n *   detail: {\n *     chipId: string,\n *     selected: boolean,\n *   },\n *   bubbles: boolean,\n * }}\n */\nlet MDCChipSelectionEventType;\n\n/**\n * @typedef {{\n *   detail: {\n *     chipId: string,\n *     root: Element,\n *   },\n *   bubbles: boolean,\n * }}\n */\nlet MDCChipRemovalEventType;\n\nexport {MDCChipFoundation, MDCChipInteractionEventType, MDCChipSelectionEventType, MDCChipRemovalEventType};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport {MDCRipple, MDCRippleFoundation} from '@material/ripple/index';\n\nimport MDCChipAdapter from './adapter';\nimport {MDCChipFoundation} from './foundation';\nimport {strings} from './constants';\n\nconst INTERACTION_EVENTS = ['click', 'keydown'];\n\n/**\n * @extends {MDCComponent<!MDCChipFoundation>}\n * @final\n */\nclass MDCChip extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n\n    /** @type {string} */\n    this.id;\n    /** @private {?Element} */\n    this.leadingIcon_;\n    /** @private {?Element} */\n    this.trailingIcon_;\n    /** @private {?Element} */\n    this.checkmark_;\n    /** @private {!MDCRipple} */\n    this.ripple_;\n\n    /** @private {?function(?Event): undefined} */\n    this.handleInteraction_;\n    /** @private {?function(!Event): undefined} */\n    this.handleTransitionEnd_;\n    /** @private {function(!Event): undefined} */\n    this.handleTrailingIconInteraction_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCChip}\n   */\n  static attachTo(root) {\n    return new MDCChip(root);\n  }\n\n  initialize(\n    rippleFactory = (el, foundation) => new MDCRipple(el, foundation)) {\n    this.id = this.root_.id;\n    this.leadingIcon_ = this.root_.querySelector(strings.LEADING_ICON_SELECTOR);\n    this.trailingIcon_ = this.root_.querySelector(strings.TRAILING_ICON_SELECTOR);\n    this.checkmark_ = this.root_.querySelector(strings.CHECKMARK_SELECTOR);\n\n    const adapter = Object.assign(MDCRipple.createAdapter(this), {\n      computeBoundingRect: () => this.foundation_.getDimensions(),\n    });\n    this.ripple_ = rippleFactory(this.root_, new MDCRippleFoundation(adapter));\n  }\n\n  initialSyncWithDOM() {\n    this.handleInteraction_ = (evt) => this.foundation_.handleInteraction(evt);\n    this.handleTransitionEnd_ = (evt) => this.foundation_.handleTransitionEnd(evt);\n    this.handleTrailingIconInteraction_ = (evt) => this.foundation_.handleTrailingIconInteraction(evt);\n\n    INTERACTION_EVENTS.forEach((evtType) => {\n      this.root_.addEventListener(evtType, this.handleInteraction_);\n    });\n    this.root_.addEventListener('transitionend', this.handleTransitionEnd_);\n\n    if (this.trailingIcon_) {\n      INTERACTION_EVENTS.forEach((evtType) => {\n        this.trailingIcon_.addEventListener(evtType, this.handleTrailingIconInteraction_);\n      });\n    }\n  }\n\n  destroy() {\n    this.ripple_.destroy();\n\n    INTERACTION_EVENTS.forEach((evtType) => {\n      this.root_.removeEventListener(evtType, this.handleInteraction_);\n    });\n    this.root_.removeEventListener('transitionend', this.handleTransitionEnd_);\n\n    if (this.trailingIcon_) {\n      INTERACTION_EVENTS.forEach((evtType) => {\n        this.trailingIcon_.removeEventListener(evtType, this.handleTrailingIconInteraction_);\n      });\n    }\n\n    super.destroy();\n  }\n\n  /**\n   * Returns whether the chip is selected.\n   * @return {boolean}\n   */\n  get selected() {\n    return this.foundation_.isSelected();\n  }\n\n  /**\n   * Sets selected state on the chip.\n   * @param {boolean} selected\n   */\n  set selected(selected) {\n    this.foundation_.setSelected(selected);\n  }\n\n  /**\n   * Returns whether a trailing icon click should trigger exit/removal of the chip.\n   * @return {boolean}\n   */\n  get shouldRemoveOnTrailingIconClick() {\n    return this.foundation_.getShouldRemoveOnTrailingIconClick();\n  }\n\n  /**\n   * Sets whether a trailing icon click should trigger exit/removal of the chip.\n   * @param {boolean} shouldRemove\n   */\n  set shouldRemoveOnTrailingIconClick(shouldRemove) {\n    this.foundation_.setShouldRemoveOnTrailingIconClick(shouldRemove);\n  }\n\n  /**\n   * Begins the exit animation which leads to removal of the chip.\n   */\n  beginExit() {\n    this.foundation_.beginExit();\n  }\n\n  /**\n   * @return {!MDCChipFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCChipFoundation(/** @type {!MDCChipAdapter} */ (Object.assign({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      addClassToLeadingIcon: (className) => {\n        if (this.leadingIcon_) {\n          this.leadingIcon_.classList.add(className);\n        }\n      },\n      removeClassFromLeadingIcon: (className) => {\n        if (this.leadingIcon_) {\n          this.leadingIcon_.classList.remove(className);\n        }\n      },\n      eventTargetHasClass: (target, className) => target.classList.contains(className),\n      notifyInteraction: () => this.emit(strings.INTERACTION_EVENT, {chipId: this.id}, true /* shouldBubble */),\n      notifySelection: (selected) => this.emit(\n        strings.SELECTION_EVENT, {chipId: this.id, selected: selected}, true /* shouldBubble */),\n      notifyTrailingIconInteraction: () => this.emit(\n        strings.TRAILING_ICON_INTERACTION_EVENT, {chipId: this.id}, true /* shouldBubble */),\n      notifyRemoval: () =>\n        this.emit(strings.REMOVAL_EVENT, {chipId: this.id, root: this.root_}, true /* shouldBubble */),\n      getComputedStyleValue: (propertyName) => window.getComputedStyle(this.root_).getPropertyValue(propertyName),\n      setStyleProperty: (propertyName, value) => this.root_.style.setProperty(propertyName, value),\n      hasLeadingIcon: () => !!this.leadingIcon_,\n      getRootBoundingClientRect: () => this.root_.getBoundingClientRect(),\n      getCheckmarkBoundingClientRect: () => this.checkmark_ ? this.checkmark_.getBoundingClientRect() : null,\n    })));\n  }\n\n  /** @return {!MDCRipple} */\n  get ripple() {\n    return this.ripple_;\n  }\n}\n\nexport {MDCChip, MDCChipFoundation};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Chip Set.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Chip Set into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCChipSetAdapter {\n  /**\n   * Returns true if the root element contains the given class name.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Removes the chip with the given id from the chip set.\n   * @param {string} chipId\n   */\n  removeChip(chipId) {}\n\n  /**\n   * Sets the selected state of the chip with the given id.\n   * @param {string} chipId\n   * @param {boolean} selected\n   */\n  setSelected(chipId, selected) {}\n}\n\nexport default MDCChipSetAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  CHIP_SELECTOR: '.mdc-chip',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  CHOICE: 'mdc-chip-set--choice',\n  FILTER: 'mdc-chip-set--filter',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCChipSetAdapter from './adapter';\n// eslint-disable-next-line no-unused-vars\nimport {MDCChipInteractionEventType, MDCChipSelectionEventType, MDCChipRemovalEventType} from '../chip/foundation';\nimport {strings, cssClasses} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCChipSetAdapter>}\n * @final\n */\nclass MDCChipSetFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCChipSetAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCChipSetAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCChipSetAdapter} */ ({\n      hasClass: () => {},\n      removeChip: () => {},\n      setSelected: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCChipSetAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCChipSetFoundation.defaultAdapter, adapter));\n\n    /**\n     * The ids of the selected chips in the set. Only used for choice chip set or filter chip set.\n     * @private {!Array<string>}\n     */\n    this.selectedChipIds_ = [];\n  }\n\n  /**\n   * Returns an array of the IDs of all selected chips.\n   * @return {!Array<string>}\n   */\n  getSelectedChipIds() {\n    return this.selectedChipIds_;\n  }\n\n  /**\n   * Toggles selection of the chip with the given id.\n   * @private\n   * @param {string} chipId\n   */\n  toggleSelect_(chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      this.deselect_(chipId);\n    } else {\n      this.select(chipId);\n    }\n  }\n\n  /**\n   * Selects the chip with the given id. Deselects all other chips if the chip set is of the choice variant.\n   * @param {string} chipId\n   */\n  select(chipId) {\n    if (this.selectedChipIds_.indexOf(chipId) >= 0) {\n      return;\n    }\n\n    if (this.adapter_.hasClass(cssClasses.CHOICE) && this.selectedChipIds_.length > 0) {\n      const previouslySelectedChip = this.selectedChipIds_[0];\n      this.selectedChipIds_.length = 0;\n      this.adapter_.setSelected(previouslySelectedChip, false);\n    }\n    this.selectedChipIds_.push(chipId);\n    this.adapter_.setSelected(chipId, true);\n  }\n\n  /**\n   * Deselects the chip with the given id.\n   * @private\n   * @param {string} chipId\n   */\n  deselect_(chipId) {\n    const index = this.selectedChipIds_.indexOf(chipId);\n    if (index >= 0) {\n      this.selectedChipIds_.splice(index, 1);\n      this.adapter_.setSelected(chipId, false);\n    }\n  }\n\n  /**\n   * Handles a chip interaction event\n   * @param {string} chipId\n   */\n  handleChipInteraction(chipId) {\n    if (this.adapter_.hasClass(cssClasses.CHOICE) || this.adapter_.hasClass(cssClasses.FILTER)) {\n      this.toggleSelect_(chipId);\n    }\n  }\n\n  /**\n   * Handles a chip selection event, used to handle discrepancy when selection state is set directly on the Chip.\n   * @param {string} chipId\n   * @param {boolean} selected\n   */\n  handleChipSelection(chipId, selected) {\n    const chipIsSelected = this.selectedChipIds_.indexOf(chipId) >= 0;\n    if (selected && !chipIsSelected) {\n      this.select(chipId);\n    } else if (!selected && chipIsSelected) {\n      this.deselect_(chipId);\n    }\n  }\n\n  /**\n   * Handles the event when a chip is removed.\n   * @param {string} chipId\n   */\n  handleChipRemoval(chipId) {\n    this.deselect_(chipId);\n    this.adapter_.removeChip(chipId);\n  }\n}\n\nexport default MDCChipSetFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCChipSetAdapter from './adapter';\nimport MDCChipSetFoundation from './foundation';\nimport {MDCChip, MDCChipFoundation} from '../chip/index';\n\nlet idCounter = 0;\n\n/**\n * @extends {MDCComponent<!MDCChipSetFoundation>}\n * @final\n */\nclass MDCChipSet extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n\n    /** @type {!Array<!MDCChip>} */\n    this.chips;\n    /** @private {(function(!Element): !MDCChip)} */\n    this.chipFactory_;\n\n    /** @private {?function(?Event): undefined} */\n    this.handleChipInteraction_;\n    /** @private {?function(?Event): undefined} */\n    this.handleChipSelection_;\n    /** @private {?function(?Event): undefined} */\n    this.handleChipRemoval_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCChipSet}\n   */\n  static attachTo(root) {\n    return new MDCChipSet(root);\n  }\n\n  /**\n   * @param {(function(!Element): !MDCChip)=} chipFactory A function which\n   * creates a new MDCChip.\n   */\n  initialize(chipFactory = (el) => new MDCChip(el)) {\n    this.chipFactory_ = chipFactory;\n    this.chips = this.instantiateChips_(this.chipFactory_);\n  }\n\n  initialSyncWithDOM() {\n    this.chips.forEach((chip) => {\n      if (chip.selected) {\n        this.foundation_.select(chip.id);\n      }\n    });\n\n    this.handleChipInteraction_ = (evt) => this.foundation_.handleChipInteraction(evt.detail.chipId);\n    this.handleChipSelection_ = (evt) => this.foundation_.handleChipSelection(evt.detail.chipId, evt.detail.selected);\n    this.handleChipRemoval_ = (evt) => this.foundation_.handleChipRemoval(evt.detail.chipId);\n    this.root_.addEventListener(\n      MDCChipFoundation.strings.INTERACTION_EVENT, this.handleChipInteraction_);\n    this.root_.addEventListener(\n      MDCChipFoundation.strings.SELECTION_EVENT, this.handleChipSelection_);\n    this.root_.addEventListener(\n      MDCChipFoundation.strings.REMOVAL_EVENT, this.handleChipRemoval_);\n  }\n\n  destroy() {\n    this.chips.forEach((chip) => {\n      chip.destroy();\n    });\n\n    this.root_.removeEventListener(\n      MDCChipFoundation.strings.INTERACTION_EVENT, this.handleChipInteraction_);\n    this.root_.removeEventListener(\n      MDCChipFoundation.strings.SELECTION_EVENT, this.handleChipSelection_);\n    this.root_.removeEventListener(\n      MDCChipFoundation.strings.REMOVAL_EVENT, this.handleChipRemoval_);\n\n    super.destroy();\n  }\n\n  /**\n   * Adds a new chip object to the chip set from the given chip element.\n   * @param {!Element} chipEl\n   */\n  addChip(chipEl) {\n    chipEl.id = chipEl.id || `mdc-chip-${++idCounter}`;\n    this.chips.push(this.chipFactory_(chipEl));\n  }\n\n  /**\n   * Returns an array of the IDs of all selected chips.\n   * @return {!Array<string>}\n   */\n  get selectedChipIds() {\n    return this.foundation_.getSelectedChipIds();\n  }\n\n  /**\n   * @return {!MDCChipSetFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCChipSetFoundation(/** @type {!MDCChipSetAdapter} */ (Object.assign({\n      hasClass: (className) => this.root_.classList.contains(className),\n      removeChip: (chipId) => {\n        const index = this.findChipIndex_(chipId);\n        if (index >= 0) {\n          this.chips[index].destroy();\n          this.chips.splice(index, 1);\n        }\n      },\n      setSelected: (chipId, selected) => {\n        const index = this.findChipIndex_(chipId);\n        if (index >= 0) {\n          this.chips[index].selected = selected;\n        }\n      },\n    })));\n  }\n\n  /**\n   * Instantiates chip components on all of the chip set's child chip elements.\n   * @param {(function(!Element): !MDCChip)} chipFactory\n   * @return {!Array<!MDCChip>}\n   */\n  instantiateChips_(chipFactory) {\n    const chipElements = [].slice.call(this.root_.querySelectorAll(MDCChipSetFoundation.strings.CHIP_SELECTOR));\n    return chipElements.map((el) => {\n      el.id = el.id || `mdc-chip-${++idCounter}`;\n      return chipFactory(el);\n    });\n  }\n\n  /**\n   * Returns the index of the chip with the given id, or -1 if the chip does not exist.\n   * @param {string} chipId\n   * @return {number}\n   */\n  findChipIndex_(chipId) {\n    for (let i = 0; i < this.chips.length; i++) {\n      if (this.chips[i].id === chipId) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}\n\nexport {MDCChipSet, MDCChipSetFoundation};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport {MDCChipFoundation, MDCChip} from './chip/index';\nimport {MDCChipSetFoundation, MDCChipSet} from './chip-set/index';\n\nexport {MDCChipFoundation, MDCChip, MDCChipSetFoundation, MDCChipSet};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Dialog. Provides an interface for managing:\n * - CSS classes\n * - DOM\n * - Event handlers\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCDialogAdapter {\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /**\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /** @param {string} className */\n  addBodyClass(className) {}\n\n  /** @param {string} className */\n  removeBodyClass(className) {}\n\n  /**\n   * @param {!EventTarget} target\n   * @param {string} selector\n   * @return {boolean}\n   */\n  eventTargetMatches(target, selector) {}\n\n  trapFocus() {}\n  releaseFocus() {}\n\n  /** @return {boolean} */\n  isContentScrollable() {}\n\n  /** @return {boolean} */\n  areButtonsStacked() {}\n\n  /**\n   * @param {!Event} event\n   * @return {?string}\n   */\n  getActionFromEvent(event) {}\n\n  clickDefaultButton() {}\n  reverseButtons() {}\n\n  notifyOpening() {}\n  notifyOpened() {}\n\n  /**\n   * @param {string} action\n   */\n  notifyClosing(action) {}\n\n  /**\n   * @param {string} action\n   */\n  notifyClosed(action) {}\n}\n\nexport default MDCDialogAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst cssClasses = {\n  OPEN: 'mdc-dialog--open',\n  OPENING: 'mdc-dialog--opening',\n  CLOSING: 'mdc-dialog--closing',\n  SCROLLABLE: 'mdc-dialog--scrollable',\n  STACKED: 'mdc-dialog--stacked',\n  SCROLL_LOCK: 'mdc-dialog-scroll-lock',\n};\n\nconst strings = {\n  SCRIM_SELECTOR: '.mdc-dialog__scrim',\n  CONTAINER_SELECTOR: '.mdc-dialog__container',\n  SURFACE_SELECTOR: '.mdc-dialog__surface',\n  CONTENT_SELECTOR: '.mdc-dialog__content',\n  BUTTON_SELECTOR: '.mdc-dialog__button',\n  DEFAULT_BUTTON_SELECTOR: '.mdc-dialog__button--default',\n  SUPPRESS_DEFAULT_PRESS_SELECTOR: [\n    'textarea',\n    '.mdc-menu .mdc-list-item',\n  ].join(', '),\n\n  OPENING_EVENT: 'MDCDialog:opening',\n  OPENED_EVENT: 'MDCDialog:opened',\n  CLOSING_EVENT: 'MDCDialog:closing',\n  CLOSED_EVENT: 'MDCDialog:closed',\n\n  ACTION_ATTRIBUTE: 'data-mdc-dialog-action',\n\n  CLOSE_ACTION: 'close',\n  DESTROY_ACTION: 'destroy',\n};\n\nconst numbers = {\n  DIALOG_ANIMATION_OPEN_TIME_MS: 150,\n  DIALOG_ANIMATION_CLOSE_TIME_MS: 75,\n};\n\nexport {cssClasses, strings, numbers};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCDialogAdapter from './adapter';\nimport {cssClasses, numbers, strings} from './constants';\n\nclass MDCDialogFoundation extends MDCFoundation {\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get strings() {\n    return strings;\n  }\n\n  static get numbers() {\n    return numbers;\n  }\n\n  static get defaultAdapter() {\n    return /** @type {!MDCDialogAdapter} */ ({\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      hasClass: (/* className: string */) => {},\n      addBodyClass: (/* className: string */) => {},\n      removeBodyClass: (/* className: string */) => {},\n      eventTargetMatches: (/* target: !EventTarget, selector: string */) => {},\n      trapFocus: () => {},\n      releaseFocus: () => {},\n      isContentScrollable: () => {},\n      areButtonsStacked: () => {},\n      getActionFromEvent: (/* event: !Event */) => {},\n      clickDefaultButton: () => {},\n      reverseButtons: () => {},\n      notifyOpening: () => {},\n      notifyOpened: () => {},\n      notifyClosing: (/* action: ?string */) => {},\n      notifyClosed: (/* action: ?string */) => {},\n    });\n  }\n\n  /**\n   * @param {!MDCDialogAdapter=} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCDialogFoundation.defaultAdapter, adapter));\n\n    /** @private {boolean} */\n    this.isOpen_ = false;\n\n    /** @private {number} */\n    this.animationFrame_ = 0;\n\n    /** @private {number} */\n    this.animationTimer_ = 0;\n\n    /** @private {number} */\n    this.layoutFrame_ = 0;\n\n    /** @private {string} */\n    this.escapeKeyAction_ = strings.CLOSE_ACTION;\n\n    /** @private {string} */\n    this.scrimClickAction_ = strings.CLOSE_ACTION;\n\n    /** @private {boolean} */\n    this.autoStackButtons_ = true;\n\n    /** @private {boolean} */\n    this.areButtonsStacked_ = false;\n  };\n\n  init() {\n    if (this.adapter_.hasClass(cssClasses.STACKED)) {\n      this.setAutoStackButtons(false);\n    }\n  };\n\n  destroy() {\n    if (this.isOpen_) {\n      this.close(strings.DESTROY_ACTION);\n    }\n\n    if (this.animationTimer_) {\n      clearTimeout(this.animationTimer_);\n      this.handleAnimationTimerEnd_();\n    }\n\n    if (this.layoutFrame_) {\n      cancelAnimationFrame(this.layoutFrame_);\n      this.layoutFrame_ = 0;\n    }\n  }\n\n  open() {\n    this.isOpen_ = true;\n    this.adapter_.notifyOpening();\n    this.adapter_.addClass(cssClasses.OPENING);\n\n    // Wait a frame once display is no longer \"none\", to establish basis for animation\n    this.runNextAnimationFrame_(() => {\n      this.adapter_.addClass(cssClasses.OPEN);\n      this.adapter_.addBodyClass(cssClasses.SCROLL_LOCK);\n\n      this.layout();\n\n      this.animationTimer_ = setTimeout(() => {\n        this.handleAnimationTimerEnd_();\n        this.adapter_.trapFocus();\n        this.adapter_.notifyOpened();\n      }, numbers.DIALOG_ANIMATION_OPEN_TIME_MS);\n    });\n  }\n\n  /**\n   * @param {string=} action\n   */\n  close(action = '') {\n    if (!this.isOpen_) {\n      // Avoid redundant close calls (and events), e.g. from keydown on elements that inherently emit click\n      return;\n    }\n\n    this.isOpen_ = false;\n    this.adapter_.notifyClosing(action);\n    this.adapter_.addClass(cssClasses.CLOSING);\n    this.adapter_.removeClass(cssClasses.OPEN);\n    this.adapter_.removeBodyClass(cssClasses.SCROLL_LOCK);\n\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = 0;\n\n    clearTimeout(this.animationTimer_);\n    this.animationTimer_ = setTimeout(() => {\n      this.adapter_.releaseFocus();\n      this.handleAnimationTimerEnd_();\n      this.adapter_.notifyClosed(action);\n    }, numbers.DIALOG_ANIMATION_CLOSE_TIME_MS);\n  }\n\n  isOpen() {\n    return this.isOpen_;\n  }\n\n  /** @return {string} */\n  getEscapeKeyAction() {\n    return this.escapeKeyAction_;\n  }\n\n  /** @param {string} action */\n  setEscapeKeyAction(action) {\n    this.escapeKeyAction_ = action;\n  }\n\n  /** @return {string} */\n  getScrimClickAction() {\n    return this.scrimClickAction_;\n  }\n\n  /** @param {string} action */\n  setScrimClickAction(action) {\n    this.scrimClickAction_ = action;\n  }\n\n  /** @return {boolean} */\n  getAutoStackButtons() {\n    return this.autoStackButtons_;\n  }\n\n  /** @param {boolean} autoStack */\n  setAutoStackButtons(autoStack) {\n    this.autoStackButtons_ = autoStack;\n  }\n\n  layout() {\n    if (this.layoutFrame_) {\n      cancelAnimationFrame(this.layoutFrame_);\n    }\n    this.layoutFrame_ = requestAnimationFrame(() => {\n      this.layoutInternal_();\n      this.layoutFrame_ = 0;\n    });\n  }\n\n  layoutInternal_() {\n    if (this.autoStackButtons_) {\n      this.detectStackedButtons_();\n    }\n    this.detectScrollableContent_();\n  }\n\n  /** @private */\n  detectStackedButtons_() {\n    // Remove the class first to let us measure the buttons' natural positions.\n    this.adapter_.removeClass(cssClasses.STACKED);\n\n    const areButtonsStacked = this.adapter_.areButtonsStacked();\n\n    if (areButtonsStacked) {\n      this.adapter_.addClass(cssClasses.STACKED);\n    }\n\n    if (areButtonsStacked !== this.areButtonsStacked_) {\n      this.adapter_.reverseButtons();\n      this.areButtonsStacked_ = areButtonsStacked;\n    }\n  }\n\n  /** @private */\n  detectScrollableContent_() {\n    // Remove the class first to let us measure the natural height of the content.\n    this.adapter_.removeClass(cssClasses.SCROLLABLE);\n    if (this.adapter_.isContentScrollable()) {\n      this.adapter_.addClass(cssClasses.SCROLLABLE);\n    }\n  }\n\n  /**\n   * @param {!Event} evt\n   * @private\n   */\n  handleInteraction(evt) {\n    const isClick = evt.type === 'click';\n    const isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n\n    // Check for scrim click first since it doesn't require querying ancestors\n    if (isClick && this.adapter_.eventTargetMatches(evt.target, strings.SCRIM_SELECTOR) &&\n      this.scrimClickAction_ !== '') {\n      this.close(this.scrimClickAction_);\n    } else if (isClick || evt.key === 'Space' || evt.keyCode === 32 || isEnter) {\n      const action = this.adapter_.getActionFromEvent(evt);\n      if (action) {\n        this.close(action);\n      } else if (isEnter && !this.adapter_.eventTargetMatches(evt.target, strings.SUPPRESS_DEFAULT_PRESS_SELECTOR)) {\n        this.adapter_.clickDefaultButton();\n      }\n    }\n  }\n\n  /**\n   * @param {!KeyboardEvent} evt\n   * @private\n   */\n  handleDocumentKeydown(evt) {\n    if ((evt.key === 'Escape' || evt.keyCode === 27) && this.escapeKeyAction_ !== '') {\n      this.close(this.escapeKeyAction_);\n    }\n  }\n\n  /** @private */\n  handleAnimationTimerEnd_() {\n    this.animationTimer_ = 0;\n    this.adapter_.removeClass(cssClasses.OPENING);\n    this.adapter_.removeClass(cssClasses.CLOSING);\n  }\n\n  /**\n   * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n   * @param {Function} callback\n   * @private\n   */\n  runNextAnimationFrame_(callback) {\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = requestAnimationFrame(() => {\n      this.animationFrame_ = 0;\n      clearTimeout(this.animationTimer_);\n      this.animationTimer_ = setTimeout(callback, 0);\n    });\n  }\n}\n\nexport default MDCDialogFoundation;\n","var candidateSelectors = [\n  'input',\n  'select',\n  'textarea',\n  'a[href]',\n  'button',\n  '[tabindex]',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]:not([contenteditable=\"false\"])',\n];\nvar candidateSelector = candidateSelectors.join(',');\n\nvar matches = typeof Element === 'undefined'\n  ? function () {}\n  : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n\nfunction tabbable(el, options) {\n  options = options || {};\n\n  var elementDocument = el.ownerDocument || el;\n  var regularTabbables = [];\n  var orderedTabbables = [];\n\n  var untouchabilityChecker = new UntouchabilityChecker(elementDocument);\n  var candidates = el.querySelectorAll(candidateSelector);\n\n  if (options.includeContainer) {\n    if (matches.call(el, candidateSelector)) {\n      candidates = Array.prototype.slice.apply(candidates);\n      candidates.unshift(el);\n    }\n  }\n\n  var i, candidate, candidateTabindex;\n  for (i = 0; i < candidates.length; i++) {\n    candidate = candidates[i];\n\n    if (!isNodeMatchingSelectorTabbable(candidate, untouchabilityChecker)) continue;\n\n    candidateTabindex = getTabindex(candidate);\n    if (candidateTabindex === 0) {\n      regularTabbables.push(candidate);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        node: candidate,\n      });\n    }\n  }\n\n  var tabbableNodes = orderedTabbables\n    .sort(sortOrderedTabbables)\n    .map(function(a) { return a.node })\n    .concat(regularTabbables);\n\n  return tabbableNodes;\n}\n\ntabbable.isTabbable = isTabbable;\ntabbable.isFocusable = isFocusable;\n\nfunction isNodeMatchingSelectorTabbable(node, untouchabilityChecker) {\n  if (\n    !isNodeMatchingSelectorFocusable(node, untouchabilityChecker)\n    || isNonTabbableRadio(node)\n    || getTabindex(node) < 0\n  ) {\n    return false;\n  }\n  return true;\n}\n\nfunction isTabbable(node, untouchabilityChecker) {\n  if (!node) throw new Error('No node provided');\n  if (matches.call(node, candidateSelector) === false) return false;\n  return isNodeMatchingSelectorTabbable(node, untouchabilityChecker);\n}\n\nfunction isNodeMatchingSelectorFocusable(node, untouchabilityChecker) {\n  untouchabilityChecker = untouchabilityChecker || new UntouchabilityChecker(node.ownerDocument || node);\n  if (\n    node.disabled\n    || isHiddenInput(node)\n    || untouchabilityChecker.isUntouchable(node)\n  ) {\n    return false;\n  }\n  return true;\n}\n\nvar focusableCandidateSelector = candidateSelectors.concat('iframe').join(',');\nfunction isFocusable(node, untouchabilityChecker) {\n  if (!node) throw new Error('No node provided');\n  if (matches.call(node, focusableCandidateSelector) === false) return false;\n  return isNodeMatchingSelectorFocusable(node, untouchabilityChecker);\n}\n\nfunction getTabindex(node) {\n  var tabindexAttr = parseInt(node.getAttribute('tabindex'), 10);\n  if (!isNaN(tabindexAttr)) return tabindexAttr;\n  // Browsers do not return `tabIndex` correctly for contentEditable nodes;\n  // so if they don't have a tabindex attribute specifically set, assume it's 0.\n  if (isContentEditable(node)) return 0;\n  return node.tabIndex;\n}\n\nfunction sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n}\n\n// Array.prototype.find not available in IE.\nfunction find(list, predicate) {\n  for (var i = 0, length = list.length; i < length; i++) {\n    if (predicate(list[i])) return list[i];\n  }\n}\n\nfunction isContentEditable(node) {\n  return node.contentEditable === 'true';\n}\n\nfunction isInput(node) {\n  return node.tagName === 'INPUT';\n}\n\nfunction isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n}\n\nfunction isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n}\n\nfunction isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n}\n\nfunction getCheckedRadio(nodes) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked) {\n      return nodes[i];\n    }\n  }\n}\n\nfunction isTabbableRadio(node) {\n  if (!node.name) return true;\n  // This won't account for the edge case where you have radio groups with the same\n  // in separate forms on the same page.\n  var radioSet = node.ownerDocument.querySelectorAll('input[type=\"radio\"][name=\"' + node.name + '\"]');\n  var checked = getCheckedRadio(radioSet);\n  return !checked || checked === node;\n}\n\n// An element is \"untouchable\" if *it or one of its ancestors* has\n// `visibility: hidden` or `display: none`.\nfunction UntouchabilityChecker(elementDocument) {\n  this.doc = elementDocument;\n  // Node cache must be refreshed on every check, in case\n  // the content of the element has changed. The cache contains tuples\n  // mapping nodes to their boolean result.\n  this.cache = [];\n}\n\n// getComputedStyle accurately reflects `visibility: hidden` of ancestors\n// but not `display: none`, so we need to recursively check parents.\nUntouchabilityChecker.prototype.hasDisplayNone = function hasDisplayNone(node, nodeComputedStyle) {\n  if (node.nodeType !== Node.ELEMENT_NODE) return false;\n\n    // Search for a cached result.\n    var cached = find(this.cache, function(item) {\n      return item === node;\n    });\n    if (cached) return cached[1];\n\n    nodeComputedStyle = nodeComputedStyle || this.doc.defaultView.getComputedStyle(node);\n\n    var result = false;\n\n    if (nodeComputedStyle.display === 'none') {\n      result = true;\n    } else if (node.parentNode) {\n      result = this.hasDisplayNone(node.parentNode);\n    }\n\n    this.cache.push([node, result]);\n\n    return result;\n}\n\nUntouchabilityChecker.prototype.isUntouchable = function isUntouchable(node) {\n  if (node === this.doc.documentElement) return false;\n  var computedStyle = this.doc.defaultView.getComputedStyle(node);\n  if (this.hasDisplayNone(node, computedStyle)) return true;\n  return computedStyle.visibility === 'hidden';\n}\n\nmodule.exports = tabbable;\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","var tabbable = require('tabbable');\nvar xtend = require('xtend');\n\nvar activeFocusTraps = (function() {\n  var trapQueue = [];\n  return {\n    activateTrap: function(trap) {\n      if (trapQueue.length > 0) {\n        var activeTrap = trapQueue[trapQueue.length - 1];\n        if (activeTrap !== trap) {\n          activeTrap.pause();\n        }\n      }\n\n      var trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex === -1) {\n        trapQueue.push(trap);\n      } else {\n        // move this existing trap to the front of the queue\n        trapQueue.splice(trapIndex, 1);\n        trapQueue.push(trap);\n      }\n    },\n\n    deactivateTrap: function(trap) {\n      var trapIndex = trapQueue.indexOf(trap);\n      if (trapIndex !== -1) {\n        trapQueue.splice(trapIndex, 1);\n      }\n\n      if (trapQueue.length > 0) {\n        trapQueue[trapQueue.length - 1].unpause();\n      }\n    }\n  };\n})();\n\nfunction focusTrap(element, userOptions) {\n  var doc = document;\n  var container =\n    typeof element === 'string' ? doc.querySelector(element) : element;\n\n  var config = xtend(\n    {\n      returnFocusOnDeactivate: true,\n      escapeDeactivates: true\n    },\n    userOptions\n  );\n\n  var state = {\n    firstTabbableNode: null,\n    lastTabbableNode: null,\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false\n  };\n\n  var trap = {\n    activate: activate,\n    deactivate: deactivate,\n    pause: pause,\n    unpause: unpause\n  };\n\n  return trap;\n\n  function activate(activateOptions) {\n    if (state.active) return;\n\n    updateTabbableNodes();\n\n    state.active = true;\n    state.paused = false;\n    state.nodeFocusedBeforeActivation = doc.activeElement;\n\n    var onActivate =\n      activateOptions && activateOptions.onActivate\n        ? activateOptions.onActivate\n        : config.onActivate;\n    if (onActivate) {\n      onActivate();\n    }\n\n    addListeners();\n    return trap;\n  }\n\n  function deactivate(deactivateOptions) {\n    if (!state.active) return;\n\n    removeListeners();\n    state.active = false;\n    state.paused = false;\n\n    activeFocusTraps.deactivateTrap(trap);\n\n    var onDeactivate =\n      deactivateOptions && deactivateOptions.onDeactivate !== undefined\n        ? deactivateOptions.onDeactivate\n        : config.onDeactivate;\n    if (onDeactivate) {\n      onDeactivate();\n    }\n\n    var returnFocus =\n      deactivateOptions && deactivateOptions.returnFocus !== undefined\n        ? deactivateOptions.returnFocus\n        : config.returnFocusOnDeactivate;\n    if (returnFocus) {\n      delay(function() {\n        tryFocus(state.nodeFocusedBeforeActivation);\n      });\n    }\n\n    return trap;\n  }\n\n  function pause() {\n    if (state.paused || !state.active) return;\n    state.paused = true;\n    removeListeners();\n  }\n\n  function unpause() {\n    if (!state.paused || !state.active) return;\n    state.paused = false;\n    addListeners();\n  }\n\n  function addListeners() {\n    if (!state.active) return;\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trap);\n\n    updateTabbableNodes();\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    delay(function() {\n      tryFocus(getInitialFocusNode());\n    });\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, true);\n    doc.addEventListener('touchstart', checkPointerDown, true);\n    doc.addEventListener('click', checkClick, true);\n    doc.addEventListener('keydown', checkKey, true);\n\n    return trap;\n  }\n\n  function removeListeners() {\n    if (!state.active) return;\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n\n    return trap;\n  }\n\n  function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    var node = optionValue;\n    if (!optionValue) {\n      return null;\n    }\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue);\n      if (!node) {\n        throw new Error('`' + optionName + '` refers to no known node');\n      }\n    }\n    if (typeof optionValue === 'function') {\n      node = optionValue();\n      if (!node) {\n        throw new Error('`' + optionName + '` did not return a node');\n      }\n    }\n    return node;\n  }\n\n  function getInitialFocusNode() {\n    var node;\n    if (getNodeForOption('initialFocus') !== null) {\n      node = getNodeForOption('initialFocus');\n    } else if (container.contains(doc.activeElement)) {\n      node = doc.activeElement;\n    } else {\n      node = state.firstTabbableNode || getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error(\n        \"You can't have a focus-trap without at least one focusable element\"\n      );\n    }\n\n    return node;\n  }\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  function checkPointerDown(e) {\n    if (container.contains(e.target)) return;\n    if (config.clickOutsideDeactivates) {\n      deactivate({\n        returnFocus: !tabbable.isFocusable(e.target)\n      });\n    } else {\n      e.preventDefault();\n    }\n  }\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  function checkFocusIn(e) {\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (container.contains(e.target) || e.target instanceof Document) {\n      return;\n    }\n    e.stopImmediatePropagation();\n    tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n  }\n\n  function checkKey(e) {\n    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {\n      e.preventDefault();\n      deactivate();\n      return;\n    }\n    if (isTabEvent(e)) {\n      checkTab(e);\n      return;\n    }\n  }\n\n  // Hijack Tab events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  function checkTab(e) {\n    updateTabbableNodes();\n    if (e.shiftKey && e.target === state.firstTabbableNode) {\n      e.preventDefault();\n      tryFocus(state.lastTabbableNode);\n      return;\n    }\n    if (!e.shiftKey && e.target === state.lastTabbableNode) {\n      e.preventDefault();\n      tryFocus(state.firstTabbableNode);\n      return;\n    }\n  }\n\n  function checkClick(e) {\n    if (config.clickOutsideDeactivates) return;\n    if (container.contains(e.target)) return;\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  function updateTabbableNodes() {\n    var tabbableNodes = tabbable(container);\n    state.firstTabbableNode = tabbableNodes[0] || getInitialFocusNode();\n    state.lastTabbableNode =\n      tabbableNodes[tabbableNodes.length - 1] || getInitialFocusNode();\n  }\n\n  function tryFocus(node) {\n    if (node === doc.activeElement) return;\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus();\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  }\n}\n\nfunction isSelectableInput(node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n}\n\nfunction isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n}\n\nfunction isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n}\n\nfunction delay(fn) {\n  return setTimeout(fn, 0);\n}\n\nmodule.exports = focusTrap;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport createFocusTrap from 'focus-trap';\n\n/**\n * @param {!Element} surfaceEl\n * @param {?Element=} initialFocusEl\n * @param {function(!Element, !FocusTrapCreateOptions): !FocusTrapInstance} focusTrapFactory\n * @return {!FocusTrapInstance}\n */\nfunction createFocusTrapInstance(surfaceEl, focusTrapFactory = createFocusTrap, initialFocusEl = null) {\n  return focusTrapFactory(surfaceEl, {\n    initialFocus: initialFocusEl,\n    escapeDeactivates: false, // Dialog foundation handles escape key\n    clickOutsideDeactivates: true, // Allow handling of scrim clicks\n  });\n}\n\n/**\n * @param {!Element} el\n * @return {boolean}\n */\nfunction isScrollable(el) {\n  return el.scrollHeight > el.offsetHeight;\n}\n\n/**\n * @param {!Array<!Element>|!NodeList} els\n * @return {boolean}\n */\nfunction areTopsMisaligned(els) {\n  const tops = new Set();\n  [].forEach.call(els, (el) => tops.add(el.offsetTop));\n  return tops.size > 1;\n}\n\nexport {createFocusTrapInstance, isScrollable, areTopsMisaligned};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @fileoverview A \"ponyfill\" is a polyfill that doesn't modify the global prototype chain.\n * This makes ponyfills safer than traditional polyfills, especially for libraries like MDC.\n */\n\n/**\n * @param {!Element} element\n * @param {string} selector\n * @return {?Element}\n */\nfunction closest(element, selector) {\n  if (element.closest) {\n    return element.closest(selector);\n  }\n\n  let el = element;\n  while (el) {\n    if (matches(el, selector)) {\n      return el;\n    }\n    el = el.parentElement;\n  }\n  return null;\n}\n\n/**\n * @param {!Element} element\n * @param {string} selector\n * @return {boolean}\n */\nfunction matches(element, selector) {\n  const nativeMatches = element.matches\n    || element.webkitMatchesSelector\n    || element.msMatchesSelector;\n  return nativeMatches.call(element, selector);\n}\n\nexport {closest, matches};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport {MDCRipple} from '@material/ripple/index';\n\nimport MDCDialogFoundation from './foundation';\nimport * as util from './util';\nimport {closest, matches} from '@material/dom/ponyfill';\n\nimport createFocusTrap from 'focus-trap';\n\nconst strings = MDCDialogFoundation.strings;\n\nclass MDCDialog extends MDCComponent {\n  constructor(...args) {\n    super(...args);\n\n    /**\n     * @type {!Array<!MDCRipple>}\n     * @private\n     */\n    this.buttonRipples_;\n\n    /** @private {!Array<!Element>} */\n    this.buttons_;\n\n    /** @private {?Element} */\n    this.defaultButton_;\n\n    /** @private {!Element} */\n    this.container_;\n\n    /** @private {?Element} */\n    this.content_;\n\n    /** @private {?Element} */\n    this.initialFocusEl_;\n\n    /** @private {!Function} */\n    this.focusTrapFactory_;\n\n    /** @private {!FocusTrapInstance} */\n    this.focusTrap_;\n\n    /** @private {!Function} */\n    this.handleInteraction_;\n\n    /** @private {!Function} */\n    this.handleDocumentKeydown_;\n\n    /** @private {!Function} */\n    this.handleOpening_;\n\n    /** @private {!Function} */\n    this.handleClosing_;\n\n    /** @private {Function} */\n    this.layout_;\n  }\n\n  static attachTo(root) {\n    return new MDCDialog(root);\n  }\n\n  get isOpen() {\n    return this.foundation_.isOpen();\n  }\n\n  get escapeKeyAction() {\n    return this.foundation_.getEscapeKeyAction();\n  }\n\n  set escapeKeyAction(action) {\n    this.foundation_.setEscapeKeyAction(action);\n  }\n\n  get scrimClickAction() {\n    return this.foundation_.getScrimClickAction();\n  }\n\n  set scrimClickAction(action) {\n    this.foundation_.setScrimClickAction(action);\n  }\n\n  get autoStackButtons() {\n    return this.foundation_.getAutoStackButtons();\n  }\n\n  set autoStackButtons(autoStack) {\n    this.foundation_.setAutoStackButtons(autoStack);\n  }\n\n  initialize(focusTrapFactory = createFocusTrap, initialFocusEl = null) {\n    this.container_ = /** @type {!Element} */ (this.root_.querySelector(strings.CONTAINER_SELECTOR));\n    this.content_ = this.root_.querySelector(strings.CONTENT_SELECTOR);\n    this.buttons_ = [].slice.call(this.root_.querySelectorAll(strings.BUTTON_SELECTOR));\n    this.defaultButton_ = this.root_.querySelector(strings.DEFAULT_BUTTON_SELECTOR);\n    this.buttonRipples_ = [];\n    this.focusTrapFactory_ = focusTrapFactory;\n    this.initialFocusEl_ = initialFocusEl;\n\n    for (let i = 0, buttonEl; buttonEl = this.buttons_[i]; i++) {\n      this.buttonRipples_.push(new MDCRipple(buttonEl));\n    }\n  }\n\n  initialSyncWithDOM() {\n    this.focusTrap_ = util.createFocusTrapInstance(this.container_, this.focusTrapFactory_, this.initialFocusEl_);\n\n    this.handleInteraction_ = this.foundation_.handleInteraction.bind(this.foundation_);\n    this.handleDocumentKeydown_ = this.foundation_.handleDocumentKeydown.bind(this.foundation_);\n    this.layout_ = this.layout.bind(this);\n\n    const LAYOUT_EVENTS = ['resize', 'orientationchange'];\n    this.handleOpening_ = () => {\n      LAYOUT_EVENTS.forEach((type) => window.addEventListener(type, this.layout_));\n      document.addEventListener('keydown', this.handleDocumentKeydown_);\n    };\n    this.handleClosing_ = () => {\n      LAYOUT_EVENTS.forEach((type) => window.removeEventListener(type, this.layout_));\n      document.removeEventListener('keydown', this.handleDocumentKeydown_);\n    };\n\n    this.listen('click', this.handleInteraction_);\n    this.listen('keydown', this.handleInteraction_);\n    this.listen(strings.OPENING_EVENT, this.handleOpening_);\n    this.listen(strings.CLOSING_EVENT, this.handleClosing_);\n  }\n\n  destroy() {\n    this.unlisten('click', this.handleInteraction_);\n    this.unlisten('keydown', this.handleInteraction_);\n    this.unlisten(strings.OPENING_EVENT, this.handleOpening_);\n    this.unlisten(strings.CLOSING_EVENT, this.handleClosing_);\n    this.handleClosing_();\n\n    this.buttonRipples_.forEach((ripple) => ripple.destroy());\n    super.destroy();\n  }\n\n  layout() {\n    this.foundation_.layout();\n  }\n\n  open() {\n    this.foundation_.open();\n  }\n\n  /**\n   * @param {string=} action\n   */\n  close(action = '') {\n    this.foundation_.close(action);\n  }\n\n  getDefaultFoundation() {\n    return new MDCDialogFoundation({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      addBodyClass: (className) => document.body.classList.add(className),\n      removeBodyClass: (className) => document.body.classList.remove(className),\n      eventTargetMatches: (target, selector) => matches(target, selector),\n      trapFocus: () => this.focusTrap_.activate(),\n      releaseFocus: () => this.focusTrap_.deactivate(),\n      isContentScrollable: () => !!this.content_ && util.isScrollable(/** @type {!Element} */ (this.content_)),\n      areButtonsStacked: () => util.areTopsMisaligned(this.buttons_),\n      getActionFromEvent: (event) => {\n        const element = closest(event.target, `[${strings.ACTION_ATTRIBUTE}]`);\n        return element && element.getAttribute(strings.ACTION_ATTRIBUTE);\n      },\n      clickDefaultButton: () => {\n        if (this.defaultButton_) {\n          this.defaultButton_.click();\n        }\n      },\n      reverseButtons: () => {\n        this.buttons_.reverse();\n        this.buttons_.forEach((button) => button.parentElement.appendChild(button));\n      },\n      notifyOpening: () => this.emit(strings.OPENING_EVENT, {}),\n      notifyOpened: () => this.emit(strings.OPENED_EVENT, {}),\n      notifyClosing: (action) => this.emit(strings.CLOSING_EVENT, action ? {action} : {}),\n      notifyClosed: (action) => this.emit(strings.CLOSED_EVENT, action ? {action} : {}),\n    });\n  }\n}\n\nexport {MDCDialog, MDCDialogFoundation, util};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Drawer\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Drawer into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCDrawerAdapter {\n  /**\n   * Adds a class to the root Element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root Element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root Element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * @param {!Element} element target element to verify class name\n   * @param {string} className class name\n   */\n  elementHasClass(element, className) {}\n\n  /**\n   * Saves the focus of currently active element.\n   */\n  saveFocus() {}\n\n  /**\n   * Restores focus to element previously saved with 'saveFocus'.\n   */\n  restoreFocus() {}\n\n  /**\n   * Focuses the active / selected navigation item.\n   */\n  focusActiveNavigationItem() {}\n\n  /**\n   * Emits a custom event \"MDCDrawer:closed\" denoting the drawer has closed.\n   */\n  notifyClose() {}\n\n  /**\n   * Emits a custom event \"MDCDrawer:opened\" denoting the drawer has opened.\n   */\n  notifyOpen() {}\n\n  /**\n   * Traps focus on root element and focuses the active navigation element.\n   */\n  trapFocus() {}\n\n  /**\n   * Releases focus trap from root element which was set by `trapFocus`\n   * and restores focus to where it was prior to calling `trapFocus`.\n   */\n  releaseFocus() {}\n}\n\nexport default MDCDrawerAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-drawer',\n  DISMISSIBLE: 'mdc-drawer--dismissible',\n  MODAL: 'mdc-drawer--modal',\n  OPEN: 'mdc-drawer--open',\n  ANIMATE: 'mdc-drawer--animate',\n  OPENING: 'mdc-drawer--opening',\n  CLOSING: 'mdc-drawer--closing',\n};\n\n/** @enum {string} */\nconst strings = {\n  APP_CONTENT_SELECTOR: '.mdc-drawer-app-content',\n  SCRIM_SELECTOR: '.mdc-drawer-scrim',\n  CLOSE_EVENT: 'MDCDrawer:closed',\n  OPEN_EVENT: 'MDCDrawer:opened',\n};\n\nexport {cssClasses, strings};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCDrawerAdapter from '../adapter';\nimport MDCFoundation from '@material/base/foundation';\nimport {cssClasses, strings} from '../constants';\n\n/**\n * @extends {MDCFoundation<!MDCDrawerAdapter>}\n */\nclass MDCDismissibleDrawerFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get defaultAdapter() {\n    return /** @type {!MDCDrawerAdapter} */ ({\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      hasClass: (/* className: string */) => {},\n      elementHasClass: (/* element: !Element, className: string */) => {},\n      notifyClose: () => {},\n      notifyOpen: () => {},\n      saveFocus: () => {},\n      restoreFocus: () => {},\n      focusActiveNavigationItem: () => {},\n      trapFocus: () => {},\n      releaseFocus: () => {},\n    });\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCDismissibleDrawerFoundation.defaultAdapter, adapter));\n\n    /** @private {number} */\n    this.animationFrame_ = 0;\n\n    /** @private {number} */\n    this.animationTimer_ = 0;\n  }\n\n  destroy() {\n    if (this.animationFrame_) {\n      cancelAnimationFrame(this.animationFrame_);\n    }\n    if (this.animationTimer_) {\n      clearTimeout(this.animationTimer_);\n    }\n  }\n\n  /**\n   * Function to open the drawer.\n   */\n  open() {\n    if (this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter_.addClass(cssClasses.OPEN);\n    this.adapter_.addClass(cssClasses.ANIMATE);\n\n    // Wait a frame once display is no longer \"none\", to establish basis for animation\n    this.runNextAnimationFrame_(() => {\n      this.adapter_.addClass(cssClasses.OPENING);\n    });\n\n    this.adapter_.saveFocus();\n  }\n\n  /**\n   * Function to close the drawer.\n   */\n  close() {\n    if (!this.isOpen() || this.isOpening() || this.isClosing()) {\n      return;\n    }\n\n    this.adapter_.addClass(cssClasses.CLOSING);\n  }\n\n  /**\n   * Extension point for when drawer finishes open animation.\n   * @protected\n   */\n  opened() {}\n\n  /**\n   * Extension point for when drawer finishes close animation.\n   * @protected\n   */\n  closed() {}\n\n  /**\n   * Returns true if drawer is in open state.\n   * @return {boolean}\n   */\n  isOpen() {\n    return this.adapter_.hasClass(cssClasses.OPEN);\n  }\n\n  /**\n   * Returns true if drawer is animating open.\n   * @return {boolean}\n   */\n  isOpening() {\n    return this.adapter_.hasClass(cssClasses.OPENING) || this.adapter_.hasClass(cssClasses.ANIMATE);\n  }\n\n  /**\n   * Returns true if drawer is animating closed.\n   * @return {boolean}\n   */\n  isClosing() {\n    return this.adapter_.hasClass(cssClasses.CLOSING);\n  }\n\n  /**\n   * Keydown handler to close drawer when key is escape.\n   * @param evt\n   */\n  handleKeydown(evt) {\n    const {keyCode, key} = evt;\n\n    const isEscape = key === 'Escape' || keyCode === 27;\n    if (isEscape) {\n      this.close();\n    }\n  }\n\n  /**\n   * Handles a transition end event on the root element.\n   * @param {!Event} evt\n   */\n  handleTransitionEnd(evt) {\n    const {OPENING, CLOSING, OPEN, ANIMATE, ROOT} = cssClasses;\n\n    // In Edge, transitionend on ripple pseudo-elements yields a target without classList, so check for Element first.\n    const isElement = evt.target instanceof Element;\n    if (!isElement || !this.adapter_.elementHasClass(/** @type {!Element} */ (evt.target), ROOT)) {\n      return;\n    }\n\n    if (this.isClosing()) {\n      this.adapter_.removeClass(OPEN);\n      this.closed();\n      this.adapter_.restoreFocus();\n      this.adapter_.notifyClose();\n    } else {\n      this.adapter_.focusActiveNavigationItem();\n      this.opened();\n      this.adapter_.notifyOpen();\n    }\n\n    this.adapter_.removeClass(ANIMATE);\n    this.adapter_.removeClass(OPENING);\n    this.adapter_.removeClass(CLOSING);\n  }\n\n  /**\n   * Runs the given logic on the next animation frame, using setTimeout to factor in Firefox reflow behavior.\n   * @param {Function} callback\n   * @private\n   */\n  runNextAnimationFrame_(callback) {\n    cancelAnimationFrame(this.animationFrame_);\n    this.animationFrame_ = requestAnimationFrame(() => {\n      this.animationFrame_ = 0;\n      clearTimeout(this.animationTimer_);\n      this.animationTimer_ = setTimeout(callback, 0);\n    });\n  }\n}\n\nexport default MDCDismissibleDrawerFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCDismissibleDrawerFoundation from '../dismissible/foundation';\n\n/**\n * @extends {MDCDismissibleDrawerFoundation}\n */\nclass MDCModalDrawerFoundation extends MDCDismissibleDrawerFoundation {\n  /**\n   * Called when drawer finishes open animation.\n   * @override\n   */\n  opened() {\n    this.adapter_.trapFocus();\n  }\n\n  /**\n   * Called when drawer finishes close animation.\n   * @override\n   */\n  closed() {\n    this.adapter_.releaseFocus();\n  }\n\n  /**\n   * Handles click event on scrim.\n   */\n  handleScrimClick() {\n    this.close();\n  }\n}\n\nexport default MDCModalDrawerFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC List. Provides an interface for managing focus.\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCListAdapter {\n  /** @return {number} */\n  getListItemCount() {}\n\n  /**\n   * @return {number} */\n  getFocusedElementIndex() {}\n\n  /**\n   * @param {number} index\n   * @param {string} attribute\n   * @param {string} value\n   */\n  setAttributeForElementIndex(index, attribute, value) {}\n\n  /**\n   * @param {number} index\n   * @param {string} attribute\n   */\n  removeAttributeForElementIndex(index, attribute) {}\n\n  /**\n   * @param {number} index\n   * @param {string} className\n   */\n  addClassForElementIndex(index, className) {}\n\n  /**\n   * @param {number} index\n   * @param {string} className\n   */\n  removeClassForElementIndex(index, className) {}\n\n  /**\n   * Focuses list item at the index specified.\n   * @param {number} index\n   */\n  focusItemAtIndex(index) {}\n\n  /**\n   * Sets the tabindex to the value specified for all button/a element children of\n   * the list item at the index specified.\n   * @param {number} listItemIndex\n   * @param {number} tabIndexValue\n   */\n  setTabIndexForListItemChildren(listItemIndex, tabIndexValue) {}\n\n  /**\n   * @param {number} index\n   * @return {boolean} Returns true if radio button is present at given list item index.\n   */\n  hasRadioAtIndex(index) {}\n\n  /**\n   * @param {number} index\n   * @return {boolean} Returns true if checkbox is present at given list item index.\n   */\n  hasCheckboxAtIndex(index) {}\n\n  /**\n   * @param {number} index\n   * @return {boolean} Returns true if checkbox inside a list item is checked.\n   */\n  isCheckboxCheckedAtIndex(index) {}\n\n  /**\n   * Sets the checked status of checkbox or radio at given list item index.\n   * @param {number} index\n   * @param {boolean} isChecked\n   */\n  setCheckedCheckboxOrRadioAtIndex(index, isChecked) {}\n\n  /**\n   * Notifies user action on list item.\n   */\n  notifyAction(index) {}\n\n  /**\n   * @return {boolean} Returns true when the current focused element is inside list root.\n   */\n  isFocusInsideList() {}\n}\n\nexport default MDCListAdapter;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-list',\n  LIST_ITEM_CLASS: 'mdc-list-item',\n  LIST_ITEM_SELECTED_CLASS: 'mdc-list-item--selected',\n  LIST_ITEM_ACTIVATED_CLASS: 'mdc-list-item--activated',\n};\n\n/** @enum {string} */\nconst strings = {\n  ARIA_ORIENTATION: 'aria-orientation',\n  ARIA_ORIENTATION_HORIZONTAL: 'horizontal',\n  ARIA_SELECTED: 'aria-selected',\n  ARIA_CHECKED: 'aria-checked',\n  ARIA_CHECKED_RADIO_SELECTOR: '[role=\"radio\"][aria-checked=\"true\"]',\n  ARIA_ROLE_CHECKBOX_SELECTOR: '[role=\"checkbox\"]',\n  ARIA_CHECKED_CHECKBOX_SELECTOR: '[role=\"checkbox\"][aria-checked=\"true\"]',\n  RADIO_SELECTOR: 'input[type=\"radio\"]:not(:disabled)',\n  CHECKBOX_SELECTOR: 'input[type=\"checkbox\"]:not(:disabled)',\n  CHECKBOX_RADIO_SELECTOR: 'input[type=\"checkbox\"]:not(:disabled), input[type=\"radio\"]:not(:disabled)',\n  CHILD_ELEMENTS_TO_TOGGLE_TABINDEX: `.${cssClasses.LIST_ITEM_CLASS} button:not(:disabled),\n  .${cssClasses.LIST_ITEM_CLASS} a`,\n  FOCUSABLE_CHILD_ELEMENTS: `.${cssClasses.LIST_ITEM_CLASS} button:not(:disabled), .${cssClasses.LIST_ITEM_CLASS} a,\n  .${cssClasses.LIST_ITEM_CLASS} input[type=\"radio\"]:not(:disabled),\n  .${cssClasses.LIST_ITEM_CLASS} input[type=\"checkbox\"]:not(:disabled)`,\n  ENABLED_ITEMS_SELECTOR: '.mdc-list-item:not(.mdc-list-item--disabled)',\n  ACTION_EVENT: 'MDCList:action',\n};\n\n/** @typedef {number|!Array<number>} */\nlet Index;\n\nexport {strings, cssClasses, Index};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCListAdapter from './adapter';\nimport {strings, cssClasses, Index} from './constants'; // eslint-disable-line no-unused-vars\n\nconst ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];\n\nclass MDCListFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCListAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCListAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCListAdapter} */ ({\n      getListItemCount: () => {},\n      getFocusedElementIndex: () => {},\n      setAttributeForElementIndex: () => {},\n      removeAttributeForElementIndex: () => {},\n      addClassForElementIndex: () => {},\n      removeClassForElementIndex: () => {},\n      focusItemAtIndex: () => {},\n      setTabIndexForListItemChildren: () => {},\n      hasRadioAtIndex: () => {},\n      hasCheckboxAtIndex: () => {},\n      isCheckboxCheckedAtIndex: () => {},\n      setCheckedCheckboxOrRadioAtIndex: () => {},\n      notifyAction: () => {},\n      isFocusInsideList: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCListAdapter=} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCListFoundation.defaultAdapter, adapter));\n    /** @private {boolean} */\n    this.wrapFocus_ = false;\n\n    /** @private {boolean} */\n    this.isVertical_ = true;\n\n    /** @private {boolean} */\n    this.isSingleSelectionList_ = false;\n\n    /** @private {!Index} */\n    this.selectedIndex_ = -1;\n\n    /** @private {number} */\n    this.focusedItemIndex_ = -1;\n\n    /** @private {boolean} */\n    this.useActivatedClass_ = false;\n\n    /** @private {boolean} */\n    this.isCheckboxList_ = false;\n\n    /** @private {boolean} */\n    this.isRadioList_ = false;\n  }\n\n  layout() {\n    if (this.adapter_.getListItemCount() === 0) return;\n\n    if (this.adapter_.hasCheckboxAtIndex(0)) {\n      this.isCheckboxList_ = true;\n    } else if (this.adapter_.hasRadioAtIndex(0)) {\n      this.isRadioList_ = true;\n    }\n  }\n\n  /**\n   * Sets the private wrapFocus_ variable.\n   * @param {boolean} value\n   */\n  setWrapFocus(value) {\n    this.wrapFocus_ = value;\n  }\n\n  /**\n   * Sets the isVertical_ private variable.\n   * @param {boolean} value\n   */\n  setVerticalOrientation(value) {\n    this.isVertical_ = value;\n  }\n\n  /**\n   * Sets the isSingleSelectionList_ private variable.\n   * @param {boolean} value\n   */\n  setSingleSelection(value) {\n    this.isSingleSelectionList_ = value;\n  }\n\n  /**\n   * Sets the useActivatedClass_ private variable.\n   * @param {boolean} useActivated\n   */\n  setUseActivatedClass(useActivated) {\n    this.useActivatedClass_ = useActivated;\n  }\n\n  /** @return {!Index} */\n  getSelectedIndex() {\n    return this.selectedIndex_;\n  }\n\n  /** @param {!Index} index */\n  setSelectedIndex(index) {\n    if (!this.isIndexValid_(index)) return;\n\n    if (this.isCheckboxList_) {\n      this.setCheckboxAtIndex_(/** @type {!Array<number>} */ (index));\n    } else if (this.isRadioList_) {\n      this.setRadioAtIndex_(/** @type {number} */ (index));\n    } else {\n      this.setSingleSelectionAtIndex_(/** @type {number} */ (index));\n    }\n  }\n\n  /**\n   * Focus in handler for the list items.\n   * @param evt\n   * @param {number} listItemIndex\n   */\n  handleFocusIn(evt, listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.adapter_.setTabIndexForListItemChildren(listItemIndex, 0);\n    }\n  }\n\n  /**\n   * Focus out handler for the list items.\n   * @param {Event} evt\n   * @param {number} listItemIndex\n   */\n  handleFocusOut(evt, listItemIndex) {\n    if (listItemIndex >= 0) {\n      this.adapter_.setTabIndexForListItemChildren(listItemIndex, -1);\n    }\n\n    /**\n     * Between Focusout & Focusin some browsers do not have focus on any element. Setting a delay to wait till the focus\n     * is moved to next element.\n     */\n    setTimeout(() => {\n      if (!this.adapter_.isFocusInsideList()) {\n        this.setTabindexToFirstSelectedItem_();\n      }\n    }, 0);\n  }\n\n  /**\n   * Key handler for the list.\n   * @param {Event} evt\n   * @param {boolean} isRootListItem\n   * @param {number} listItemIndex\n   */\n  handleKeydown(evt, isRootListItem, listItemIndex) {\n    const arrowLeft = evt.key === 'ArrowLeft' || evt.keyCode === 37;\n    const arrowUp = evt.key === 'ArrowUp' || evt.keyCode === 38;\n    const arrowRight = evt.key === 'ArrowRight' || evt.keyCode === 39;\n    const arrowDown = evt.key === 'ArrowDown' || evt.keyCode === 40;\n    const isHome = evt.key === 'Home' || evt.keyCode === 36;\n    const isEnd = evt.key === 'End' || evt.keyCode === 35;\n    const isEnter = evt.key === 'Enter' || evt.keyCode === 13;\n    const isSpace = evt.key === 'Space' || evt.keyCode === 32;\n\n    let currentIndex = this.adapter_.getFocusedElementIndex();\n    let nextIndex = -1;\n    if (currentIndex === -1) {\n      currentIndex = listItemIndex;\n      if (currentIndex < 0) {\n        // If this event doesn't have a mdc-list-item ancestor from the\n        // current list (not from a sublist), return early.\n        return;\n      }\n    }\n\n    if ((this.isVertical_ && arrowDown) || (!this.isVertical_ && arrowRight)) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusNextElement(currentIndex);\n    } else if ((this.isVertical_ && arrowUp) || (!this.isVertical_ && arrowLeft)) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusPrevElement(currentIndex);\n    } else if (isHome) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusFirstElement();\n    } else if (isEnd) {\n      this.preventDefaultEvent_(evt);\n      nextIndex = this.focusLastElement();\n    } else if (isEnter || isSpace) {\n      if (isRootListItem) {\n        // Return early if enter key is pressed on anchor element which triggers synthetic MouseEvent event.\n        if (evt.target.tagName === 'A' && isEnter) return;\n        this.preventDefaultEvent_(evt);\n\n        if (this.isSelectableList_()) {\n          this.setSelectedIndexOnAction_(currentIndex);\n        }\n\n        this.adapter_.notifyAction(currentIndex);\n      }\n    }\n\n    this.focusedItemIndex_ = currentIndex;\n\n    if (nextIndex >= 0) {\n      this.setTabindexAtIndex_(nextIndex);\n      this.focusedItemIndex_ = nextIndex;\n    }\n  }\n\n  /**\n   * Click handler for the list.\n   * @param {number} index\n   * @param {boolean} toggleCheckbox\n   */\n  handleClick(index, toggleCheckbox) {\n    if (index === -1) return;\n\n    if (this.isSelectableList_()) {\n      this.setSelectedIndexOnAction_(index, toggleCheckbox);\n    }\n\n    this.adapter_.notifyAction(index);\n\n    this.setTabindexAtIndex_(index);\n    this.focusedItemIndex_ = index;\n  }\n\n  /**\n   * Ensures that preventDefault is only called if the containing element doesn't\n   * consume the event, and it will cause an unintended scroll.\n   * @param {Event} evt\n   * @private\n   */\n  preventDefaultEvent_(evt) {\n    const tagName = `${evt.target.tagName}`.toLowerCase();\n    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {\n      evt.preventDefault();\n    }\n  }\n\n  /**\n   * Focuses the next element on the list.\n   * @param {number} index\n   * @return {number}\n   */\n  focusNextElement(index) {\n    const count = this.adapter_.getListItemCount();\n    let nextIndex = index + 1;\n    if (nextIndex >= count) {\n      if (this.wrapFocus_) {\n        nextIndex = 0;\n      } else {\n        // Return early because last item is already focused.\n        return index;\n      }\n    }\n    this.adapter_.focusItemAtIndex(nextIndex);\n\n    return nextIndex;\n  }\n\n  /**\n   * Focuses the previous element on the list.\n   * @param {number} index\n   * @return {number}\n   */\n  focusPrevElement(index) {\n    let prevIndex = index - 1;\n    if (prevIndex < 0) {\n      if (this.wrapFocus_) {\n        prevIndex = this.adapter_.getListItemCount() - 1;\n      } else {\n        // Return early because first item is already focused.\n        return index;\n      }\n    }\n    this.adapter_.focusItemAtIndex(prevIndex);\n\n    return prevIndex;\n  }\n\n  /**\n   * @return {number}\n   */\n  focusFirstElement() {\n    this.adapter_.focusItemAtIndex(0);\n    return 0;\n  }\n\n  /**\n   * @return {number}\n   */\n  focusLastElement() {\n    const lastIndex = this.adapter_.getListItemCount() - 1;\n    this.adapter_.focusItemAtIndex(lastIndex);\n    return lastIndex;\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  setSingleSelectionAtIndex_(index) {\n    let selectedClassName = cssClasses.LIST_ITEM_SELECTED_CLASS;\n    if (this.useActivatedClass_) {\n      selectedClassName = cssClasses.LIST_ITEM_ACTIVATED_CLASS;\n    }\n\n    if (this.selectedIndex_ >= 0 && this.selectedIndex_ !== index) {\n      this.adapter_.removeClassForElementIndex(this.selectedIndex_, selectedClassName);\n      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_SELECTED, 'false');\n    }\n\n    this.adapter_.addClassForElementIndex(index, selectedClassName);\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_SELECTED, 'true');\n\n    this.selectedIndex_ = index;\n  }\n\n  /**\n   * Toggles radio at give index. Radio doesn't change the checked state if it is already checked.\n   * @param {number} index\n   * @private\n   */\n  setRadioAtIndex_(index) {\n    this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, true);\n\n    if (this.selectedIndex_ >= 0) {\n      this.adapter_.setAttributeForElementIndex(this.selectedIndex_, strings.ARIA_CHECKED, 'false');\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, 'true');\n\n    this.selectedIndex_ = index;\n  }\n\n  /**\n   * @param {!Array<number>} index\n   * @private\n   */\n  setCheckboxAtIndex_(index) {\n    for (let i = 0; i < this.adapter_.getListItemCount(); i++) {\n      let isChecked = false;\n      if (index.indexOf(i) >= 0) {\n        isChecked = true;\n      }\n\n      this.adapter_.setCheckedCheckboxOrRadioAtIndex(i, isChecked);\n      this.adapter_.setAttributeForElementIndex(i, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n    }\n\n    this.selectedIndex_ = index;\n  }\n\n  /**\n   * @param {number} index\n   * @private\n   */\n  setTabindexAtIndex_(index) {\n    if (this.focusedItemIndex_ === -1 && index !== 0) {\n      // If no list item was selected set first list item's tabindex to -1.\n      // Generally, tabindex is set to 0 on first list item of list that has no preselected items.\n      this.adapter_.setAttributeForElementIndex(0, 'tabindex', -1);\n    } else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {\n      this.adapter_.setAttributeForElementIndex(this.focusedItemIndex_, 'tabindex', -1);\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, 'tabindex', 0);\n  }\n\n  /**\n   * @return {boolean} Return true if it is single selectin list, checkbox list or radio list.\n   * @private\n   */\n  isSelectableList_() {\n    return this.isSingleSelectionList_ || this.isCheckboxList_ || this.isRadioList_;\n  }\n\n  /** @private */\n  setTabindexToFirstSelectedItem_() {\n    let targetIndex = 0;\n\n    if (this.isSelectableList_()) {\n      if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== -1) {\n        targetIndex = this.selectedIndex_;\n      } else if (this.selectedIndex_ instanceof Array && this.selectedIndex_.length > 0) {\n        targetIndex = this.selectedIndex_.reduce((currentIndex, minIndex) => Math.min(currentIndex, minIndex));\n      }\n    }\n\n    this.setTabindexAtIndex_(targetIndex);\n  }\n\n  /**\n   * @param {!Index} index\n   * @return {boolean}\n   * @private\n   */\n  isIndexValid_(index) {\n    if (index instanceof Array) {\n      if (!this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n      }\n\n      if (index.length === 0) {\n        return true;\n      } else {\n        return index.some((i) => this.isIndexInRange_(i));\n      }\n    } else if (typeof index === 'number') {\n      if (this.isCheckboxList_) {\n        throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);\n      }\n      return this.isIndexInRange_(index);\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @return {boolean}\n   * @private\n   */\n  isIndexInRange_(index) {\n    const listSize = this.adapter_.getListItemCount();\n    return index >= 0 && index < listSize;\n  }\n\n  /**\n   * @param {number} index\n   * @param {boolean=} toggleCheckbox\n   * @private\n   */\n  setSelectedIndexOnAction_(index, toggleCheckbox = true) {\n    if (this.isCheckboxList_) {\n      this.toggleCheckboxAtIndex_(index, toggleCheckbox);\n    } else {\n      this.setSelectedIndex(index);\n    }\n  }\n\n  /**\n   * @param {number} index\n   * @param {boolean} toggleCheckbox\n   * @private\n   */\n  toggleCheckboxAtIndex_(index, toggleCheckbox) {\n    let isChecked = this.adapter_.isCheckboxCheckedAtIndex(index);\n\n    if (toggleCheckbox) {\n      isChecked = !isChecked;\n      this.adapter_.setCheckedCheckboxOrRadioAtIndex(index, isChecked);\n    }\n\n    this.adapter_.setAttributeForElementIndex(index, strings.ARIA_CHECKED, isChecked ? 'true' : 'false');\n\n    // If none of the checkbox items are selected and selectedIndex is not initialized then provide a default value.\n    if (this.selectedIndex_ === -1) {\n      this.selectedIndex_ = [];\n    }\n\n    if (isChecked) {\n      this.selectedIndex_.push(index);\n    } else {\n      this.selectedIndex_ = this.selectedIndex_.filter((i) => i !== index);\n    }\n  }\n}\n\nexport default MDCListFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport MDCListFoundation from './foundation';\nimport MDCListAdapter from './adapter';\nimport {matches} from '@material/dom/ponyfill';\nimport {cssClasses, strings, Index} from './constants'; // eslint-disable-line no-unused-vars\n\n/**\n * @extends MDCComponent<!MDCListFoundation>\n */\nclass MDCList extends MDCComponent {\n  /** @param {...?} args */\n  constructor(...args) {\n    super(...args);\n    /** @private {!Function} */\n    this.handleKeydown_;\n    /** @private {!Function} */\n    this.handleClick_;\n    /** @private {!Function} */\n    this.focusInEventListener_;\n    /** @private {!Function} */\n    this.focusOutEventListener_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCList}\n   */\n  static attachTo(root) {\n    return new MDCList(root);\n  }\n\n  destroy() {\n    this.root_.removeEventListener('keydown', this.handleKeydown_);\n    this.root_.removeEventListener('click', this.handleClick_);\n    this.root_.removeEventListener('focusin', this.focusInEventListener_);\n    this.root_.removeEventListener('focusout', this.focusOutEventListener_);\n  }\n\n  initialSyncWithDOM() {\n    this.handleClick_ = this.handleClickEvent_.bind(this);\n    this.handleKeydown_ = this.handleKeydownEvent_.bind(this);\n    this.focusInEventListener_ = this.handleFocusInEvent_.bind(this);\n    this.focusOutEventListener_ = this.handleFocusOutEvent_.bind(this);\n    this.root_.addEventListener('keydown', this.handleKeydown_);\n    this.root_.addEventListener('focusin', this.focusInEventListener_);\n    this.root_.addEventListener('focusout', this.focusOutEventListener_);\n    this.root_.addEventListener('click', this.handleClick_);\n    this.layout();\n    this.initializeListType();\n  }\n\n  layout() {\n    const direction = this.root_.getAttribute(strings.ARIA_ORIENTATION);\n    this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL;\n\n    // List items need to have at least tabindex=-1 to be focusable.\n    [].slice.call(this.root_.querySelectorAll('.mdc-list-item:not([tabindex])'))\n      .forEach((ele) => {\n        ele.setAttribute('tabindex', -1);\n      });\n\n    // Child button/a elements are not tabbable until the list item is focused.\n    [].slice.call(this.root_.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS))\n      .forEach((ele) => ele.setAttribute('tabindex', -1));\n\n    this.foundation_.layout();\n  }\n\n  /**\n   * Used to figure out which list item this event is targetting. Or returns -1 if\n   * there is no list item\n   * @param {Event} evt\n   * @private\n   */\n  getListItemIndex_(evt) {\n    let eventTarget = /** @type {HTMLElement} */ (evt.target);\n    let index = -1;\n\n    // Find the first ancestor that is a list item or the list.\n    while (!eventTarget.classList.contains(cssClasses.LIST_ITEM_CLASS)\n    && !eventTarget.classList.contains(cssClasses.ROOT)) {\n      eventTarget = eventTarget.parentElement;\n    }\n\n    // Get the index of the element if it is a list item.\n    if (eventTarget.classList.contains(cssClasses.LIST_ITEM_CLASS)) {\n      index = this.listElements.indexOf(eventTarget);\n    }\n\n    return index;\n  }\n\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleFocusInEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusIn(evt, index);\n  }\n\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleFocusOutEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n    this.foundation_.handleFocusOut(evt, index);\n  }\n\n  /**\n   * Used to figure out which element was focused when keydown event occurred before sending the event to the\n   * foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleKeydownEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n\n    if (index >= 0) {\n      this.foundation_.handleKeydown(evt, evt.target.classList.contains(cssClasses.LIST_ITEM_CLASS), index);\n    }\n  }\n\n  /**\n   * Used to figure out which element was clicked before sending the event to the foundation.\n   * @param {Event} evt\n   * @private\n   */\n  handleClickEvent_(evt) {\n    const index = this.getListItemIndex_(evt);\n\n    // Toggle the checkbox only if it's not the target of the event, or the checkbox will have 2 change events.\n    const toggleCheckbox = !matches(/** @type {!Element} */ (evt.target), strings.CHECKBOX_RADIO_SELECTOR);\n    this.foundation_.handleClick(index, toggleCheckbox);\n  }\n\n  /**\n   * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.\n   */\n  initializeListType() {\n    const checkboxListItems = this.root_.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);\n    const singleSelectedListItem = this.root_.querySelector(`.${cssClasses.LIST_ITEM_ACTIVATED_CLASS},\n        .${cssClasses.LIST_ITEM_SELECTED_CLASS}`);\n    const radioSelectedListItem = this.root_.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);\n\n    if (checkboxListItems.length) {\n      const preselectedItems = this.root_.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);\n      this.selectedIndex = [].map.call(preselectedItems, (listItem) => this.listElements.indexOf(listItem));\n    } else if (singleSelectedListItem) {\n      if (singleSelectedListItem.classList.contains(cssClasses.LIST_ITEM_ACTIVATED_CLASS)) {\n        this.foundation_.setUseActivatedClass(true);\n      }\n\n      this.singleSelection = true;\n      this.selectedIndex = this.listElements.indexOf(singleSelectedListItem);\n    } else if (radioSelectedListItem) {\n      this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);\n    }\n  }\n\n  /** @param {boolean} value */\n  set vertical(value) {\n    this.foundation_.setVerticalOrientation(value);\n  }\n\n  /** @return Array<!Element>*/\n  get listElements() {\n    return [].slice.call(this.root_.querySelectorAll(strings.ENABLED_ITEMS_SELECTOR));\n  }\n\n  /** @param {boolean} value */\n  set wrapFocus(value) {\n    this.foundation_.setWrapFocus(value);\n  }\n\n  /** @param {boolean} isSingleSelectionList */\n  set singleSelection(isSingleSelectionList) {\n    this.foundation_.setSingleSelection(isSingleSelectionList);\n  }\n\n  /** @return {!Index} */\n  get selectedIndex() {\n    return this.foundation_.getSelectedIndex();\n  }\n\n  /** @param {!Index} index */\n  set selectedIndex(index) {\n    this.foundation_.setSelectedIndex(index);\n  }\n\n  /** @return {!MDCListFoundation} */\n  getDefaultFoundation() {\n    return new MDCListFoundation(/** @type {!MDCListAdapter} */ (Object.assign({\n      getListItemCount: () => this.listElements.length,\n      getFocusedElementIndex: () => this.listElements.indexOf(document.activeElement),\n      setAttributeForElementIndex: (index, attr, value) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.setAttribute(attr, value);\n        }\n      },\n      removeAttributeForElementIndex: (index, attr) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.removeAttribute(attr);\n        }\n      },\n      addClassForElementIndex: (index, className) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.classList.add(className);\n        }\n      },\n      removeClassForElementIndex: (index, className) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.classList.remove(className);\n        }\n      },\n      focusItemAtIndex: (index) => {\n        const element = this.listElements[index];\n        if (element) {\n          element.focus();\n        }\n      },\n      setTabIndexForListItemChildren: (listItemIndex, tabIndexValue) => {\n        const element = this.listElements[listItemIndex];\n        const listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));\n        listItemChildren.forEach((ele) => ele.setAttribute('tabindex', tabIndexValue));\n      },\n      hasCheckboxAtIndex: (index) => {\n        const listItem = this.listElements[index];\n        return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);\n      },\n      hasRadioAtIndex: (index) => {\n        const listItem = this.listElements[index];\n        return !!listItem.querySelector(strings.RADIO_SELECTOR);\n      },\n      isCheckboxCheckedAtIndex: (index) => {\n        const listItem = this.listElements[index];\n        const toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);\n        return toggleEl.checked;\n      },\n      setCheckedCheckboxOrRadioAtIndex: (index, isChecked) => {\n        const listItem = this.listElements[index];\n        const toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);\n        toggleEl.checked = isChecked;\n\n        const event = document.createEvent('Event');\n        event.initEvent('change', true, true);\n        toggleEl.dispatchEvent(event);\n      },\n      notifyAction: (index) => {\n        this.emit(strings.ACTION_EVENT, index, /** shouldBubble */ true);\n      },\n      isFocusInsideList: () => {\n        return this.root_.contains(document.activeElement);\n      },\n    })));\n  }\n}\n\nexport {MDCList, MDCListFoundation};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport createFocusTrap from 'focus-trap';\n\n/**\n * @param {!Element} surfaceEl\n * @param {!Function} focusTrapFactory\n * @return {!FocusTrapInstance}\n */\nfunction createFocusTrapInstance(surfaceEl, focusTrapFactory = createFocusTrap) {\n  return focusTrapFactory(surfaceEl, {\n    clickOutsideDeactivates: true,\n    initialFocus: false, // Navigation drawer handles focusing on active nav item.\n    escapeDeactivates: false, // Navigation drawer handles ESC.\n    returnFocusOnDeactivate: false, // Navigation drawer handles restore focus.\n  });\n}\n\nexport {createFocusTrapInstance};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport MDCComponent from '@material/base/component';\nimport MDCDismissibleDrawerFoundation from './dismissible/foundation';\nimport MDCModalDrawerFoundation from './modal/foundation';\nimport MDCDrawerAdapter from './adapter';\nimport {MDCList} from '@material/list/index';\nimport MDCListFoundation from '@material/list/foundation';\nimport {strings} from './constants';\nimport * as util from './util';\nimport createFocusTrap from 'focus-trap';\n\n/**\n * @extends {MDCComponent<!MDCDismissibleDrawerFoundation>}\n * @final\n */\nclass MDCDrawer extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n\n    /** @private {!Element} */\n    this.previousFocus_;\n\n    /** @private {!Function} */\n    this.handleKeydown_;\n\n    /** @private {!Function} */\n    this.handleTransitionEnd_;\n\n    /** @private {!Function} */\n    this.focusTrapFactory_;\n\n    /** @private {!FocusTrapInstance} */\n    this.focusTrap_;\n\n    /** @private {?Element} */\n    this.scrim_;\n\n    /** @private {?Function} */\n    this.handleScrimClick_;\n\n    /** @private {?MDCList} */\n    this.list_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCDrawer}\n   */\n  static attachTo(root) {\n    return new MDCDrawer(root);\n  }\n\n  /**\n   * Returns true if drawer is in the open position.\n   * @return {boolean}\n   */\n  get open() {\n    return this.foundation_.isOpen();\n  }\n\n  /**\n   * Toggles the drawer open and closed.\n   * @param {boolean} isOpen\n   */\n  set open(isOpen) {\n    if (isOpen) {\n      this.foundation_.open();\n    } else {\n      this.foundation_.close();\n    }\n  }\n\n  initialize(\n    focusTrapFactory = createFocusTrap,\n    listFactory = (el) => new MDCList(el)) {\n    const listEl = /** @type {!Element} */ (this.root_.querySelector(`.${MDCListFoundation.cssClasses.ROOT}`));\n    if (listEl) {\n      this.list_ = listFactory(listEl);\n      this.list_.wrapFocus = true;\n    }\n    this.focusTrapFactory_ = focusTrapFactory;\n  }\n\n  initialSyncWithDOM() {\n    const {MODAL} = MDCDismissibleDrawerFoundation.cssClasses;\n\n    if (this.root_.classList.contains(MODAL)) {\n      const {SCRIM_SELECTOR} = MDCDismissibleDrawerFoundation.strings;\n      this.scrim_ = /** @type {!Element} */ (this.root_.parentNode.querySelector(SCRIM_SELECTOR));\n      this.handleScrimClick_ = () => /** @type {!MDCModalDrawerFoundation} */ (this.foundation_).handleScrimClick();\n      this.scrim_.addEventListener('click', this.handleScrimClick_);\n      this.focusTrap_ = util.createFocusTrapInstance(this.root_, this.focusTrapFactory_);\n    }\n\n    this.handleKeydown_ = (evt) => this.foundation_.handleKeydown(evt);\n    this.handleTransitionEnd_ = (evt) => this.foundation_.handleTransitionEnd(evt);\n\n    this.root_.addEventListener('keydown', this.handleKeydown_);\n    this.root_.addEventListener('transitionend', this.handleTransitionEnd_);\n  }\n\n  destroy() {\n    this.root_.removeEventListener('keydown', this.handleKeydown_);\n    this.root_.removeEventListener('transitionend', this.handleTransitionEnd_);\n\n    if (this.list_) {\n      this.list_.destroy();\n    }\n\n    const {MODAL} = MDCDismissibleDrawerFoundation.cssClasses;\n    if (this.root_.classList.contains(MODAL)) {\n      this.scrim_.removeEventListener('click', /** @type {!Function} */ (this.handleScrimClick_));\n      // Ensure drawer is closed to hide scrim and release focus\n      this.open = false;\n    }\n  }\n\n  getDefaultFoundation() {\n    /** @type {!MDCDrawerAdapter} */\n    const adapter = /** @type {!MDCDrawerAdapter} */ (Object.assign({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      elementHasClass: (element, className) => element.classList.contains(className),\n      saveFocus: () => {\n        this.previousFocus_ = document.activeElement;\n      },\n      restoreFocus: () => {\n        const previousFocus = this.previousFocus_ && this.previousFocus_.focus;\n        if (this.root_.contains(document.activeElement) && previousFocus) {\n          this.previousFocus_.focus();\n        }\n      },\n      focusActiveNavigationItem: () => {\n        const activeNavItemEl = this.root_.querySelector(`.${MDCListFoundation.cssClasses.LIST_ITEM_ACTIVATED_CLASS}`);\n        if (activeNavItemEl) {\n          activeNavItemEl.focus();\n        }\n      },\n      notifyClose: () => this.emit(strings.CLOSE_EVENT, {}, true /* shouldBubble */),\n      notifyOpen: () => this.emit(strings.OPEN_EVENT, {}, true /* shouldBubble */),\n      trapFocus: () => this.focusTrap_.activate(),\n      releaseFocus: () => this.focusTrap_.deactivate(),\n    }));\n\n    const {DISMISSIBLE, MODAL} = MDCDismissibleDrawerFoundation.cssClasses;\n    if (this.root_.classList.contains(DISMISSIBLE)) {\n      return new MDCDismissibleDrawerFoundation(adapter);\n    } else if (this.root_.classList.contains(MODAL)) {\n      return new MDCModalDrawerFoundation(adapter);\n    } else {\n      throw new Error(\n        `MDCDrawer: Failed to instantiate component. Supported variants are ${DISMISSIBLE} and ${MODAL}.`);\n    }\n  }\n}\n\nexport {MDCDrawer, MDCDismissibleDrawerFoundation, MDCModalDrawerFoundation, util};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Text Field Helper Text.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the TextField helper text into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldHelperTextAdapter {\n  /**\n   * Adds a class to the helper text element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the helper text element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns whether or not the helper text element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Sets an attribute with a given value on the helper text element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setAttr(attr, value) {}\n\n  /**\n   * Removes an attribute from the helper text element.\n   * @param {string} attr\n   */\n  removeAttr(attr) {}\n\n  /**\n   * Sets the text content for the helper text element.\n   * @param {string} content\n   */\n  setContent(content) {}\n}\n\nexport default MDCTextFieldHelperTextAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-text-field-helper-text',\n  HELPER_TEXT_PERSISTENT: 'mdc-text-field-helper-text--persistent',\n  HELPER_TEXT_VALIDATION_MSG: 'mdc-text-field-helper-text--validation-msg',\n};\n\n/** @enum {string} */\nconst strings = {\n  ARIA_HIDDEN: 'aria-hidden',\n  ROLE: 'role',\n  ROOT_SELECTOR: `.${cssClasses.ROOT}`,\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCTextFieldHelperTextAdapter from './adapter';\nimport {cssClasses, strings} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldHelperTextAdapter>}\n * @final\n */\nclass MDCTextFieldHelperTextFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCTextFieldHelperTextAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldHelperTextAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldHelperTextAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      setAttr: () => {},\n      removeAttr: () => {},\n      setContent: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldHelperTextAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCTextFieldHelperTextFoundation.defaultAdapter, adapter));\n  }\n\n  /**\n   * Sets the content of the helper text field.\n   * @param {string} content\n   */\n  setContent(content) {\n    this.adapter_.setContent(content);\n  }\n\n  /** @param {boolean} isPersistent Sets the persistency of the helper text. */\n  setPersistent(isPersistent) {\n    if (isPersistent) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    }\n  }\n\n  /**\n   * @param {boolean} isValidation True to make the helper text act as an\n   *   error validation message.\n   */\n  setValidation(isValidation) {\n    if (isValidation) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    }\n  }\n\n  /** Makes the helper text visible to the screen reader. */\n  showToScreenReader() {\n    this.adapter_.removeAttr(strings.ARIA_HIDDEN);\n  }\n\n  /**\n   * Sets the validity of the helper text based on the input validity.\n   * @param {boolean} inputIsValid\n   */\n  setValidity(inputIsValid) {\n    const helperTextIsPersistent = this.adapter_.hasClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    const helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    const validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;\n\n    if (validationMsgNeedsDisplay) {\n      this.adapter_.setAttr(strings.ROLE, 'alert');\n    } else {\n      this.adapter_.removeAttr(strings.ROLE);\n    }\n\n    if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {\n      this.hide_();\n    }\n  }\n\n  /**\n   * Hides the help text from screen readers.\n   * @private\n   */\n  hide_() {\n    this.adapter_.setAttr(strings.ARIA_HIDDEN, 'true');\n  }\n}\n\nexport default MDCTextFieldHelperTextFoundation;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCTextFieldHelperTextAdapter from './adapter';\nimport MDCTextFieldHelperTextFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCTextFieldHelperTextFoundation>}\n * @final\n */\nclass MDCTextFieldHelperText extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCTextFieldHelperText}\n   */\n  static attachTo(root) {\n    return new MDCTextFieldHelperText(root);\n  }\n\n  /**\n   * @return {!MDCTextFieldHelperTextFoundation}\n   */\n  get foundation() {\n    return this.foundation_;\n  }\n\n  /**\n   * @return {!MDCTextFieldHelperTextFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCTextFieldHelperTextFoundation(/** @type {!MDCTextFieldHelperTextAdapter} */ (Object.assign({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      setAttr: (attr, value) => this.root_.setAttribute(attr, value),\n      removeAttr: (attr) => this.root_.removeAttribute(attr),\n      setContent: (content) => {\n        this.root_.textContent = content;\n      },\n    })));\n  }\n}\n\nexport {MDCTextFieldHelperText, MDCTextFieldHelperTextFoundation};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Icon Toggle. Provides an interface for managing\n * - classes\n * - dom\n * - inner text\n * - event handlers\n * - event dispatch\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\n\nclass MDCIconToggleAdapter {\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /**\n   * @param {string} type\n   * @param {!EventListener} handler\n   */\n  registerInteractionHandler(type, handler) {}\n\n  /**\n   * @param {string} type\n   * @param {!EventListener} handler\n   */\n  deregisterInteractionHandler(type, handler) {}\n\n  /** @param {string} text */\n  setText(text) {}\n\n  /** @return {number} */\n  getTabIndex() {}\n\n  /** @param {number} tabIndex */\n  setTabIndex(tabIndex) {}\n\n  /**\n   * @param {string} name\n   * @return {string}\n   */\n  getAttr(name) {}\n\n  /**\n   * @param {string} name\n   * @param {string} value\n   */\n  setAttr(name, value) {}\n\n  /** @param {string} name */\n  rmAttr(name) {}\n\n  /** @param {!IconToggleEvent} evtData */\n  notifyChange(evtData) {}\n}\n\n/**\n * @typedef {{\n *   isOn: boolean,\n * }}\n */\nlet IconToggleEvent;\n\nexport {MDCIconToggleAdapter, IconToggleEvent};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-icon-toggle',\n  DISABLED: 'mdc-icon-toggle--disabled',\n};\n\n/** @enum {string} */\nconst strings = {\n  DATA_TOGGLE_ON: 'data-toggle-on',\n  DATA_TOGGLE_OFF: 'data-toggle-off',\n  ARIA_PRESSED: 'aria-pressed',\n  ARIA_DISABLED: 'aria-disabled',\n  ARIA_LABEL: 'aria-label',\n  CHANGE_EVENT: 'MDCIconToggle:change',\n};\n\nexport {cssClasses, strings};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\n/* eslint-disable no-unused-vars */\nimport {MDCIconToggleAdapter, IconToggleEvent} from './adapter';\nimport {cssClasses, strings} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCIconToggleAdapter>}\n */\nclass MDCIconToggleFoundation extends MDCFoundation {\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get strings() {\n    return strings;\n  }\n\n  static get defaultAdapter() {\n    return {\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      registerInteractionHandler: (/* type: string, handler: EventListener */) => {},\n      deregisterInteractionHandler: (/* type: string, handler: EventListener */) => {},\n      setText: (/* text: string */) => {},\n      getTabIndex: () => /* number */ 0,\n      setTabIndex: (/* tabIndex: number */) => {},\n      getAttr: (/* name: string */) => /* string */ '',\n      setAttr: (/* name: string, value: string */) => {},\n      rmAttr: (/* name: string */) => {},\n      notifyChange: (/* evtData: IconToggleEvent */) => {},\n    };\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCIconToggleFoundation.defaultAdapter, adapter));\n\n    /** @private {boolean} */\n    this.on_ = false;\n\n    /** @private {boolean} */\n    this.disabled_ = false;\n\n    /** @private {number} */\n    this.savedTabIndex_ = -1;\n\n    /** @private {?IconToggleState} */\n    this.toggleOnData_ = null;\n\n    /** @private {?IconToggleState} */\n    this.toggleOffData_ = null;\n\n    this.clickHandler_ = /** @private {!EventListener} */ (\n      () => this.toggleFromEvt_());\n\n    /** @private {boolean} */\n    this.isHandlingKeydown_ = false;\n\n    this.keydownHandler_ = /** @private {!EventListener} */ ((/** @type {!KeyboardKey} */ evt) => {\n      if (isSpace(evt)) {\n        this.isHandlingKeydown_ = true;\n        return evt.preventDefault();\n      }\n    });\n\n    this.keyupHandler_ = /** @private {!EventListener} */ ((/** @type {!KeyboardKey} */ evt) => {\n      if (isSpace(evt)) {\n        this.isHandlingKeydown_ = false;\n        this.toggleFromEvt_();\n      }\n    });\n  }\n\n  init() {\n    this.refreshToggleData();\n    this.savedTabIndex_ = this.adapter_.getTabIndex();\n    this.adapter_.registerInteractionHandler('click', this.clickHandler_);\n    this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);\n    this.adapter_.registerInteractionHandler('keyup', this.keyupHandler_);\n  }\n\n  refreshToggleData() {\n    const {DATA_TOGGLE_ON, DATA_TOGGLE_OFF} = MDCIconToggleFoundation.strings;\n    this.toggleOnData_ = this.parseJsonDataAttr_(DATA_TOGGLE_ON);\n    this.toggleOffData_ = this.parseJsonDataAttr_(DATA_TOGGLE_OFF);\n  }\n\n  destroy() {\n    this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);\n    this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);\n    this.adapter_.deregisterInteractionHandler('keyup', this.keyupHandler_);\n  }\n\n  /** @private */\n  toggleFromEvt_() {\n    this.toggle();\n    const {on_: isOn} = this;\n    this.adapter_.notifyChange(/** @type {!IconToggleEvent} */ ({isOn}));\n  }\n\n  /** @return {boolean} */\n  isOn() {\n    return this.on_;\n  }\n\n  /** @param {boolean=} isOn */\n  toggle(isOn = !this.on_) {\n    this.on_ = isOn;\n\n    const {ARIA_LABEL, ARIA_PRESSED} = MDCIconToggleFoundation.strings;\n\n    if (this.on_) {\n      this.adapter_.setAttr(ARIA_PRESSED, 'true');\n    } else {\n      this.adapter_.setAttr(ARIA_PRESSED, 'false');\n    }\n\n    const {cssClass: classToRemove} =\n        this.on_ ? this.toggleOffData_ : this.toggleOnData_;\n\n    if (classToRemove) {\n      this.adapter_.removeClass(classToRemove);\n    }\n\n    const {content, label, cssClass} = this.on_ ? this.toggleOnData_ : this.toggleOffData_;\n\n    if (cssClass) {\n      this.adapter_.addClass(cssClass);\n    }\n    if (content) {\n      this.adapter_.setText(content);\n    }\n    if (label) {\n      this.adapter_.setAttr(ARIA_LABEL, label);\n    }\n  }\n\n  /**\n   * @param {string} dataAttr\n   * @return {!IconToggleState}\n   */\n  parseJsonDataAttr_(dataAttr) {\n    const val = this.adapter_.getAttr(dataAttr);\n    if (!val) {\n      return {};\n    }\n    return /** @type {!IconToggleState} */ (JSON.parse(val));\n  }\n\n  /** @return {boolean} */\n  isDisabled() {\n    return this.disabled_;\n  }\n\n  /** @param {boolean} isDisabled */\n  setDisabled(isDisabled) {\n    this.disabled_ = isDisabled;\n\n    const {DISABLED} = MDCIconToggleFoundation.cssClasses;\n    const {ARIA_DISABLED} = MDCIconToggleFoundation.strings;\n\n    if (this.disabled_) {\n      this.savedTabIndex_ = this.adapter_.getTabIndex();\n      this.adapter_.setTabIndex(-1);\n      this.adapter_.setAttr(ARIA_DISABLED, 'true');\n      this.adapter_.addClass(DISABLED);\n    } else {\n      this.adapter_.setTabIndex(this.savedTabIndex_);\n      this.adapter_.rmAttr(ARIA_DISABLED);\n      this.adapter_.removeClass(DISABLED);\n    }\n  }\n\n  /** @return {boolean} */\n  isKeyboardActivated() {\n    return this.isHandlingKeydown_;\n  }\n}\n\n/**\n * @typedef {{\n *   key: string,\n *   keyCode: number\n * }}\n */\nlet KeyboardKey;\n\n/**\n * @param {!KeyboardKey} keyboardKey\n * @return {boolean}\n */\nfunction isSpace(keyboardKey) {\n  return keyboardKey.key === 'Space' || keyboardKey.keyCode === 32;\n}\n\n\n/** @record */\nclass IconToggleState {}\n\n/**\n * The aria-label value of the icon toggle, or undefined if there is no aria-label.\n * @export {string|undefined}\n */\nIconToggleState.prototype.label;\n\n/**\n * The text for the icon toggle, or undefined if there is no text.\n * @export {string|undefined}\n */\nIconToggleState.prototype.content;\n\n/**\n * The CSS class to add to the icon toggle, or undefined if there is no CSS class.\n * @export {string|undefined}\n */\nIconToggleState.prototype.cssClass;\n\nexport default MDCIconToggleFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport MDCIconToggleFoundation from './foundation';\nimport {MDCRipple, MDCRippleFoundation} from '@material/ripple/index';\n\n/**\n * @extends {MDCComponent<!MDCIconToggleFoundation>}\n */\nclass MDCIconToggle extends MDCComponent {\n  static attachTo(root) {\n    return new MDCIconToggle(root);\n  }\n\n  constructor(...args) {\n    super(...args);\n\n    /** @private {!MDCRipple} */\n    this.ripple_ = this.initRipple_();\n  }\n\n  /** @return {!Element} */\n  get iconEl_() {\n    const {'iconInnerSelector': sel} = this.root_.dataset;\n    return sel ?\n      /** @type {!Element} */ (this.root_.querySelector(sel)) : this.root_;\n  }\n\n  /**\n   * @return {!MDCRipple}\n   * @private\n   */\n  initRipple_() {\n    const adapter = Object.assign(MDCRipple.createAdapter(this), {\n      isUnbounded: () => true,\n      isSurfaceActive: () => this.foundation_.isKeyboardActivated(),\n    });\n    const foundation = new MDCRippleFoundation(adapter);\n    return new MDCRipple(this.root_, foundation);\n  }\n\n  destroy() {\n    this.ripple_.destroy();\n    super.destroy();\n  }\n\n  /** @return {!MDCIconToggleFoundation} */\n  getDefaultFoundation() {\n    return new MDCIconToggleFoundation({\n      addClass: (className) => this.iconEl_.classList.add(className),\n      removeClass: (className) => this.iconEl_.classList.remove(className),\n      registerInteractionHandler: (type, handler) => this.root_.addEventListener(type, handler),\n      deregisterInteractionHandler: (type, handler) => this.root_.removeEventListener(type, handler),\n      setText: (text) => this.iconEl_.textContent = text,\n      getTabIndex: () => /* number */ this.root_.tabIndex,\n      setTabIndex: (tabIndex) => this.root_.tabIndex = tabIndex,\n      getAttr: (name, value) => this.root_.getAttribute(name, value),\n      setAttr: (name, value) => this.root_.setAttribute(name, value),\n      rmAttr: (name) => this.root_.removeAttribute(name),\n      notifyChange: (evtData) => this.emit(MDCIconToggleFoundation.strings.CHANGE_EVENT, evtData),\n    });\n  }\n\n  initialSyncWithDOM() {\n    this.on = this.root_.getAttribute(MDCIconToggleFoundation.strings.ARIA_PRESSED) === 'true';\n    this.disabled = this.root_.getAttribute(MDCIconToggleFoundation.strings.ARIA_DISABLED) === 'true';\n  }\n\n  /** @return {!MDCRipple} */\n  get ripple() {\n    return this.ripple_;\n  }\n\n  /** @return {boolean} */\n  get on() {\n    return this.foundation_.isOn();\n  }\n\n  /** @param {boolean} isOn */\n  set on(isOn) {\n    this.foundation_.toggle(isOn);\n  }\n\n  /** @return {boolean} */\n  get disabled() {\n    return this.foundation_.isDisabled();\n  }\n\n  /** @param {boolean} isDisabled */\n  set disabled(isDisabled) {\n    this.foundation_.setDisabled(isDisabled);\n  }\n\n  refreshToggleData() {\n    this.foundation_.refreshToggleData();\n  }\n}\n\nexport {MDCIconToggle, MDCIconToggleFoundation};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint-disable no-unused-vars */\nimport {MDCSelectionControlState} from '@material/selection-control/index';\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Radio. Provides an interface for managing\n * - classes\n * - dom\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCRadioAdapter {\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /** @param {boolean} disabled */\n  setNativeControlDisabled(disabled) {}\n}\n\nexport default MDCRadioAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-radio',\n  DISABLED: 'mdc-radio--disabled',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\n/* eslint-disable no-unused-vars */\nimport {MDCSelectionControlState} from '@material/selection-control/index';\nimport MDCRadioAdapter from './adapter';\n/* eslint-enable no-unused-vars */\nimport {cssClasses, strings} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCRadioAdapter>}\n */\nclass MDCRadioFoundation extends MDCFoundation {\n  /** @return enum {cssClasses} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {strings} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return {!MDCRadioAdapter} */\n  static get defaultAdapter() {\n    return /** @type {!MDCRadioAdapter} */ ({\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      setNativeControlDisabled: (/* disabled: boolean */) => {},\n    });\n  }\n\n  /** @param {boolean} disabled */\n  setDisabled(disabled) {\n    const {DISABLED} = MDCRadioFoundation.cssClasses;\n    this.adapter_.setNativeControlDisabled(disabled);\n    if (disabled) {\n      this.adapter_.addClass(DISABLED);\n    } else {\n      this.adapter_.removeClass(DISABLED);\n    }\n  }\n}\n\nexport default MDCRadioFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n/* eslint-disable no-unused-vars */\nimport {MDCSelectionControlState, MDCSelectionControl} from '@material/selection-control/index';\n/* eslint-enable no-unused-vars */\nimport MDCRadioFoundation from './foundation';\nimport {MDCRipple, MDCRippleFoundation} from '@material/ripple/index';\n\n/**\n * @extends MDCComponent<!MDCRadioFoundation>\n * @implements {MDCSelectionControl}\n */\nclass MDCRadio extends MDCComponent {\n  static attachTo(root) {\n    return new MDCRadio(root);\n  }\n\n  /** @return {boolean} */\n  get checked() {\n    return this.nativeControl_.checked;\n  }\n\n  /** @param {boolean} checked */\n  set checked(checked) {\n    this.nativeControl_.checked = checked;\n  }\n\n  /** @return {boolean} */\n  get disabled() {\n    return this.nativeControl_.disabled;\n  }\n\n  /** @param {boolean} disabled */\n  set disabled(disabled) {\n    this.foundation_.setDisabled(disabled);\n  }\n\n  /** @return {?string} */\n  get value() {\n    return this.nativeControl_.value;\n  }\n\n  /** @param {?string} value */\n  set value(value) {\n    this.nativeControl_.value = value;\n  }\n\n  /** @return {!MDCRipple} */\n  get ripple() {\n    return this.ripple_;\n  }\n\n  constructor(...args) {\n    super(...args);\n\n    /** @private {!MDCRipple} */\n    this.ripple_ = this.initRipple_();\n  }\n\n  /**\n   * @return {!MDCRipple}\n   * @private\n   */\n  initRipple_() {\n    const adapter = Object.assign(MDCRipple.createAdapter(this), {\n      isUnbounded: () => true,\n      // Radio buttons technically go \"active\" whenever there is *any* keyboard interaction. This is not the\n      // UI we desire.\n      isSurfaceActive: () => false,\n      registerInteractionHandler: (type, handler) => this.nativeControl_.addEventListener(type, handler),\n      deregisterInteractionHandler: (type, handler) => this.nativeControl_.removeEventListener(type, handler),\n    });\n    const foundation = new MDCRippleFoundation(adapter);\n    return new MDCRipple(this.root_, foundation);\n  }\n\n  /**\n   * Returns the state of the native control element, or null if the native control element is not present.\n   * @return {?MDCSelectionControlState}\n   * @private\n   */\n  get nativeControl_() {\n    const {NATIVE_CONTROL_SELECTOR} = MDCRadioFoundation.strings;\n    const el = /** @type {?MDCSelectionControlState} */ (\n      this.root_.querySelector(NATIVE_CONTROL_SELECTOR));\n    return el;\n  }\n\n  destroy() {\n    this.ripple_.destroy();\n    super.destroy();\n  }\n\n  /** @return {!MDCRadioFoundation} */\n  getDefaultFoundation() {\n    return new MDCRadioFoundation({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      setNativeControlDisabled: (disabled) => this.nativeControl_.disabled = disabled,\n    });\n  }\n}\n\n\nexport {MDCRadio, MDCRadioFoundation};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Floating Label.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the floating label into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCFloatingLabelAdapter {\n  /**\n   * Adds a class to the label element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the label element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns the width of the label element.\n   * @return {number}\n   */\n  getWidth() {}\n\n  /**\n   * Registers an event listener on the root element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerInteractionHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the root element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterInteractionHandler(evtType, handler) {}\n}\n\nexport default MDCFloatingLabelAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  LABEL_FLOAT_ABOVE: 'mdc-floating-label--float-above',\n  LABEL_SHAKE: 'mdc-floating-label--shake',\n  ROOT: 'mdc-floating-label',\n};\n\nexport {cssClasses};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCFloatingLabelAdapter from './adapter';\nimport {cssClasses} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCFloatingLabelAdapter>}\n * @final\n */\nclass MDCFloatingLabelFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCFloatingLabelAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCFloatingLabelAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCFloatingLabelAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      getWidth: () => {},\n      registerInteractionHandler: () => {},\n      deregisterInteractionHandler: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCFloatingLabelAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCFloatingLabelFoundation.defaultAdapter, adapter));\n\n    /** @private {function(!Event): undefined} */\n    this.shakeAnimationEndHandler_ = () => this.handleShakeAnimationEnd_();\n  }\n\n  init() {\n    this.adapter_.registerInteractionHandler('animationend', this.shakeAnimationEndHandler_);\n  }\n\n  destroy() {\n    this.adapter_.deregisterInteractionHandler('animationend', this.shakeAnimationEndHandler_);\n  }\n\n  /**\n   * Returns the width of the label element.\n   * @return {number}\n   */\n  getWidth() {\n    return this.adapter_.getWidth();\n  }\n\n  /**\n   * Styles the label to produce the label shake for errors.\n   * @param {boolean} shouldShake adds shake class if true,\n   * otherwise removes shake class.\n   */\n  shake(shouldShake) {\n    const {LABEL_SHAKE} = MDCFloatingLabelFoundation.cssClasses;\n    if (shouldShake) {\n      this.adapter_.addClass(LABEL_SHAKE);\n    } else {\n      this.adapter_.removeClass(LABEL_SHAKE);\n    }\n  }\n\n  /**\n   * Styles the label to float or dock.\n   * @param {boolean} shouldFloat adds float class if true, otherwise remove\n   * float and shake class to dock label.\n   */\n  float(shouldFloat) {\n    const {LABEL_FLOAT_ABOVE, LABEL_SHAKE} = MDCFloatingLabelFoundation.cssClasses;\n    if (shouldFloat) {\n      this.adapter_.addClass(LABEL_FLOAT_ABOVE);\n    } else {\n      this.adapter_.removeClass(LABEL_FLOAT_ABOVE);\n      this.adapter_.removeClass(LABEL_SHAKE);\n    }\n  }\n\n  /**\n   * Handles an interaction event on the root element.\n   */\n  handleShakeAnimationEnd_() {\n    const {LABEL_SHAKE} = MDCFloatingLabelFoundation.cssClasses;\n    this.adapter_.removeClass(LABEL_SHAKE);\n  }\n}\n\nexport default MDCFloatingLabelFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport MDCFloatingLabelAdapter from './adapter';\nimport MDCFloatingLabelFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCFloatingLabelFoundation>}\n * @final\n */\nclass MDCFloatingLabel extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCFloatingLabel}\n   */\n  static attachTo(root) {\n    return new MDCFloatingLabel(root);\n  }\n\n  /**\n   * Styles the label to produce the label shake for errors.\n   * @param {boolean} shouldShake styles the label to shake by adding shake class\n   * if true, otherwise will stop shaking by removing shake class.\n   */\n  shake(shouldShake) {\n    this.foundation_.shake(shouldShake);\n  }\n\n  /**\n   * Styles label to float/dock.\n   * @param {boolean} shouldFloat styles the label to float by adding float class\n   * if true, otherwise docks the label by removing the float class.\n   */\n  float(shouldFloat) {\n    this.foundation_.float(shouldFloat);\n  }\n\n  /**\n   * @return {number}\n   */\n  getWidth() {\n    return this.foundation_.getWidth();\n  }\n\n  /**\n   * @return {!MDCFloatingLabelFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCFloatingLabelFoundation({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      getWidth: () => this.root_.scrollWidth,\n      registerInteractionHandler: (evtType, handler) => this.root_.addEventListener(evtType, handler),\n      deregisterInteractionHandler: (evtType, handler) => this.root_.removeEventListener(evtType, handler),\n    });\n  }\n}\n\nexport {MDCFloatingLabel, MDCFloatingLabelFoundation};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC TextField Line Ripple.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the line ripple into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCLineRippleAdapter {\n  /**\n   * Adds a class to the line ripple element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the line ripple element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Sets the style property with propertyName to value on the root element.\n   * @param {string} propertyName\n   * @param {string} value\n   */\n  setStyle(propertyName, value) {}\n\n  /**\n   * Registers an event listener on the line ripple element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerEventHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the line ripple element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterEventHandler(evtType, handler) {}\n}\n\nexport default MDCLineRippleAdapter;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  LINE_RIPPLE_ACTIVE: 'mdc-line-ripple--active',\n  LINE_RIPPLE_DEACTIVATING: 'mdc-line-ripple--deactivating',\n};\n\nexport {cssClasses};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCLineRippleAdapter from './adapter';\nimport {cssClasses} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCLineRippleAdapter>}\n * @final\n */\nclass MDCLineRippleFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /**\n   * {@see MDCLineRippleAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCLineRippleAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCLineRippleAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      setStyle: () => {},\n      registerEventHandler: () => {},\n      deregisterEventHandler: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCLineRippleAdapter=} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCLineRippleFoundation.defaultAdapter, adapter));\n\n    /** @private {function(!Event): undefined} */\n    this.transitionEndHandler_ = (evt) => this.handleTransitionEnd(evt);\n  }\n\n  init() {\n    this.adapter_.registerEventHandler('transitionend', this.transitionEndHandler_);\n  }\n\n  destroy() {\n    this.adapter_.deregisterEventHandler('transitionend', this.transitionEndHandler_);\n  }\n\n  /**\n   * Activates the line ripple\n   */\n  activate() {\n    this.adapter_.removeClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n    this.adapter_.addClass(cssClasses.LINE_RIPPLE_ACTIVE);\n  }\n\n  /**\n   * Sets the center of the ripple animation to the given X coordinate.\n   * @param {number} xCoordinate\n   */\n  setRippleCenter(xCoordinate) {\n    this.adapter_.setStyle('transform-origin', `${xCoordinate}px center`);\n  }\n\n  /**\n   * Deactivates the line ripple\n   */\n  deactivate() {\n    this.adapter_.addClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n  }\n\n  /**\n   * Handles a transition end event\n   * @param {!Event} evt\n   */\n  handleTransitionEnd(evt) {\n    // Wait for the line ripple to be either transparent or opaque\n    // before emitting the animation end event\n    const isDeactivating = this.adapter_.hasClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n\n    if (evt.propertyName === 'opacity') {\n      if (isDeactivating) {\n        this.adapter_.removeClass(cssClasses.LINE_RIPPLE_ACTIVE);\n        this.adapter_.removeClass(cssClasses.LINE_RIPPLE_DEACTIVATING);\n      }\n    }\n  }\n}\n\nexport default MDCLineRippleFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCLineRippleAdapter from './adapter';\nimport MDCLineRippleFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCLineRippleFoundation>}\n * @final\n */\nclass MDCLineRipple extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCLineRipple}\n   */\n  static attachTo(root) {\n    return new MDCLineRipple(root);\n  }\n\n  /**\n   * Activates the line ripple\n   */\n  activate() {\n    this.foundation_.activate();\n  }\n\n  /**\n   * Deactivates the line ripple\n   */\n  deactivate() {\n    this.foundation_.deactivate();\n  }\n\n  /**\n   * Sets the transform origin given a user's click location. The `rippleCenter` is the\n   * x-coordinate of the middle of the ripple.\n   * @param {number} xCoordinate\n   */\n  setRippleCenter(xCoordinate) {\n    this.foundation_.setRippleCenter(xCoordinate);\n  }\n\n  /**\n   * @return {!MDCLineRippleFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCLineRippleFoundation(/** @type {!MDCLineRippleAdapter} */ (Object.assign({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      setStyle: (propertyName, value) => this.root_.style[propertyName] = value,\n      registerEventHandler: (evtType, handler) => this.root_.addEventListener(evtType, handler),\n      deregisterEventHandler: (evtType, handler) => this.root_.removeEventListener(evtType, handler),\n    })));\n  }\n}\n\nexport {MDCLineRipple, MDCLineRippleFoundation};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Menu. Provides an interface for managing\n * - selected element classes\n * - get focused elements\n * - toggling a checkbox inside a list item\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCMenuAdapter {\n  /**\n   * Adds a class to the element at the index provided.\n   * @param {number} index\n   * @param {string} className\n   */\n  addClassToElementAtIndex(index, className) {}\n\n  /**\n   * Removes a class from the element at the index provided\n   * @param {number} index\n   * @param {string} className\n   */\n  removeClassFromElementAtIndex(index, className) {}\n\n  /**\n   * Adds an attribute, with value, to the element at the index provided.\n   * @param {number} index\n   * @param {string} attr\n   * @param {string} value\n   */\n  addAttributeToElementAtIndex(index, attr, value) {}\n\n  /**\n   * Removes an attribute from an element at the index provided.\n   * @param {number} index\n   * @param {string} attr\n   */\n  removeAttributeFromElementAtIndex(index, attr) {}\n\n  /**\n   * Returns true if the element contains the className.\n   * @param {?HTMLElement} element\n   * @param {string} className\n   * @return {boolean} true if the element contains the className\n   */\n  elementContainsClass(element, className) {}\n\n  /**\n   * Closes the menu-surface.\n   */\n  closeSurface() {}\n\n  /**\n   * Returns the index for the element provided.\n   * @param {?HTMLElement} element\n   * @return {number} index of the element in the list or -1 if it is not in the list.\n   */\n  getElementIndex(element) {}\n\n  /**\n   * Returns the parentElement of the provided element.\n   * @param {?HTMLElement} element\n   * @return {?HTMLElement} parentElement of the element provided.\n   */\n  getParentElement(element) {}\n\n  /**\n   * Returns the element within the selectionGroup containing the selected element class.\n   * @param {!HTMLElement} selectionGroup\n   * @return {number} element within the selectionGroup that contains the selected element class.\n   */\n  getSelectedElementIndex(selectionGroup) {}\n\n  /**\n   * Emits an event using the evtData.\n   * @param {{\n *    index: number\n *   }} evtData\n   */\n  notifySelected(evtData) {}\n}\n\nexport {MDCMenuAdapter};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-menu',\n  MENU_SELECTED_LIST_ITEM: 'mdc-menu-item--selected',\n  MENU_SELECTION_GROUP: 'mdc-menu__selection-group',\n};\n\n/** @enum {string} */\nconst strings = {\n  SELECTED_EVENT: 'MDCMenu:selected',\n  ARIA_SELECTED_ATTR: 'aria-selected',\n  LIST_SELECTOR: '.mdc-list',\n  CHECKBOX_SELECTOR: 'input[type=\"checkbox\"]',\n};\n\nexport {cssClasses, strings};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDCMenuSurface. Provides an interface for managing\n * - classes\n * - dom\n * - focus\n * - position\n * - dimensions\n * - event handlers\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\nclass MDCMenuSurfaceAdapter {\n  /** @param {string} className */\n  addClass(className) {}\n\n  /** @param {string} className */\n  removeClass(className) {}\n\n  /**\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /** @return {boolean} */\n  hasAnchor() {}\n\n  /** Emits an event when the menu surface is closed. */\n  notifyClose() {}\n\n  /** Emits an event when the menu surface is opened. */\n  notifyOpen() {}\n\n  /**\n   * @return {boolean}\n   * @param {EventTarget} el\n   */\n  isElementInContainer(el) {}\n\n  /** @return {boolean} */\n  isRtl() {}\n\n  /** @param {string} origin */\n  setTransformOrigin(origin) {}\n\n  /** @return {boolean} */\n  isFocused() {}\n\n  /** Saves the element that was focused before the menu surface was opened. */\n  saveFocus() {}\n\n  /** Restores focus to the element that was focused before the menu surface was opened. */\n  restoreFocus() {}\n\n  /** @return {boolean} */\n  isFirstElementFocused() {}\n\n  /** @return {boolean} */\n  isLastElementFocused() {}\n\n  /** Focuses the first focusable element in the menu-surface. */\n  focusFirstElement() {}\n\n  /** Focuses the first focusable element in the menu-surface. */\n  focusLastElement() {}\n\n  /** @return {!{width: number, height: number}} */\n  getInnerDimensions() {}\n\n  /** @return {!{width: number, height: number, top: number, right: number, bottom: number, left: number}} */\n  getAnchorDimensions() {}\n\n  /** @return {!{ width: number, height: number }} */\n  getWindowDimensions() {}\n\n  /** @return {!{ width: number, height: number }} */\n  getBodyDimensions() {}\n\n  /** @return {!{ width: number, height: number }} */\n  getWindowScroll() {}\n\n  /** @param {!{\n  *   top: (string|undefined),\n  *   right: (string|undefined),\n  *   bottom: (string|undefined),\n  *   left: (string|undefined)\n  * }} position */\n  setPosition(position) {}\n\n  /** @param {string} height */\n  setMaxHeight(height) {}\n}\n\nexport {MDCMenuSurfaceAdapter};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ANCHOR: 'mdc-menu-surface--anchor',\n  ANIMATING_CLOSED: 'mdc-menu-surface--animating-closed',\n  ANIMATING_OPEN: 'mdc-menu-surface--animating-open',\n  FIXED: 'mdc-menu-surface--fixed',\n  OPEN: 'mdc-menu-surface--open',\n  ROOT: 'mdc-menu-surface',\n};\n\n/** @enum {string} */\nconst strings = {\n  CLOSED_EVENT: 'MDCMenuSurface:closed',\n  OPENED_EVENT: 'MDCMenuSurface:opened',\n  FOCUSABLE_ELEMENTS: 'button:not(:disabled), [href]:not([aria-disabled=\"true\"]), input:not(:disabled), ' +\n  'select:not(:disabled), textarea:not(:disabled), [tabindex]:not([tabindex=\"-1\"]):not([aria-disabled=\"true\"])',\n};\n\n/** @enum {number} */\nconst numbers = {\n  // Total duration of menu-surface open animation.\n  TRANSITION_OPEN_DURATION: 120,\n  // Total duration of menu-surface close animation.\n  TRANSITION_CLOSE_DURATION: 75,\n  // Margin left to the edge of the viewport when menu-surface is at maximum possible height.\n  MARGIN_TO_EDGE: 32,\n  // Ratio of anchor width to menu-surface width for switching from corner positioning to center positioning.\n  ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,\n};\n\n/**\n * Enum for bits in the {@see Corner) bitmap.\n * @enum {number}\n */\nconst CornerBit = {\n  BOTTOM: 1,\n  CENTER: 2,\n  RIGHT: 4,\n  FLIP_RTL: 8,\n};\n\n/**\n * Enum for representing an element corner for positioning the menu-surface.\n *\n * The START constants map to LEFT if element directionality is left\n * to right and RIGHT if the directionality is right to left.\n * Likewise END maps to RIGHT or LEFT depending on the directionality.\n *\n * @enum {number}\n */\nconst Corner = {\n  TOP_LEFT: 0,\n  TOP_RIGHT: CornerBit.RIGHT,\n  BOTTOM_LEFT: CornerBit.BOTTOM,\n  BOTTOM_RIGHT: CornerBit.BOTTOM | CornerBit.RIGHT,\n  TOP_START: CornerBit.FLIP_RTL,\n  TOP_END: CornerBit.FLIP_RTL | CornerBit.RIGHT,\n  BOTTOM_START: CornerBit.BOTTOM | CornerBit.FLIP_RTL,\n  BOTTOM_END: CornerBit.BOTTOM | CornerBit.RIGHT | CornerBit.FLIP_RTL,\n};\n\nexport {cssClasses, strings, numbers, CornerBit, Corner};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * @typedef {{\n *   top: number,\n *   right: number,\n *   bottom: number,\n *   left: number\n * }}\n */\nlet AnchorMargin;\n\n/* eslint-disable no-unused-vars */\n/**\n * @typedef {{\n *   viewport: { width: number, height: number },\n *   viewportDistance: {top: number, right: number, bottom: number, left: number},\n *   anchorHeight: number,\n *   anchorWidth: number,\n *   surfaceHeight: number,\n *   surfaceWidth: number,\n *   bodyDimensions,\n *   windowScroll,\n * }}\n */\nlet AutoLayoutMeasurements;\n/* eslint-enable no-unused-vars */\n\nimport MDCFoundation from '@material/base/foundation';\nimport {MDCMenuSurfaceAdapter} from './adapter';\nimport {cssClasses, strings, numbers, Corner, CornerBit} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCMenuSurfaceAdapter>}\n */\nclass MDCMenuSurfaceFoundation extends MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum{string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {number} */\n  static get numbers() {\n    return numbers;\n  }\n\n  /** @return enum{number} */\n  static get Corner() {\n    return Corner;\n  }\n\n  /**\n   * {@see MDCMenuSurfaceAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCMenuSurfaceAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCMenuSurfaceAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => false,\n      hasAnchor: () => false,\n      notifyClose: () => {},\n      notifyOpen: () => {},\n      isElementInContainer: () => false,\n      isRtl: () => false,\n      setTransformOrigin: () => {},\n      isFocused: () => false,\n      saveFocus: () => {},\n      restoreFocus: () => {},\n      isFirstElementFocused: () => {},\n      isLastElementFocused: () => {},\n      focusFirstElement: () => {},\n      focusLastElement: () => {},\n      getInnerDimensions: () => ({}),\n      getAnchorDimensions: () => ({}),\n      getWindowDimensions: () => ({}),\n      getBodyDimensions: () => ({}),\n      getWindowScroll: () => ({}),\n      setPosition: () => {},\n      setMaxHeight: () => {},\n    });\n  }\n\n  /** @param {!MDCMenuSurfaceAdapter} adapter */\n  constructor(adapter) {\n    super(Object.assign(MDCMenuSurfaceFoundation.defaultAdapter, adapter));\n\n    /** @private {boolean} */\n    this.isOpen_ = false;\n    /** @private {number} */\n    this.openAnimationEndTimerId_ = 0;\n    /** @private {number} */\n    this.closeAnimationEndTimerId_ = 0;\n    /** @private {number} */\n    this.animationRequestId_ = 0;\n    /** @private {!{ width: number, height: number }} */\n    this.dimensions_;\n    /** @private {!Corner} */\n    this.anchorCorner_ = Corner.TOP_START;\n    /** @private {!AnchorMargin} */\n    this.anchorMargin_ = {top: 0, right: 0, bottom: 0, left: 0};\n    /** @private {?AutoLayoutMeasurements} */\n    this.measures_ = null;\n    /** @private {boolean} */\n    this.quickOpen_ = false;\n    /** @private {boolean} */\n    this.hoistedElement_ = false;\n    /** @private {boolean} */\n    this.isFixedPosition_ = false;\n    /** @private {!{x: number, y: number}} */\n    this.position_ = {x: 0, y: 0};\n  }\n\n  init() {\n    const {ROOT, OPEN} = MDCMenuSurfaceFoundation.cssClasses;\n\n    if (!this.adapter_.hasClass(ROOT)) {\n      throw new Error(`${ROOT} class required in root element.`);\n    }\n\n    if (this.adapter_.hasClass(OPEN)) {\n      this.isOpen_ = true;\n    }\n  }\n\n  destroy() {\n    clearTimeout(this.openAnimationEndTimerId_);\n    clearTimeout(this.closeAnimationEndTimerId_);\n    // Cancel any currently running animations.\n    cancelAnimationFrame(this.animationRequestId_);\n  }\n\n  /**\n   * @param {!Corner} corner Default anchor corner alignment of top-left menu surface corner.\n   */\n  setAnchorCorner(corner) {\n    this.anchorCorner_ = corner;\n  }\n\n  /**\n   * @param {!AnchorMargin} margin set of margin values from anchor.\n   */\n  setAnchorMargin(margin) {\n    this.anchorMargin_.top = typeof margin.top === 'number' ? margin.top : 0;\n    this.anchorMargin_.right = typeof margin.right === 'number' ? margin.right : 0;\n    this.anchorMargin_.bottom = typeof margin.bottom === 'number' ? margin.bottom : 0;\n    this.anchorMargin_.left = typeof margin.left === 'number' ? margin.left : 0;\n  }\n\n  /**\n   * Used to indicate if the menu-surface is hoisted to the body.\n   * @param {boolean} isHoisted\n   */\n  setIsHoisted(isHoisted) {\n    this.hoistedElement_ = isHoisted;\n  }\n\n  /**\n   * Used to set the menu-surface calculations based on a fixed position menu.\n   * @param {boolean} isFixedPosition\n   */\n  setFixedPosition(isFixedPosition) {\n    this.isFixedPosition_ = isFixedPosition;\n  }\n\n  /**\n   * Sets the menu-surface position on the page.\n   * @param {number} x\n   * @param {number} y\n   */\n  setAbsolutePosition(x, y) {\n    this.position_.x = this.typeCheckisFinite_(x) ? x : 0;\n    this.position_.y = this.typeCheckisFinite_(y) ? y : 0;\n  }\n\n  /** @param {boolean} quickOpen */\n  setQuickOpen(quickOpen) {\n    this.quickOpen_ = quickOpen;\n  }\n\n  /**\n   * Handle clicks and close if not within menu-surface element.\n   * @param {!Event} evt\n   */\n  handleBodyClick(evt) {\n    const el = evt.target;\n\n    if (this.adapter_.isElementInContainer(el)) {\n      return;\n    }\n\n    this.close();\n  };\n\n  /**\n   * Handle keys that close the surface.\n   * @param {!Event} evt\n   */\n  handleKeydown(evt) {\n    const {keyCode, key, shiftKey} = evt;\n\n    const isEscape = key === 'Escape' || keyCode === 27;\n    const isTab = key === 'Tab' || keyCode === 9;\n\n    if (isEscape) {\n      this.close();\n    } else if (isTab) {\n      if (this.adapter_.isLastElementFocused() && !shiftKey) {\n        this.adapter_.focusFirstElement();\n        evt.preventDefault();\n      } else if (this.adapter_.isFirstElementFocused() && shiftKey) {\n        this.adapter_.focusLastElement();\n        evt.preventDefault();\n      }\n    }\n  }\n\n  /**\n   * @return {!AutoLayoutMeasurements} Measurements used to position menu surface popup.\n   */\n  getAutoLayoutMeasurements_() {\n    let anchorRect = this.adapter_.getAnchorDimensions();\n    const viewport = this.adapter_.getWindowDimensions();\n    const bodyDimensions = this.adapter_.getBodyDimensions();\n    const windowScroll = this.adapter_.getWindowScroll();\n\n    if (!anchorRect) {\n      anchorRect = /** @type {ClientRect} */ ({\n        x: this.position_.x,\n        y: this.position_.y,\n        top: this.position_.y,\n        bottom: this.position_.y,\n        left: this.position_.x,\n        right: this.position_.x,\n        height: 0,\n        width: 0,\n      });\n    }\n\n    return {\n      viewport,\n      bodyDimensions,\n      windowScroll,\n      viewportDistance: {\n        top: anchorRect.top,\n        right: viewport.width - anchorRect.right,\n        left: anchorRect.left,\n        bottom: viewport.height - anchorRect.bottom,\n      },\n      anchorHeight: anchorRect.height,\n      anchorWidth: anchorRect.width,\n      surfaceHeight: this.dimensions_.height,\n      surfaceWidth: this.dimensions_.width,\n    };\n  }\n\n  /**\n   * Computes the corner of the anchor from which to animate and position the menu surface.\n   * @return {!Corner}\n   * @private\n   */\n  getOriginCorner_() {\n    // Defaults: open from the top left.\n    let corner = Corner.TOP_LEFT;\n\n    const {viewportDistance, anchorHeight, anchorWidth, surfaceHeight, surfaceWidth} = this.measures_;\n    const isBottomAligned = Boolean(this.anchorCorner_ & CornerBit.BOTTOM);\n    const availableTop = isBottomAligned ? viewportDistance.top + anchorHeight + this.anchorMargin_.bottom\n      : viewportDistance.top + this.anchorMargin_.top;\n    const availableBottom = isBottomAligned ? viewportDistance.bottom - this.anchorMargin_.bottom\n      : viewportDistance.bottom + anchorHeight - this.anchorMargin_.top;\n\n    const topOverflow = surfaceHeight - availableTop;\n    const bottomOverflow = surfaceHeight - availableBottom;\n    if (bottomOverflow > 0 && topOverflow < bottomOverflow) {\n      corner |= CornerBit.BOTTOM;\n    }\n\n    const isRtl = this.adapter_.isRtl();\n    const isFlipRtl = Boolean(this.anchorCorner_ & CornerBit.FLIP_RTL);\n    const avoidHorizontalOverlap = Boolean(this.anchorCorner_ & CornerBit.RIGHT);\n    const isAlignedRight = (avoidHorizontalOverlap && !isRtl) ||\n      (!avoidHorizontalOverlap && isFlipRtl && isRtl);\n    const availableLeft = isAlignedRight ? viewportDistance.left + anchorWidth + this.anchorMargin_.right :\n      viewportDistance.left + this.anchorMargin_.left;\n    const availableRight = isAlignedRight ? viewportDistance.right - this.anchorMargin_.right :\n      viewportDistance.right + anchorWidth - this.anchorMargin_.left;\n\n    const leftOverflow = surfaceWidth - availableLeft;\n    const rightOverflow = surfaceWidth - availableRight;\n\n    if ((leftOverflow < 0 && isAlignedRight && isRtl) ||\n        (avoidHorizontalOverlap && !isAlignedRight && leftOverflow < 0) ||\n        (rightOverflow > 0 && leftOverflow < rightOverflow)) {\n      corner |= CornerBit.RIGHT;\n    }\n\n    return /** @type {Corner} */ (corner);\n  }\n\n  /**\n   * @param {!Corner} corner Origin corner of the menu surface.\n   * @return {number} Horizontal offset of menu surface origin corner from corresponding anchor corner.\n   * @private\n   */\n  getHorizontalOriginOffset_(corner) {\n    const {anchorWidth} = this.measures_;\n    // isRightAligned corresponds to using the 'right' property on the surface.\n    const isRightAligned = Boolean(corner & CornerBit.RIGHT);\n    const avoidHorizontalOverlap = Boolean(this.anchorCorner_ & CornerBit.RIGHT);\n\n    if (isRightAligned) {\n      const rightOffset = avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.left : this.anchorMargin_.right;\n\n      // For hoisted or fixed elements, adjust the offset by the difference between viewport width and body width so\n      // when we calculate the right value (`adjustPositionForHoistedElement_`) based on the element position,\n      // the right property is correct.\n      if (this.hoistedElement_ || this.isFixedPosition_) {\n        return rightOffset - (this.measures_.viewport.width - this.measures_.bodyDimensions.width);\n      }\n\n      return rightOffset;\n    }\n\n    return avoidHorizontalOverlap ? anchorWidth - this.anchorMargin_.right : this.anchorMargin_.left;\n  }\n\n  /**\n   * @param {!Corner} corner Origin corner of the menu surface.\n   * @return {number} Vertical offset of menu surface origin corner from corresponding anchor corner.\n   * @private\n   */\n  getVerticalOriginOffset_(corner) {\n    const {anchorHeight} = this.measures_;\n    const isBottomAligned = Boolean(corner & CornerBit.BOTTOM);\n    const avoidVerticalOverlap = Boolean(this.anchorCorner_ & CornerBit.BOTTOM);\n    let y = 0;\n\n    if (isBottomAligned) {\n      y = avoidVerticalOverlap ? anchorHeight - this.anchorMargin_.top : -this.anchorMargin_.bottom;\n    } else {\n      y = avoidVerticalOverlap ? (anchorHeight + this.anchorMargin_.bottom) : this.anchorMargin_.top;\n    }\n    return y;\n  }\n\n  /**\n   * @param {!Corner} corner Origin corner of the menu surface.\n   * @return {number} Maximum height of the menu surface, based on available space. 0 indicates should not be set.\n   * @private\n   */\n  getMenuSurfaceMaxHeight_(corner) {\n    let maxHeight = 0;\n    const {viewportDistance} = this.measures_;\n    const isBottomAligned = Boolean(corner & CornerBit.BOTTOM);\n    const {MARGIN_TO_EDGE} = MDCMenuSurfaceFoundation.numbers;\n\n    // When maximum height is not specified, it is handled from css.\n    if (isBottomAligned) {\n      maxHeight = viewportDistance.top + this.anchorMargin_.top - MARGIN_TO_EDGE;\n      if (!(this.anchorCorner_ & CornerBit.BOTTOM)) {\n        maxHeight += this.measures_.anchorHeight;\n      }\n    } else {\n      maxHeight = viewportDistance.bottom - this.anchorMargin_.bottom + this.measures_.anchorHeight - MARGIN_TO_EDGE;\n      if (this.anchorCorner_ & CornerBit.BOTTOM) {\n        maxHeight -= this.measures_.anchorHeight;\n      }\n    }\n\n    return maxHeight;\n  }\n\n  /** @private */\n  autoPosition_() {\n    // Compute measurements for autoposition methods reuse.\n    this.measures_ = this.getAutoLayoutMeasurements_();\n\n    const corner = this.getOriginCorner_();\n    const maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight_(corner);\n    const verticalAlignment = (corner & CornerBit.BOTTOM) ? 'bottom' : 'top';\n    let horizontalAlignment = (corner & CornerBit.RIGHT) ? 'right' : 'left';\n    const horizontalOffset = this.getHorizontalOriginOffset_(corner);\n    const verticalOffset = this.getVerticalOriginOffset_(corner);\n    let position = {\n      [horizontalAlignment]: horizontalOffset ? horizontalOffset : '0',\n      [verticalAlignment]: verticalOffset ? verticalOffset : '0',\n    };\n    const {anchorWidth, surfaceWidth} = this.measures_;\n    // Center align when anchor width is comparable or greater than menu surface, otherwise keep corner.\n    if (anchorWidth / surfaceWidth > numbers.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {\n      horizontalAlignment = 'center';\n    }\n\n    // If the menu-surface has been hoisted to the body, it's no longer relative to the anchor element\n    if (this.hoistedElement_ || this.isFixedPosition_) {\n      position = this.adjustPositionForHoistedElement_(position);\n    }\n\n    for (const prop in position) {\n      if (position.hasOwnProperty(prop) && position[prop] !== '0') {\n        position[prop] = `${parseInt(position[prop], 10)}px`;\n      }\n    }\n\n    this.adapter_.setTransformOrigin(`${horizontalAlignment} ${verticalAlignment}`);\n    this.adapter_.setPosition(position);\n    this.adapter_.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + 'px' : '');\n\n    // Clear measures after positioning is complete.\n    this.measures_ = null;\n  }\n\n  /**\n   * Calculates the offsets for positioning the menu-surface when the menu-surface has been\n   * hoisted to the body.\n   * @param {!{\n   *   top: (string|undefined),\n   *   right: (string|undefined),\n   *   bottom: (string|undefined),\n   *   left: (string|undefined)\n   * }} position\n   * @return {!{\n   *   top: (string|undefined),\n   *   right: (string|undefined),\n   *   bottom: (string|undefined),\n   *   left: (string|undefined)\n   * }} position\n   * @private\n   */\n  adjustPositionForHoistedElement_(position) {\n    const {windowScroll, viewportDistance} = this.measures_;\n\n    for (const prop in position) {\n      if (position.hasOwnProperty(prop)) {\n        // Hoisted surfaces need to have the anchor elements location on the page added to the\n        // position properties for proper alignment on the body.\n        if (viewportDistance.hasOwnProperty(prop)) {\n          position[prop] = parseInt(position[prop], 10) + viewportDistance[prop];\n        }\n\n        // Surfaces that are absolutely positioned need to have additional calculations for scroll\n        // and bottom positioning.\n        if (!this.isFixedPosition_) {\n          if (prop === 'top') {\n            position[prop] = parseInt(position[prop], 10) + windowScroll.y;\n          } else if (prop === 'bottom') {\n            position[prop] = parseInt(position[prop], 10) - windowScroll.y;\n          } else if (prop === 'left') {\n            position[prop] = parseInt(position[prop], 10) + windowScroll.x;\n          } else if (prop === 'right') {\n            position[prop] = parseInt(position[prop], 10) - windowScroll.x;\n          }\n        }\n      }\n    }\n\n    return position;\n  }\n\n  /**\n   * Open the menu surface.\n   */\n  open() {\n    this.adapter_.saveFocus();\n\n    if (!this.quickOpen_) {\n      this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);\n    }\n\n    this.animationRequestId_ = requestAnimationFrame(() => {\n      this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);\n      this.dimensions_ = this.adapter_.getInnerDimensions();\n      this.autoPosition_();\n      if (this.quickOpen_) {\n        this.adapter_.notifyOpen();\n      } else {\n        this.openAnimationEndTimerId_ = setTimeout(() => {\n          this.openAnimationEndTimerId_ = 0;\n          this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_OPEN);\n          this.adapter_.notifyOpen();\n        }, numbers.TRANSITION_OPEN_DURATION);\n      }\n    });\n    this.isOpen_ = true;\n  }\n\n  /**\n   * Closes the menu surface.\n   */\n  close() {\n    if (!this.quickOpen_) {\n      this.adapter_.addClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);\n    }\n\n    requestAnimationFrame(() => {\n      this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.OPEN);\n      if (this.quickOpen_) {\n        this.adapter_.notifyClose();\n      } else {\n        this.closeAnimationEndTimerId_ = setTimeout(() => {\n          this.closeAnimationEndTimerId_ = 0;\n          this.adapter_.removeClass(MDCMenuSurfaceFoundation.cssClasses.ANIMATING_CLOSED);\n          this.adapter_.notifyClose();\n        }, numbers.TRANSITION_CLOSE_DURATION);\n      }\n    });\n\n    this.isOpen_ = false;\n    this.maybeRestoreFocus_();\n  }\n\n  /**\n   * The last focused element when the menu surface was opened should regain focus, if the user is\n   * focused on or within the menu surface when it is closed.\n   * @private\n   */\n  maybeRestoreFocus_() {\n    if (this.adapter_.isFocused() || this.adapter_.isElementInContainer(document.activeElement)) {\n      this.adapter_.restoreFocus();\n    }\n  }\n\n  /** @return {boolean} */\n  isOpen() {\n    return this.isOpen_;\n  }\n\n  /**\n   * isFinite that doesn't force conversion to number type.\n   * Equivalent to Number.isFinite in ES2015, but is not included in IE11.\n   * @param {number} num\n   * @return {boolean}\n   * @private\n   */\n  typeCheckisFinite_(num) {\n    return typeof num === 'number' && isFinite(num);\n  }\n}\n\nexport {MDCMenuSurfaceFoundation, AnchorMargin};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport {MDCMenuAdapter} from './adapter';\nimport {cssClasses, strings} from './constants';\nimport {MDCMenuSurfaceFoundation} from '@material/menu-surface/foundation';\nimport MDCListFoundation from '@material/list/foundation';\n\n/**\n * @extends {MDCFoundation<!MDCMenuAdapter>}\n */\nclass MDCMenuFoundation extends MDCFoundation {\n  /** @return enum{cssClasses} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum{strings} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCMenuAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCMenuAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCMenuAdapter} */ ({\n      addClassToElementAtIndex: () => {},\n      removeClassFromElementAtIndex: () => {},\n      addAttributeToElementAtIndex: () => {},\n      removeAttributeFromElementAtIndex: () => {},\n      elementContainsClass: () => {},\n      closeSurface: () => {},\n      getElementIndex: () => {},\n      getParentElement: () => {},\n      getSelectedElementIndex: () => {},\n      notifySelected: () => {},\n    });\n  }\n\n  /** @param {!MDCMenuAdapter} adapter */\n  constructor(adapter) {\n    super(Object.assign(MDCMenuFoundation.defaultAdapter, adapter));\n\n    /** @type {number} */\n    this.closeAnimationEndTimerId_ = 0;\n  }\n\n  destroy() {\n    if (this.closeAnimationEndTimerId_) {\n      clearTimeout(this.closeAnimationEndTimerId_);\n    }\n\n    this.adapter_.closeSurface();\n  }\n\n  /**\n   * Handler function for the keydown events.\n   * @param {!Event} evt\n   */\n  handleKeydown(evt) {\n    const {key, keyCode} = evt;\n    const isTab = key === 'Tab' || keyCode === 9;\n\n    if (isTab) {\n      this.adapter_.closeSurface();\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} listItem\n   */\n  handleItemAction(listItem) {\n    const index = this.adapter_.getElementIndex(listItem);\n    if (index < 0) {\n      return;\n    }\n\n    this.adapter_.notifySelected({index});\n    this.adapter_.closeSurface();\n\n    // Wait for the menu to close before adding/removing classes that affect styles.\n    this.closeAnimationEndTimerId_ = setTimeout(() => {\n      const selectionGroup = this.getSelectionGroup_(listItem);\n\n      if (selectionGroup !== null) {\n        this.handleSelectionGroup_(/** @type {!HTMLElement} */ (selectionGroup), index);\n      }\n    }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);\n  }\n\n  /**\n   * Handles toggling the selected classes in a selection group when a\n   * selection is made.\n   * @param {!HTMLElement} selectionGroup\n   * @param {number} index The selected index value\n   * @private\n   */\n  handleSelectionGroup_(selectionGroup, index) {\n    // De-select the previous selection in this group.\n    const selectedIndex = this.adapter_.getSelectedElementIndex(selectionGroup);\n    if (selectedIndex >= 0) {\n      this.adapter_.removeAttributeFromElementAtIndex(selectedIndex, strings.ARIA_SELECTED_ATTR);\n      this.adapter_.removeClassFromElementAtIndex(selectedIndex, cssClasses.MENU_SELECTED_LIST_ITEM);\n    }\n    // Select the new list item in this group.\n    this.adapter_.addClassToElementAtIndex(index, cssClasses.MENU_SELECTED_LIST_ITEM);\n    this.adapter_.addAttributeToElementAtIndex(index, strings.ARIA_SELECTED_ATTR, 'true');\n  }\n\n  /**\n   * Returns the parent selection group of an element if one exists.\n   * @param listItem\n   * @return {?HTMLElement} parent selection group element or null.\n   * @private\n   */\n  getSelectionGroup_(listItem) {\n    let parent = this.adapter_.getParentElement(listItem);\n    let isGroup = this.adapter_.elementContainsClass(parent, cssClasses.MENU_SELECTION_GROUP);\n\n    // Iterate through ancestors until we find the group or get to the list.\n    while (!isGroup && !this.adapter_.elementContainsClass(parent, MDCListFoundation.cssClasses.ROOT)) {\n      parent = this.adapter_.getParentElement(parent);\n      isGroup = this.adapter_.elementContainsClass(parent, cssClasses.MENU_SELECTION_GROUP);\n    }\n\n    if (isGroup) {\n      return parent;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Find the first ancestor with the mdc-list-item class.\n   * @param {?HTMLElement} target\n   * @return {?HTMLElement}\n   * @private\n   */\n  getListItem_(target) {\n    let isListItem = this.adapter_.elementContainsClass(target, MDCListFoundation.cssClasses.LIST_ITEM_CLASS);\n\n    while (!isListItem) {\n      target = this.adapter_.getParentElement(target);\n      if (target) {\n        isListItem = this.adapter_.elementContainsClass(target, MDCListFoundation.cssClasses.LIST_ITEM_CLASS);\n      } else { // target has no parent element.\n        return null;\n      }\n    }\n\n    return target;\n  }\n}\n\nexport {MDCMenuFoundation};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @type {string|undefined} */\nlet storedTransformPropertyName_;\n\n/**\n * Returns the name of the correct transform property to use on the current browser.\n * @param {!Window} globalObj\n * @param {boolean=} forceRefresh\n * @return {string}\n */\nfunction getTransformPropertyName(globalObj, forceRefresh = false) {\n  if (storedTransformPropertyName_ === undefined || forceRefresh) {\n    const el = globalObj.document.createElement('div');\n    const transformPropertyName = ('transform' in el.style ? 'transform' : 'webkitTransform');\n    storedTransformPropertyName_ = transformPropertyName;\n  }\n\n  return storedTransformPropertyName_;\n}\n\nexport {getTransformPropertyName};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport * as util from './util';\nimport {MDCMenuSurfaceFoundation, AnchorMargin} from './foundation';\nimport {MDCMenuSurfaceAdapter} from './adapter';\nimport {Corner, CornerBit, strings, cssClasses} from './constants';\n\n/**\n * @extends MDCComponent<!MDCMenuSurfaceFoundation>\n */\nclass MDCMenuSurface extends MDCComponent {\n  /** @param {...?} args */\n  constructor(...args) {\n    super(...args);\n\n    /** @private {!Element} */\n    this.previousFocus_;\n    /** @private {!Element} */\n    this.anchorElement;\n    /** @private {Element} */\n    this.firstFocusableElement_;\n    /** @private {Element} */\n    this.lastFocusableElement_;\n    /** @private {!Function} */\n    this.handleKeydown_;\n    /** @private {!Function} */\n    this.handleBodyClick_;\n    /** @private {!Function} */\n    this.registerBodyClickListener_;\n    /** @private {!Function} */\n    this.deregisterBodyClickListener_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCMenuSurface}\n   */\n  static attachTo(root) {\n    return new MDCMenuSurface(root);\n  }\n\n  initialSyncWithDOM() {\n    if (this.root_.parentElement && this.root_.parentElement.classList.contains(cssClasses.ANCHOR)) {\n      this.anchorElement = this.root_.parentElement;\n    }\n\n    if (this.root_.classList.contains(cssClasses.FIXED)) {\n      this.setFixedPosition(true);\n    }\n\n    this.handleKeydown_ = (evt) => this.foundation_.handleKeydown(evt);\n    this.handleBodyClick_ = (evt) => this.foundation_.handleBodyClick(evt);\n\n    this.registerBodyClickListener_ = () => document.body.addEventListener('click', this.handleBodyClick_);\n    this.deregisterBodyClickListener_ = () => document.body.removeEventListener('click', this.handleBodyClick_);\n\n    this.root_.addEventListener('keydown', this.handleKeydown_);\n    this.root_.addEventListener(strings.OPENED_EVENT, this.registerBodyClickListener_);\n    this.root_.addEventListener(strings.CLOSED_EVENT, this.deregisterBodyClickListener_);\n  }\n\n  destroy() {\n    this.root_.removeEventListener('keydown', this.handleKeydown_);\n    this.root_.removeEventListener(strings.OPENED_EVENT, this.registerBodyClickListener_);\n    this.root_.removeEventListener(strings.CLOSED_EVENT, this.deregisterBodyClickListener_);\n    super.destroy();\n  }\n\n  /** @return {boolean} */\n  get open() {\n    return this.foundation_.isOpen();\n  }\n\n  /** @param {boolean} value */\n  set open(value) {\n    if (value) {\n      const focusableElements = this.root_.querySelectorAll(strings.FOCUSABLE_ELEMENTS);\n      this.firstFocusableElement_ = focusableElements.length > 0 ? focusableElements[0] : null;\n      this.lastFocusableElement_ = focusableElements.length > 0 ?\n        focusableElements[focusableElements.length - 1] : null;\n      this.foundation_.open();\n    } else {\n      this.foundation_.close();\n    }\n  }\n\n  /**\n   * Removes the menu-surface from it's current location and appends it to the\n   * body to overcome any overflow:hidden issues.\n   */\n  hoistMenuToBody() {\n    document.body.appendChild(this.root_.parentElement.removeChild(this.root_));\n    this.setIsHoisted(true);\n  }\n\n  /**\n   * Sets the foundation to use page offsets for an positioning when the menu\n   * is hoisted to the body.\n   * @param {boolean} isHoisted\n   */\n  setIsHoisted(isHoisted) {\n    this.foundation_.setIsHoisted(isHoisted);\n  }\n\n  /**\n   * Sets the element that the menu-surface is anchored to.\n   * @param {!Element} element\n   */\n  setMenuSurfaceAnchorElement(element) {\n    this.anchorElement = element;\n  }\n\n  /**\n   * Sets the menu-surface to position: fixed.\n   * @param {boolean} isFixed\n   */\n  setFixedPosition(isFixed) {\n    if (isFixed) {\n      this.root_.classList.add(cssClasses.FIXED);\n    } else {\n      this.root_.classList.remove(cssClasses.FIXED);\n    }\n\n    this.foundation_.setFixedPosition(isFixed);\n  }\n\n  /**\n   * Sets the absolute x/y position to position based on. Requires the menu to be hoisted.\n   * @param {number} x\n   * @param {number} y\n   */\n  setAbsolutePosition(x, y) {\n    this.foundation_.setAbsolutePosition(x, y);\n    this.setIsHoisted(true);\n  }\n\n  /**\n   * @param {!Corner} corner Default anchor corner alignment of top-left\n   *     surface corner.\n   */\n  setAnchorCorner(corner) {\n    this.foundation_.setAnchorCorner(corner);\n  }\n\n  /**\n   * @param {!AnchorMargin} margin\n   */\n  setAnchorMargin(margin) {\n    this.foundation_.setAnchorMargin(margin);\n  }\n\n  /** @param {boolean} quickOpen */\n  set quickOpen(quickOpen) {\n    this.foundation_.setQuickOpen(quickOpen);\n  }\n\n  /** @return {!MDCMenuSurfaceFoundation} */\n  getDefaultFoundation() {\n    return new MDCMenuSurfaceFoundation(\n      /** @type {!MDCMenuSurfaceAdapter} */ (Object.assign({\n        addClass: (className) => this.root_.classList.add(className),\n        removeClass: (className) => this.root_.classList.remove(className),\n        hasClass: (className) => this.root_.classList.contains(className),\n        hasAnchor: () => !!this.anchorElement,\n        notifyClose: () => this.emit(MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {}),\n        notifyOpen: () => this.emit(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {}),\n        isElementInContainer: (el) => this.root_ === el || this.root_.contains(el),\n        isRtl: () => getComputedStyle(this.root_).getPropertyValue('direction') === 'rtl',\n        setTransformOrigin: (origin) => {\n          this.root_.style[`${util.getTransformPropertyName(window)}-origin`] = origin;\n        },\n      },\n      this.getFocusAdapterMethods_(),\n      this.getDimensionAdapterMethods_())\n      ));\n  }\n\n  /**\n   * @return {!{\n   * isFocused: function(): boolean,\n   * saveFocus: function(),\n   * restoreFocus: function(),\n   * isFirstElementFocused: function(): boolean,\n   * isLastElementFocused: function(): boolean,\n   * focusFirstElement: function(),\n   * focusLastElement: function(),\n   * }}\n   * @private\n   */\n  getFocusAdapterMethods_() {\n    return {\n      isFocused: () => document.activeElement === this.root_,\n      saveFocus: () => {\n        this.previousFocus_ = document.activeElement;\n      },\n      restoreFocus: () => {\n        if (this.root_.contains(document.activeElement)) {\n          if (this.previousFocus_ && this.previousFocus_.focus) {\n            this.previousFocus_.focus();\n          }\n        }\n      },\n      isFirstElementFocused: () =>\n        this.firstFocusableElement_ && this.firstFocusableElement_ === document.activeElement,\n      isLastElementFocused: () =>\n        this.lastFocusableElement_ && this.lastFocusableElement_ === document.activeElement,\n      focusFirstElement: () =>\n        this.firstFocusableElement_ && this.firstFocusableElement_.focus && this.firstFocusableElement_.focus(),\n      focusLastElement: () =>\n        this.lastFocusableElement_ && this.lastFocusableElement_.focus && this.lastFocusableElement_.focus(),\n    };\n  }\n\n  /**\n   * @return {!{\n   * getInnerDimensions: function(),\n   * getAnchorDimensions: function(): (HTMLElement | null | * | ClientRect),\n   * getWindowDimensions: function(),\n   * setPosition: function(*),\n   * setMaxHeight: function(string)}}\n   * @private\n   */\n  getDimensionAdapterMethods_() {\n    return {\n      getInnerDimensions: () => {\n        return {width: this.root_.offsetWidth, height: this.root_.offsetHeight};\n      },\n      getAnchorDimensions: () => this.anchorElement && this.anchorElement.getBoundingClientRect(),\n      getWindowDimensions: () => {\n        return {width: window.innerWidth, height: window.innerHeight};\n      },\n      getBodyDimensions: () => {\n        return {width: document.body.clientWidth, height: document.body.clientHeight};\n      },\n      getWindowScroll: () => {\n        return {x: window.pageXOffset, y: window.pageYOffset};\n      },\n      setPosition: (position) => {\n        this.root_.style.left = 'left' in position ? position.left : null;\n        this.root_.style.right = 'right' in position ? position.right : null;\n        this.root_.style.top = 'top' in position ? position.top : null;\n        this.root_.style.bottom = 'bottom' in position ? position.bottom : null;\n      },\n      setMaxHeight: (height) => {\n        this.root_.style.maxHeight = height;\n      },\n    };\n  }\n}\n\nexport {MDCMenuSurfaceFoundation, MDCMenuSurface, AnchorMargin, Corner, CornerBit, util};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport {MDCMenuFoundation} from './foundation';\nimport {strings, cssClasses} from './constants';\nimport {MDCMenuSurface, Corner} from '@material/menu-surface/index';\nimport {MDCMenuSurfaceFoundation, AnchorMargin} from '@material/menu-surface/foundation';\nimport {MDCList, MDCListFoundation} from '@material/list/index';\n\n/**\n * @extends MDCComponent<!MDCMenuFoundation>\n */\nclass MDCMenu extends MDCComponent {\n  /** @param {...?} args */\n  constructor(...args) {\n    super(...args);\n    /** @private {!MDCMenuSurface} */\n    this.menuSurface_;\n    /** @private {!MDCList} */\n    this.list_;\n    /** @private {!Function} */\n    this.handleKeydown_;\n\n    /** @private {!Function} */\n    this.handleItemAction_;\n\n    /** @private {!Function} */\n    this.afterOpenedCallback_;\n  }\n\n  /**\n   * @param {!HTMLElement} root\n   * @return {!MDCMenu}\n   */\n  static attachTo(root) {\n    return new MDCMenu(root);\n  }\n\n  initialize(\n    menuSurfaceFactory = (el) => new MDCMenuSurface(el),\n    listFactory = (el) => new MDCList(el)) {\n    this.menuSurface_ = menuSurfaceFactory(this.root_);\n\n    const list = this.root_.querySelector(strings.LIST_SELECTOR);\n    if (list) {\n      this.list_ = listFactory(list);\n      this.list_.wrapFocus = true;\n    }\n  }\n\n  initialSyncWithDOM() {\n    this.afterOpenedCallback_ = () => this.handleAfterOpened_();\n    this.handleKeydown_ = (evt) => this.foundation_.handleKeydown(evt);\n    this.handleItemAction_ = (evt) => this.foundation_.handleItemAction(this.items[evt.detail]);\n\n    this.menuSurface_.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.afterOpenedCallback_);\n    this.listen('keydown', this.handleKeydown_);\n    this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);\n  }\n\n  destroy() {\n    if (this.list_) {\n      this.list_.destroy();\n    }\n\n    this.menuSurface_.destroy();\n    this.menuSurface_.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.afterOpenedCallback_);\n    this.unlisten('keydown', this.handleKeydown_);\n    this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction_);\n    super.destroy();\n  }\n\n  /** @return {boolean} */\n  get open() {\n    return this.menuSurface_.open;\n  }\n\n  /** @param {boolean} value */\n  set open(value) {\n    this.menuSurface_.open = value;\n  }\n\n  /** @return {boolean} */\n  get wrapFocus() {\n    return this.list_.wrapFocus;\n  }\n\n  /** @param {boolean} value */\n  set wrapFocus(value) {\n    this.list_.wrapFocus = value;\n  }\n\n  /**\n   * @param {!Corner} corner Default anchor corner alignment of top-left\n   *     menu corner.\n   */\n  setAnchorCorner(corner) {\n    this.menuSurface_.setAnchorCorner(corner);\n  }\n\n  /**\n   * @param {!AnchorMargin} margin\n   */\n  setAnchorMargin(margin) {\n    this.menuSurface_.setAnchorMargin(margin);\n  }\n\n  /**\n   * Return the items within the menu. Note that this only contains the set of elements within\n   * the items container that are proper list items, and not supplemental / presentational DOM\n   * elements.\n   * @return {!Array<!HTMLElement>}\n   */\n  get items() {\n    return this.list_.listElements;\n  }\n\n  /**\n   * Return the item within the menu at the index specified.\n   * @param {number} index\n   * @return {?HTMLElement}\n   */\n  getOptionByIndex(index) {\n    const items = this.items;\n\n    if (index < items.length) {\n      return this.items[index];\n    } else {\n      return null;\n    }\n  }\n\n  /** @param {boolean} quickOpen */\n  set quickOpen(quickOpen) {\n    this.menuSurface_.quickOpen = quickOpen;\n  }\n\n  /** @param {boolean} isFixed */\n  setFixedPosition(isFixed) {\n    this.menuSurface_.setFixedPosition(isFixed);\n  }\n\n  hoistMenuToBody() {\n    this.menuSurface_.hoistMenuToBody();\n  }\n\n  /** @param {boolean} isHoisted */\n  setIsHoisted(isHoisted) {\n    this.menuSurface_.setIsHoisted(isHoisted);\n  }\n\n  /**\n   * @param {number} x\n   * @param {number} y\n   */\n  setAbsolutePosition(x, y) {\n    this.menuSurface_.setAbsolutePosition(x, y);\n  }\n\n  /**\n   * Sets the element that the menu-surface is anchored to.\n   * @param {!HTMLElement} element\n   */\n  setAnchorElement(element) {\n    this.menuSurface_.anchorElement = element;\n  }\n\n  handleAfterOpened_() {\n    const list = this.items;\n    if (list.length > 0) {\n      list[0].focus();\n    }\n  }\n\n  /** @return {!MDCMenuFoundation} */\n  getDefaultFoundation() {\n    return new MDCMenuFoundation({\n      addClassToElementAtIndex: (index, className) => {\n        const list = this.items;\n        list[index].classList.add(className);\n      },\n      removeClassFromElementAtIndex: (index, className) => {\n        const list = this.items;\n        list[index].classList.remove(className);\n      },\n      addAttributeToElementAtIndex: (index, attr, value) => {\n        const list = this.items;\n        list[index].setAttribute(attr, value);\n      },\n      removeAttributeFromElementAtIndex: (index, attr) => {\n        const list = this.items;\n        list[index].removeAttribute(attr);\n      },\n      elementContainsClass: (element, className) => element.classList.contains(className),\n      closeSurface: () => this.open = false,\n      getElementIndex: (element) => this.items.indexOf(element),\n      getParentElement: (element) => element.parentElement,\n      getSelectedElementIndex: (selectionGroup) => {\n        return this.items.indexOf(selectionGroup.querySelector(`.${cssClasses.MENU_SELECTED_LIST_ITEM}`));\n      },\n      notifySelected: (evtData) => this.emit(strings.SELECTED_EVENT, {\n        index: evtData.index,\n        item: this.items[evtData.index],\n      }),\n    });\n  }\n}\n\nexport {MDCMenuFoundation, MDCMenu, AnchorMargin, Corner};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Notched Outline.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Notched Outline into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCNotchedOutlineAdapter {\n  /**\n   * Adds a class to the root element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Sets the width style property of the notch element.\n   * @param {number} width\n   */\n  setNotchWidthProperty(width) {}\n\n  /**\n   * Removes the width style property from the notch element.\n   */\n  removeNotchWidthProperty() {}\n}\n\nexport default MDCNotchedOutlineAdapter;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  NOTCH_ELEMENT_SELECTOR: '.mdc-notched-outline__notch',\n};\n\n/** @enum {number} */\nconst numbers = {\n  // This should stay in sync with $mdc-notched-outline-padding * 2.\n  NOTCH_ELEMENT_PADDING: 8,\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  OUTLINE_NOTCHED: 'mdc-notched-outline--notched',\n  OUTLINE_UPGRADED: 'mdc-notched-outline--upgraded',\n  NO_LABEL: 'mdc-notched-outline--no-label',\n};\n\nexport {cssClasses, numbers, strings};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCNotchedOutlineAdapter from './adapter';\nimport {cssClasses, strings, numbers} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCNotchedOutlineAdapter>}\n * @final\n */\nclass MDCNotchedOutlineFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {number} */\n  static get numbers() {\n    return numbers;\n  }\n\n  /**\n   * {@see MDCNotchedOutlineAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCNotchedOutlineAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCNotchedOutlineAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      setNotchWidthProperty: () => {},\n      removeNotchWidthProperty: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCNotchedOutlineAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCNotchedOutlineFoundation.defaultAdapter, adapter));\n  }\n\n  /**\n   * Adds the outline notched selector and updates the notch width\n   * calculated based off of notchWidth.\n   * @param {number} notchWidth\n   */\n  notch(notchWidth) {\n    const {OUTLINE_NOTCHED} = MDCNotchedOutlineFoundation.cssClasses;\n\n    if (notchWidth > 0) {\n      notchWidth += numbers.NOTCH_ELEMENT_PADDING; // Add padding from left/right.\n    }\n\n    this.adapter_.setNotchWidthProperty(notchWidth);\n    this.adapter_.addClass(OUTLINE_NOTCHED);\n  }\n\n  /**\n   * Removes notched outline selector to close the notch in the outline.\n   */\n  closeNotch() {\n    const {OUTLINE_NOTCHED} = MDCNotchedOutlineFoundation.cssClasses;\n    this.adapter_.removeClass(OUTLINE_NOTCHED);\n    this.adapter_.removeNotchWidthProperty();\n  }\n}\n\nexport default MDCNotchedOutlineFoundation;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCNotchedOutlineAdapter from './adapter';\nimport MDCNotchedOutlineFoundation from './foundation';\nimport {MDCFloatingLabelFoundation} from '@material/floating-label/index';\nimport {cssClasses, strings} from './constants';\n\n/**\n * @extends {MDCComponent<!MDCNotchedOutlineFoundation>}\n * @final\n */\nclass MDCNotchedOutline extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCNotchedOutline}\n   */\n  static attachTo(root) {\n    return new MDCNotchedOutline(root);\n  }\n  /** @param {...?} args */\n  constructor(...args) {\n    super(...args);\n    /** @private {Element} */\n    this.notchElement_;\n  }\n\n  initialSyncWithDOM() {\n    const label = this.root_.querySelector('.' + MDCFloatingLabelFoundation.cssClasses.ROOT);\n    this.notchElement_ = this.root_.querySelector(strings.NOTCH_ELEMENT_SELECTOR);\n\n    if (label) {\n      label.style.transitionDuration = '0s';\n      this.root_.classList.add(cssClasses.OUTLINE_UPGRADED);\n      requestAnimationFrame(() => {\n        label.style.transitionDuration = '';\n      });\n    } else {\n      this.root_.classList.add(cssClasses.NO_LABEL);\n    }\n  }\n\n  /**\n    * Updates classes and styles to open the notch to the specified width.\n    * @param {number} notchWidth The notch width in the outline.\n    */\n  notch(notchWidth) {\n    this.foundation_.notch(notchWidth);\n  }\n\n  /**\n   * Updates classes and styles to close the notch.\n   */\n  closeNotch() {\n    this.foundation_.closeNotch();\n  }\n\n  /**\n   * @return {!MDCNotchedOutlineFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCNotchedOutlineFoundation(\n      /** @type {!MDCNotchedOutlineAdapter} */ (Object.assign({\n        addClass: (className) => this.root_.classList.add(className),\n        removeClass: (className) => this.root_.classList.remove(className),\n        setNotchWidthProperty: (width) => this.notchElement_.style.setProperty('width', width + 'px'),\n        removeNotchWidthProperty: () => this.notchElement_.style.removeProperty('width'),\n      })));\n  }\n}\n\nexport {MDCNotchedOutline, MDCNotchedOutlineFoundation};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Select Icon.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the select icon into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCSelectIconAdapter {\n  /**\n   * Gets the value of an attribute on the icon element.\n   * @param {string} attr\n   * @return {string}\n   */\n  getAttr(attr) {}\n\n  /**\n   * Sets an attribute on the icon element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setAttr(attr, value) {}\n\n  /**\n   * Removes an attribute from the icon element.\n   * @param {string} attr\n   */\n  removeAttr(attr) {}\n\n  /**\n   * Sets the text content of the icon element.\n   * @param {string} content\n   */\n  setContent(content) {}\n\n  /**\n   * Registers an event listener on the icon element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerInteractionHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the icon element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterInteractionHandler(evtType, handler) {}\n\n  /**\n   * Emits a custom event \"MDCSelect:icon\" denoting a user has clicked the icon.\n   */\n  notifyIconAction() {}\n}\n\nexport default MDCSelectIconAdapter;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  ICON_EVENT: 'MDCSelect:icon',\n  ICON_ROLE: 'button',\n};\n\nexport {strings};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCSelectIconAdapter from './adapter';\nimport {strings} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCSelectIconAdapter>}\n * @final\n */\nclass MDCSelectIconFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCSelectIconAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCSelectIconAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCSelectIconAdapter} */ ({\n      getAttr: () => {},\n      setAttr: () => {},\n      removeAttr: () => {},\n      setContent: () => {},\n      registerInteractionHandler: () => {},\n      deregisterInteractionHandler: () => {},\n      notifyIconAction: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCSelectIconAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCSelectIconFoundation.defaultAdapter, adapter));\n\n    /** @private {string?} */\n    this.savedTabIndex_ = null;\n\n    /** @private {function(!Event): undefined} */\n    this.interactionHandler_ = (evt) => this.handleInteraction(evt);\n  }\n\n  init() {\n    this.savedTabIndex_ = this.adapter_.getAttr('tabindex');\n\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.registerInteractionHandler(evtType, this.interactionHandler_);\n    });\n  }\n\n  destroy() {\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.deregisterInteractionHandler(evtType, this.interactionHandler_);\n    });\n  }\n\n  /** @param {boolean} disabled */\n  setDisabled(disabled) {\n    if (!this.savedTabIndex_) {\n      return;\n    }\n\n    if (disabled) {\n      this.adapter_.setAttr('tabindex', '-1');\n      this.adapter_.removeAttr('role');\n    } else {\n      this.adapter_.setAttr('tabindex', this.savedTabIndex_);\n      this.adapter_.setAttr('role', strings.ICON_ROLE);\n    }\n  }\n\n  /** @param {string} label */\n  setAriaLabel(label) {\n    this.adapter_.setAttr('aria-label', label);\n  }\n\n  /** @param {string} content */\n  setContent(content) {\n    this.adapter_.setContent(content);\n  }\n\n  /**\n   * Handles an interaction event\n   * @param {!Event} evt\n   */\n  handleInteraction(evt) {\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyIconAction();\n    }\n  }\n}\n\nexport default MDCSelectIconFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCSelectIconAdapter from './adapter';\nimport MDCSelectIconFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCSelectIconFoundation>}\n * @final\n */\nclass MDCSelectIcon extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCSelectIcon}\n   */\n  static attachTo(root) {\n    return new MDCSelectIcon(root);\n  }\n\n  /**\n   * @return {!MDCSelectIconFoundation}\n   */\n  get foundation() {\n    return this.foundation_;\n  }\n\n  /**\n   * @return {!MDCSelectIconFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCSelectIconFoundation(/** @type {!MDCSelectIconAdapter} */ (Object.assign({\n      getAttr: (attr) => this.root_.getAttribute(attr),\n      setAttr: (attr, value) => this.root_.setAttribute(attr, value),\n      removeAttr: (attr) => this.root_.removeAttribute(attr),\n      setContent: (content) => {\n        this.root_.textContent = content;\n      },\n      registerInteractionHandler: (evtType, handler) => this.root_.addEventListener(evtType, handler),\n      deregisterInteractionHandler: (evtType, handler) => this.root_.removeEventListener(evtType, handler),\n      notifyIconAction: () => this.emit(\n        MDCSelectIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */),\n    })));\n  }\n}\n\nexport {MDCSelectIcon, MDCSelectIconFoundation};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Select Helper Text.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Select helper text into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCSelectHelperTextAdapter {\n  /**\n   * Adds a class to the helper text element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the helper text element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns whether or not the helper text element contains the given class.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Sets an attribute with a given value on the helper text element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setAttr(attr, value) {}\n\n  /**\n   * Removes an attribute from the helper text element.\n   * @param {string} attr\n   */\n  removeAttr(attr) {}\n\n  /**\n   * Sets the text content for the helper text element.\n   * @param {string} content\n   */\n  setContent(content) {}\n}\n\nexport default MDCSelectHelperTextAdapter;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  ARIA_HIDDEN: 'aria-hidden',\n  ROLE: 'role',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  HELPER_TEXT_PERSISTENT: 'mdc-select-helper-text--persistent',\n  HELPER_TEXT_VALIDATION_MSG: 'mdc-select-helper-text--validation-msg',\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCSelectHelperTextAdapter from './adapter';\nimport {cssClasses, strings} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCSelectHelperTextAdapter>}\n * @final\n */\nclass MDCSelectHelperTextFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCSelectHelperTextAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCSelectHelperTextAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCSelectHelperTextAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      setAttr: () => {},\n      removeAttr: () => {},\n      setContent: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCSelectHelperTextAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCSelectHelperTextFoundation.defaultAdapter, adapter));\n  }\n\n  /**\n   * Sets the content of the helper text field.\n   * @param {string} content\n   */\n  setContent(content) {\n    this.adapter_.setContent(content);\n  }\n\n  /** @param {boolean} isPersistent Sets the persistency of the helper text. */\n  setPersistent(isPersistent) {\n    if (isPersistent) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    }\n  }\n\n  /**\n   * @param {boolean} isValidation True to make the helper text act as an\n   *   error validation message.\n   */\n  setValidation(isValidation) {\n    if (isValidation) {\n      this.adapter_.addClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    } else {\n      this.adapter_.removeClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    }\n  }\n\n  /** Makes the helper text visible to the screen reader. */\n  showToScreenReader() {\n    this.adapter_.removeAttr(strings.ARIA_HIDDEN);\n  }\n\n  /**\n   * Sets the validity of the helper text based on the select validity.\n   * @param {boolean} selectIsValid\n   */\n  setValidity(selectIsValid) {\n    const helperTextIsPersistent = this.adapter_.hasClass(cssClasses.HELPER_TEXT_PERSISTENT);\n    const helperTextIsValidationMsg = this.adapter_.hasClass(cssClasses.HELPER_TEXT_VALIDATION_MSG);\n    const validationMsgNeedsDisplay = helperTextIsValidationMsg && !selectIsValid;\n\n    if (validationMsgNeedsDisplay) {\n      this.adapter_.setAttr(strings.ROLE, 'alert');\n    } else {\n      this.adapter_.removeAttr(strings.ROLE);\n    }\n\n    if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {\n      this.hide_();\n    }\n  }\n\n  /**\n   * Hides the help text from screen readers.\n   * @private\n   */\n  hide_() {\n    this.adapter_.setAttr(strings.ARIA_HIDDEN, 'true');\n  }\n}\n\nexport default MDCSelectHelperTextFoundation;\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCSelectHelperTextAdapter from './adapter';\nimport MDCSelectHelperTextFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCSelectHelperTextFoundation>}\n * @final\n */\nclass MDCSelectHelperText extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCSelectHelperText}\n   */\n  static attachTo(root) {\n    return new MDCSelectHelperText(root);\n  }\n\n  /**\n   * @return {!MDCSelectHelperTextFoundation}\n   */\n  get foundation() {\n    return this.foundation_;\n  }\n\n  /**\n   * @return {!MDCSelectHelperTextFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCSelectHelperTextFoundation(/** @type {!MDCSelectHelperTextAdapter} */ (Object.assign({\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      setAttr: (attr, value) => this.root_.setAttribute(attr, value),\n      removeAttr: (attr) => this.root_.removeAttribute(attr),\n      setContent: (content) => {\n        this.root_.textContent = content;\n      },\n    })));\n  }\n}\n\nexport {MDCSelectHelperText, MDCSelectHelperTextFoundation};\n","/**\n * @license\n * Copyright 2018 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n/* eslint-disable no-unused-vars */\nimport {MDCSelectIconFoundation} from './icon/index';\nimport {MDCSelectHelperTextFoundation} from './helper-text/index';\n/* eslint-enable no-unused-vars */\n\n/**\n * @typedef {{\n *   leadingIcon: (!MDCSelectIconFoundation|undefined),\n *   helperText: (!MDCSelectHelperTextFoundation|undefined),\n * }}\n */\nlet FoundationMapType;\n\n/**\n * Adapter for MDC Select. Provides an interface for managing\n * - classes\n * - dom\n * - event handlers\n *\n * Additionally, provides type information for the adapter to the Closure\n * compiler.\n *\n * Implement this adapter for your framework of choice to delegate updates to\n * the component in your framework of choice. See architecture documentation\n * for more details.\n * https://github.com/material-components/material-components-web/blob/master/docs/code/architecture.md\n *\n * @record\n */\n\nclass MDCSelectAdapter {\n  /**\n   * Adds class to root element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root element contains the given class name.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Activates the bottom line, showing a focused state.\n   */\n  activateBottomLine() {}\n\n  /**\n   * Deactivates the bottom line.\n   */\n  deactivateBottomLine() {}\n\n  /**\n   * Sets the value of the select.\n   * @param {string} value\n   */\n  setValue(value) {}\n\n  /**\n   * Returns the selected value of the select element.\n   * @return {string}\n   */\n  getValue() {}\n\n  /**\n   * Floats label determined based off of the shouldFloat argument.\n   * @param {boolean} shouldFloat\n   */\n  floatLabel(shouldFloat) {}\n\n  /**\n   * Returns width of label in pixels, if the label exists.\n   * @return {number}\n   */\n  getLabelWidth() {}\n\n  /**\n   * Returns true if outline element exists, false if it doesn't.\n   * @return {boolean}\n   */\n  hasOutline() {}\n\n  /**\n   * Only implement if outline element exists.\n   * @param {number} labelWidth\n   */\n  notchOutline(labelWidth) {}\n\n  /**\n   * Closes notch in outline element, if the outline exists.\n   */\n  closeOutline() {}\n\n  /**\n   * Opens the menu.\n   */\n  openMenu() {}\n\n  /**\n   * Closes the menu.\n   */\n  closeMenu() {}\n\n  /**\n   * Returns true if the menu is currently open.\n   * @return {boolean}\n   */\n  isMenuOpen() {}\n\n  /**\n   * Sets the selected index of the select to the index provided.\n   * @param {number} index\n   */\n  setSelectedIndex(index) {}\n\n  /**\n   * Sets the select to disabled.\n   * @param {boolean} isDisabled\n   */\n  setDisabled(isDisabled) {}\n\n  /**\n   * Sets the line ripple transform origin center.\n   * @param {number} normalizedX\n   */\n  setRippleCenter(normalizedX) {}\n\n  /**\n   * Emits a change event when an element is selected.\n   * @param {string} value\n   */\n  notifyChange(value) {}\n\n  /**\n   * Checks if the select is currently valid.\n   * @return {boolean} isValid\n   */\n  checkValidity() {}\n\n  /**\n   * Adds/Removes the invalid class.\n   * @param {boolean} isValid\n   */\n  setValid(isValid) {}\n}\n\nexport {MDCSelectAdapter, FoundationMapType};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  DISABLED: 'mdc-select--disabled',\n  ROOT: 'mdc-select',\n  OUTLINED: 'mdc-select--outlined',\n  FOCUSED: 'mdc-select--focused',\n  SELECTED_ITEM_CLASS: 'mdc-list-item--selected',\n  WITH_LEADING_ICON: 'mdc-select--with-leading-icon',\n  INVALID: 'mdc-select--invalid',\n  REQUIRED: 'mdc-select--required',\n};\n\n/** @enum {string} */\nconst strings = {\n  ARIA_CONTROLS: 'aria-controls',\n  CHANGE_EVENT: 'MDCSelect:change',\n  SELECTED_ITEM_SELECTOR: `.${cssClasses.SELECTED_ITEM_CLASS}`,\n  LEADING_ICON_SELECTOR: '.mdc-select__icon',\n  SELECTED_TEXT_SELECTOR: '.mdc-select__selected-text',\n  HIDDEN_INPUT_SELECTOR: 'input[type=\"hidden\"]',\n  MENU_SELECTOR: '.mdc-select__menu',\n  LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',\n  LABEL_SELECTOR: '.mdc-floating-label',\n  NATIVE_CONTROL_SELECTOR: '.mdc-select__native-control',\n  OUTLINE_SELECTOR: '.mdc-notched-outline',\n  ENHANCED_VALUE_ATTR: 'data-value',\n  ARIA_SELECTED_ATTR: 'aria-selected',\n};\n\n/** @enum {number} */\nconst numbers = {\n  LABEL_SCALE: 0.75,\n};\n\nexport {cssClasses, strings, numbers};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\n/* eslint-disable no-unused-vars */\nimport {MDCSelectAdapter, FoundationMapType} from './adapter';\nimport {MDCSelectIconFoundation} from './icon/index';\nimport {MDCSelectHelperTextFoundation} from './helper-text/index';\n/* eslint-enable no-unused-vars */\nimport {cssClasses, strings, numbers} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCSelectAdapter>}\n * @final\n */\nclass MDCSelectFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {number} */\n  static get numbers() {\n    return numbers;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCSelectAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCSelectAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCSelectAdapter} */ ({\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      hasClass: (/* className: string */) => false,\n      activateBottomLine: () => {},\n      deactivateBottomLine: () => {},\n      setValue: () => {},\n      getValue: () => {},\n      floatLabel: (/* value: boolean */) => {},\n      getLabelWidth: () => {},\n      hasOutline: () => false,\n      notchOutline: (/* labelWidth: number, */) => {},\n      closeOutline: () => {},\n      openMenu: () => {},\n      closeMenu: () => {},\n      isMenuOpen: () => {},\n      setSelectedIndex: () => {},\n      setDisabled: () => {},\n      setRippleCenter: () => {},\n      notifyChange: () => {},\n      checkValidity: () => {},\n      setValid: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCSelectAdapter} adapter\n   * @param {!FoundationMapType=} foundationMap Map from subcomponent names to their subfoundations.\n   */\n  constructor(adapter, foundationMap = /** @type {!FoundationMapType} */ ({})) {\n    super(Object.assign(MDCSelectFoundation.defaultAdapter, adapter));\n\n    /** @type {!MDCSelectIconFoundation|undefined} */\n    this.leadingIcon_ = foundationMap.leadingIcon;\n    /** @type {!MDCSelectHelperTextFoundation|undefined} */\n    this.helperText_ = foundationMap.helperText;\n  }\n\n  setSelectedIndex(index) {\n    this.adapter_.setSelectedIndex(index);\n    this.adapter_.closeMenu();\n    const didChange = true;\n    this.handleChange(didChange);\n  }\n\n  setValue(value) {\n    this.adapter_.setValue(value);\n    const didChange = true;\n    this.handleChange(didChange);\n  }\n\n  getValue() {\n    return this.adapter_.getValue();\n  }\n\n  setDisabled(isDisabled) {\n    isDisabled ? this.adapter_.addClass(cssClasses.DISABLED) : this.adapter_.removeClass(cssClasses.DISABLED);\n    this.adapter_.setDisabled(isDisabled);\n    this.adapter_.closeMenu();\n\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setDisabled(isDisabled);\n    }\n  }\n\n  /**\n   * @param {string} content Sets the content of the helper text.\n   */\n  setHelperTextContent(content) {\n    if (this.helperText_) {\n      this.helperText_.setContent(content);\n    }\n  }\n\n  layout() {\n    const openNotch = this.getValue().length > 0;\n    this.notchOutline(openNotch);\n  }\n\n  /**\n   * Handles value changes, via change event or programmatic updates.\n   */\n  handleChange(didChange = true) {\n    const value = this.getValue();\n    const optionHasValue = value.length > 0;\n    const isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n\n    this.notchOutline(optionHasValue);\n\n    if (!this.adapter_.hasClass(cssClasses.FOCUSED)) {\n      this.adapter_.floatLabel(optionHasValue);\n    }\n\n    if (didChange) {\n      this.adapter_.notifyChange(value);\n\n      if (isRequired) {\n        this.setValid(this.isValid());\n        if (this.helperText_) {\n          this.helperText_.setValidity(this.isValid());\n        }\n      }\n    }\n  }\n\n  /**\n   * Handles focus events from select element.\n   */\n  handleFocus() {\n    this.adapter_.addClass(cssClasses.FOCUSED);\n    this.adapter_.floatLabel(true);\n    this.notchOutline(true);\n    this.adapter_.activateBottomLine();\n    if (this.helperText_) {\n      this.helperText_.showToScreenReader();\n    }\n  }\n\n  /**\n   * Handles blur events from select element.\n   */\n  handleBlur() {\n    if (this.adapter_.isMenuOpen()) return;\n    this.adapter_.removeClass(cssClasses.FOCUSED);\n    this.handleChange(false);\n    this.adapter_.deactivateBottomLine();\n\n    const isRequired = this.adapter_.hasClass(cssClasses.REQUIRED);\n\n    if (isRequired) {\n      this.setValid(this.isValid());\n      if (this.helperText_) {\n        this.helperText_.setValidity(this.isValid());\n      }\n    }\n  }\n\n  handleClick(normalizedX) {\n    if (this.adapter_.isMenuOpen()) return;\n    this.adapter_.setRippleCenter(normalizedX);\n\n    this.adapter_.openMenu();\n  }\n\n  handleKeydown(event) {\n    if (this.adapter_.isMenuOpen()) return;\n\n    const isEnter = event.key === 'Enter' || event.keyCode === 13;\n    const isSpace = event.key === 'Space' || event.keyCode === 32;\n    const arrowUp = event.key === 'ArrowUp' || event.keyCode === 38;\n    const arrowDown = event.key === 'ArrowDown' || event.keyCode === 40;\n\n    if (this.adapter_.hasClass(cssClasses.FOCUSED) && (isEnter || isSpace || arrowUp || arrowDown)) {\n      this.adapter_.openMenu();\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens/closes the notched outline.\n   * @param {boolean} openNotch\n   */\n  notchOutline(openNotch) {\n    if (!this.adapter_.hasOutline()) {\n      return;\n    }\n    const isFocused = this.adapter_.hasClass(cssClasses.FOCUSED);\n\n    if (openNotch) {\n      const labelScale = numbers.LABEL_SCALE;\n      const labelWidth = this.adapter_.getLabelWidth() * labelScale;\n      this.adapter_.notchOutline(labelWidth);\n    } else if (!isFocused) {\n      this.adapter_.closeOutline();\n    }\n  }\n\n  /**\n   * Sets the aria label of the leading icon.\n   * @param {string} label\n   */\n  setLeadingIconAriaLabel(label) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setAriaLabel(label);\n    }\n  }\n\n  /**\n   * Sets the text content of the leading icon.\n   * @param {string} content\n   */\n  setLeadingIconContent(content) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setContent(content);\n    }\n  }\n\n  setValid(isValid) {\n    this.adapter_.setValid(isValid);\n  }\n\n  isValid() {\n    return this.adapter_.checkValidity();\n  }\n}\n\nexport default MDCSelectFoundation;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport {MDCFloatingLabel} from '@material/floating-label/index';\nimport {MDCLineRipple} from '@material/line-ripple/index';\nimport {MDCMenu} from '@material/menu/index';\nimport {MDCRipple, MDCRippleFoundation} from '@material/ripple/index';\nimport {MDCNotchedOutline} from '@material/notched-outline/index';\nimport MDCSelectFoundation from './foundation';\nimport {cssClasses, strings} from './constants';\n\n/* eslint-disable no-unused-vars */\nimport {MDCSelectAdapter, FoundationMapType} from './adapter';\nimport {MDCSelectIcon, MDCSelectIconFoundation} from './icon/index';\nimport {MDCSelectHelperText, MDCSelectHelperTextFoundation} from './helper-text/index';\n/* eslint-enable no-unused-vars */\n\n// Closure has issues with {this as that} syntax.\nimport * as menuSurfaceConstants from '@material/menu-surface/constants';\nimport * as menuConstants from '@material/menu/constants';\n\nconst VALIDATION_ATTR_WHITELIST = ['required', 'aria-required'];\n\n/**\n * @extends MDCComponent<!MDCSelectFoundation>\n */\nclass MDCSelect extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n    /** @private {?Element} */\n    this.nativeControl_;\n    /** @private {?Element} */\n    this.selectedText_;\n    /** @private {?Element} */\n    this.hiddenInput_;\n    /** @private {?MDCSelectIcon} */\n    this.leadingIcon_;\n    /** @private {?MDCSelectHelperText} */\n    this.helperText_;\n    /** @private {?Element} */\n    this.menuElement_;\n    /** @type {?MDCMenu} */\n    this.menu_;\n    /** @type {?MDCRipple} */\n    this.ripple;\n    /** @private {?MDCLineRipple} */\n    this.lineRipple_;\n    /** @private {?MDCFloatingLabel} */\n    this.label_;\n    /** @private {?MDCNotchedOutline} */\n    this.outline_;\n    /** @private {!Function} */\n    this.handleChange_;\n    /** @private {!Function} */\n    this.handleFocus_;\n    /** @private {!Function} */\n    this.handleBlur_;\n    /** @private {!Function} */\n    this.handleClick_;\n    /** @private {!Function} */\n    this.handleKeydown_;\n    /** @private {!Function} */\n    this.handleMenuOpened_;\n    /** @private {!Function} */\n    this.handleMenuClosed_;\n    /** @private {!Function} */\n    this.handleMenuSelected_;\n    /** @private {boolean} */\n    this.menuOpened_ = false;\n    /** @private {!MutationObserver} */\n    this.validationObserver_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCSelect}\n   */\n  static attachTo(root) {\n    return new MDCSelect(root);\n  }\n\n  /**\n   * @return {string} The value of the select.\n   */\n  get value() {\n    return this.foundation_.getValue();\n  }\n\n  /**\n   * @param {string} value The value to set on the select.\n   */\n  set value(value) {\n    this.foundation_.setValue(value);\n  }\n\n  /**\n   * @return {number} The selected index of the select.\n   */\n  get selectedIndex() {\n    let selectedIndex;\n    if (this.menuElement_) {\n      const selectedEl = /** @type {!HTMLElement} */ (this.menuElement_.querySelector(strings.SELECTED_ITEM_SELECTOR));\n      selectedIndex = this.menu_.items.indexOf(selectedEl);\n    } else {\n      selectedIndex = this.nativeControl_.selectedIndex;\n    }\n    return selectedIndex;\n  }\n\n  /**\n   * @param {number} selectedIndex The index of the option to be set on the select.\n   */\n  set selectedIndex(selectedIndex) {\n    this.foundation_.setSelectedIndex(selectedIndex);\n  }\n\n  /**\n   * @return {boolean} True if the select is disabled.\n   */\n  get disabled() {\n    return this.root_.classList.contains(cssClasses.DISABLED) ||\n      (this.nativeControl_ ? this.nativeControl_.disabled : false);\n  }\n\n  /**\n   * @param {boolean} disabled Sets the select disabled or enabled.\n   */\n  set disabled(disabled) {\n    this.foundation_.setDisabled(disabled);\n  }\n\n  /**\n   * Sets the aria label of the leading icon.\n   * @param {string} label\n   */\n  set leadingIconAriaLabel(label) {\n    this.foundation_.setLeadingIconAriaLabel(label);\n  }\n\n  /**\n   * Sets the text content of the leading icon.\n   * @param {string} content\n   */\n  set leadingIconContent(content) {\n    this.foundation_.setLeadingIconContent(content);\n  }\n\n  /**\n   * Sets the text content of the helper text.\n   * @param {string} content\n   */\n  set helperTextContent(content) {\n    this.foundation_.setHelperTextContent(content);\n  }\n\n  /**\n   * Sets the current invalid state of the select.\n   * @param {boolean} isValid\n   */\n  set valid(isValid) {\n    this.foundation_.setValid(isValid);\n  }\n\n  /**\n   * Checks if the select is in a valid state.\n   * @return {boolean}\n   */\n  get valid() {\n    return this.foundation_.isValid();\n  }\n\n  /**\n   * Sets the control to the required state.\n   * @param {boolean} isRequired\n   */\n  set required(isRequired) {\n    if (this.nativeControl_) {\n      this.nativeControl_.required = isRequired;\n    } else {\n      if (isRequired) {\n        this.selectedText_.setAttribute('aria-required', isRequired.toString());\n      } else {\n        this.selectedText_.removeAttribute('aria-required');\n      }\n    }\n  }\n\n  /**\n   * Returns whether the select is required.\n   * @return {boolean}\n   */\n  get required() {\n    if (this.nativeControl_) {\n      return this.nativeControl_.required;\n    } else {\n      return this.selectedText_.getAttribute('aria-required') === 'true';\n    }\n  }\n\n  /**\n   * Recomputes the outline SVG path for the outline element.\n   */\n  layout() {\n    this.foundation_.layout();\n  }\n\n\n  /**\n   * @param {(function(!Element): !MDCLineRipple)=} lineRippleFactory A function which creates a new MDCLineRipple.\n   * @param {(function(!Element): !MDCFloatingLabel)=} labelFactory A function which creates a new MDCFloatingLabel.\n   * @param {(function(!Element): !MDCNotchedOutline)=} outlineFactory A function which creates a new MDCNotchedOutline.\n   * @param {(function(!Element): !MDCMenu)=} menuFactory A function which creates a new MDCMenu.\n   * @param {(function(!Element): !MDCSelectIcon)=} iconFactory A function which creates a new MDCSelectIcon.\n   * @param {(function(!Element): !MDCSelectHelperText)=} helperTextFactory A function which creates a new\n   * MDCSelectHelperText.\n   */\n  initialize(\n    labelFactory = (el) => new MDCFloatingLabel(el),\n    lineRippleFactory = (el) => new MDCLineRipple(el),\n    outlineFactory = (el) => new MDCNotchedOutline(el),\n    menuFactory = (el) => new MDCMenu(el),\n    iconFactory = (el) => new MDCSelectIcon(el),\n    helperTextFactory = (el) => new MDCSelectHelperText(el)) {\n    this.nativeControl_ = /** @type {HTMLElement} */ (this.root_.querySelector(strings.NATIVE_CONTROL_SELECTOR));\n    this.selectedText_ = /** @type {HTMLElement} */ (this.root_.querySelector(strings.SELECTED_TEXT_SELECTOR));\n\n    if (this.selectedText_) {\n      this.enhancedSelectSetup_(menuFactory);\n    }\n\n    const labelElement = this.root_.querySelector(strings.LABEL_SELECTOR);\n    if (labelElement) {\n      this.label_ = labelFactory(labelElement);\n    }\n    const lineRippleElement = this.root_.querySelector(strings.LINE_RIPPLE_SELECTOR);\n    if (lineRippleElement) {\n      this.lineRipple_ = lineRippleFactory(lineRippleElement);\n    }\n    const outlineElement = this.root_.querySelector(strings.OUTLINE_SELECTOR);\n    if (outlineElement) {\n      this.outline_ = outlineFactory(outlineElement);\n    }\n\n    const leadingIcon = this.root_.querySelector(strings.LEADING_ICON_SELECTOR);\n    if (leadingIcon) {\n      this.root_.classList.add(cssClasses.WITH_LEADING_ICON);\n      this.leadingIcon_ = iconFactory(leadingIcon);\n\n      if (this.menuElement_) {\n        this.menuElement_.classList.add(cssClasses.WITH_LEADING_ICON);\n      }\n    }\n    const element = this.nativeControl_ ? this.nativeControl_ : this.selectedText_;\n    if (element.hasAttribute(strings.ARIA_CONTROLS)) {\n      const helperTextElement = document.getElementById(element.getAttribute(strings.ARIA_CONTROLS));\n      if (helperTextElement) {\n        this.helperText_ = helperTextFactory(helperTextElement);\n      }\n    }\n\n    if (!this.root_.classList.contains(cssClasses.OUTLINED)) {\n      this.ripple = this.initRipple_();\n    }\n\n    // The required state needs to be sync'd before the mutation observer is added.\n    this.initialSyncRequiredState_();\n    this.addMutationObserverForRequired_();\n  }\n\n  /**\n   * Handles setup for the enhanced menu.\n   * @private\n   */\n  enhancedSelectSetup_(menuFactory) {\n    const isDisabled = this.root_.classList.contains(cssClasses.DISABLED);\n    this.selectedText_.setAttribute('tabindex', isDisabled ? '-1' : '0');\n    this.hiddenInput_ = this.root_.querySelector(strings.HIDDEN_INPUT_SELECTOR);\n    this.menuElement_ = /** @type {HTMLElement} */ (this.root_.querySelector(strings.MENU_SELECTOR));\n    this.menu_ = menuFactory(this.menuElement_);\n    this.menu_.hoistMenuToBody();\n    this.menu_.setAnchorElement(/** @type {!HTMLElement} */ (this.root_));\n    this.menu_.setAnchorCorner(menuSurfaceConstants.Corner.BOTTOM_START);\n    this.menu_.wrapFocus = false;\n  }\n\n  /**\n   * @private\n   * @return {!MDCRipple}\n   */\n  initRipple_() {\n    const element = this.nativeControl_ ? this.nativeControl_ : this.selectedText_;\n    const adapter = Object.assign(MDCRipple.createAdapter(this), {\n      registerInteractionHandler: (type, handler) => element.addEventListener(type, handler),\n      deregisterInteractionHandler: (type, handler) => element.removeEventListener(type, handler),\n    });\n    const foundation = new MDCRippleFoundation(adapter);\n    return new MDCRipple(this.root_, foundation);\n  }\n\n  /**\n   * Initializes the select's event listeners and internal state based\n   * on the environment's state.\n   */\n  initialSyncWithDOM() {\n    this.handleChange_ = () => this.foundation_.handleChange(/* didChange */ true);\n    this.handleFocus_ = () => this.foundation_.handleFocus();\n    this.handleBlur_ = () => this.foundation_.handleBlur();\n    this.handleClick_ = (evt) => {\n      if (this.selectedText_) this.selectedText_.focus();\n      this.foundation_.handleClick(this.getNormalizedXCoordinate_(evt));\n    };\n    this.handleKeydown_ = (evt) => this.foundation_.handleKeydown(evt);\n    this.handleMenuSelected_ = (evtData) => this.selectedIndex = evtData.detail.index;\n    this.handleMenuOpened_ = () => {\n      // Menu should open to the last selected element.\n      if (this.selectedIndex >= 0) {\n        this.menu_.items[this.selectedIndex].focus();\n      }\n    };\n    this.handleMenuClosed_ = () => {\n      // menuOpened_ is used to track the state of the menu opening or closing since the menu.open function\n      // will return false if the menu is still closing and this method listens to the closed event which\n      // occurs after the menu is already closed.\n      this.menuOpened_ = false;\n      this.selectedText_.removeAttribute('aria-expanded');\n      if (document.activeElement !== this.selectedText_) {\n        this.foundation_.handleBlur();\n      }\n    };\n\n    const element = this.nativeControl_ ? this.nativeControl_ : this.selectedText_;\n\n    element.addEventListener('change', this.handleChange_);\n    element.addEventListener('focus', this.handleFocus_);\n    element.addEventListener('blur', this.handleBlur_);\n\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      element.addEventListener(evtType, this.handleClick_);\n    });\n\n    if (this.menuElement_) {\n      this.selectedText_.addEventListener('keydown', this.handleKeydown_);\n      this.menu_.listen(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed_);\n      this.menu_.listen(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened_);\n      this.menu_.listen(menuConstants.strings.SELECTED_EVENT, this.handleMenuSelected_);\n\n      if (this.hiddenInput_ && this.hiddenInput_.value) {\n        // If the hidden input already has a value, use it to restore the select's value.\n        // This can happen e.g. if the user goes back or (in some browsers) refreshes the page.\n        const enhancedAdapterMethods = this.getEnhancedSelectAdapterMethods_();\n        enhancedAdapterMethods.setValue(this.hiddenInput_.value);\n      } else if (this.menuElement_.querySelector(strings.SELECTED_ITEM_SELECTOR)) {\n        // If an element is selected, the select should set the initial selected text.\n        const enhancedAdapterMethods = this.getEnhancedSelectAdapterMethods_();\n        enhancedAdapterMethods.setValue(enhancedAdapterMethods.getValue());\n      }\n    }\n\n    // Initially sync floating label\n    this.foundation_.handleChange(/* didChange */ false);\n\n    if (this.root_.classList.contains(cssClasses.DISABLED)\n      || (this.nativeControl_ && this.nativeControl_.disabled)) {\n      this.disabled = true;\n    }\n  }\n\n  destroy() {\n    const element = this.nativeControl_ ? this.nativeControl_ : this.selectedText_;\n\n    element.removeEventListener('change', this.handleChange_);\n    element.removeEventListener('focus', this.handleFocus_);\n    element.removeEventListener('blur', this.handleBlur_);\n    element.removeEventListener('keydown', this.handleKeydown_);\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      element.removeEventListener(evtType, this.handleClick_);\n    });\n\n    if (this.menu_) {\n      this.menu_.unlisten(menuSurfaceConstants.strings.CLOSED_EVENT, this.handleMenuClosed_);\n      this.menu_.unlisten(menuSurfaceConstants.strings.OPENED_EVENT, this.handleMenuOpened_);\n      this.menu_.unlisten(menuConstants.strings.SELECTED_EVENT, this.handleMenuSelected_);\n      this.menu_.destroy();\n    }\n\n    if (this.ripple) {\n      this.ripple.destroy();\n    }\n    if (this.outline_) {\n      this.outline_.destroy();\n    }\n    if (this.leadingIcon_) {\n      this.leadingIcon_.destroy();\n    }\n    if (this.helperText_) {\n      this.helperText_.destroy();\n    }\n    if (this.validationObserver_) {\n      this.validationObserver_.disconnect();\n    }\n\n    super.destroy();\n  }\n\n  /**\n   * @return {!MDCSelectFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCSelectFoundation(\n      /** @type {!MDCSelectAdapter} */ (Object.assign(\n        this.nativeControl_ ? this.getNativeSelectAdapterMethods_() : this.getEnhancedSelectAdapterMethods_(),\n        this.getCommonAdapterMethods_(),\n        this.getOutlineAdapterMethods_(),\n        this.getLabelAdapterMethods_())\n      ),\n      this.getFoundationMap_()\n    );\n  }\n\n  /**\n   * @return {!{\n   *   getValue: function(): string,\n   *   setValue: function(string): string,\n   *   openMenu: function(): void,\n   *   closeMenu: function(): void,\n   *   isMenuOpen: function(): boolean,\n   *   setSelectedIndex: function(number): void,\n   *   setDisabled: function(boolean): void\n   * }}\n   * @private\n   */\n  getNativeSelectAdapterMethods_() {\n    return {\n      getValue: () => this.nativeControl_.value,\n      setValue: (value) => this.nativeControl_.value = value,\n      openMenu: () => {},\n      closeMenu: () => {},\n      isMenuOpen: () => false,\n      setSelectedIndex: (index) => {\n        this.nativeControl_.selectedIndex = index;\n      },\n      setDisabled: (isDisabled) => this.nativeControl_.disabled = isDisabled,\n      setValid: (isValid) => {\n        isValid ? this.root_.classList.remove(cssClasses.INVALID) : this.root_.classList.add(cssClasses.INVALID);\n      },\n      checkValidity: () => this.nativeControl_.checkValidity(),\n    };\n  }\n\n  /**\n   * @return {!{\n   *   getValue: function(): string,\n   *   setValue: function(string): string,\n   *   openMenu: function(): void,\n   *   closeMenu: function(): void,\n   *   isMenuOpen: function(): boolean,\n   *   setSelectedIndex: function(number): void,\n   *   setDisabled: function(boolean): void\n   * }}\n   * @private\n   */\n  getEnhancedSelectAdapterMethods_() {\n    return {\n      getValue: () => {\n        const listItem = this.menuElement_.querySelector(strings.SELECTED_ITEM_SELECTOR);\n        if (listItem && listItem.hasAttribute(strings.ENHANCED_VALUE_ATTR)) {\n          return listItem.getAttribute(strings.ENHANCED_VALUE_ATTR);\n        }\n        return '';\n      },\n      setValue: (value) => {\n        const element =\n          /** @type {HTMLElement} */ (this.menuElement_.querySelector(`[${strings.ENHANCED_VALUE_ATTR}=\"${value}\"]`));\n        this.setEnhancedSelectedIndex_(element ? this.menu_.items.indexOf(element) : -1);\n      },\n      openMenu: () => {\n        if (this.menu_ && !this.menu_.open) {\n          this.menu_.open = true;\n          this.menuOpened_ = true;\n          this.selectedText_.setAttribute('aria-expanded', 'true');\n        }\n      },\n      closeMenu: () => {\n        if (this.menu_ && this.menu_.open) {\n          this.menu_.open = false;\n        }\n      },\n      isMenuOpen: () => this.menu_ && this.menuOpened_,\n      setSelectedIndex: (index) => {\n        this.setEnhancedSelectedIndex_(index);\n      },\n      setDisabled: (isDisabled) => {\n        this.selectedText_.setAttribute('tabindex', isDisabled ? '-1' : '0');\n        this.selectedText_.setAttribute('aria-disabled', isDisabled.toString());\n        if (this.hiddenInput_) {\n          this.hiddenInput_.disabled = isDisabled;\n        }\n      },\n      checkValidity: () => {\n        const classList = this.root_.classList;\n        if (classList.contains(cssClasses.REQUIRED) && !classList.contains(cssClasses.DISABLED)) {\n          // See notes for required attribute under https://www.w3.org/TR/html52/sec-forms.html#the-select-element\n          // TL;DR: Invalid if no index is selected, or if the first index is selected and has an empty value.\n          return this.selectedIndex !== -1 && (this.selectedIndex !== 0 || this.value);\n        } else {\n          return true;\n        }\n      },\n      setValid: (isValid) => {\n        this.selectedText_.setAttribute('aria-invalid', (!isValid).toString());\n        isValid ? this.root_.classList.remove(cssClasses.INVALID) : this.root_.classList.add(cssClasses.INVALID);\n      },\n    };\n  }\n\n  /**\n   * @return {!{\n   *   addClass: function(string): void,\n   *   removeClass: function(string): void,\n   *   hasClass: function(string): void,\n   *   setRippleCenter: function(number): void,\n   *   activateBottomLine: function(): void,\n   *   deactivateBottomLine: function(): void,\n   *   notifyChange: function(string): void\n   * }}\n   * @private\n   */\n  getCommonAdapterMethods_() {\n    return {\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      hasClass: (className) => this.root_.classList.contains(className),\n      setRippleCenter: (normalizedX) => this.lineRipple_ && this.lineRipple_.setRippleCenter(normalizedX),\n      activateBottomLine: () => this.lineRipple_ && this.lineRipple_.activate(),\n      deactivateBottomLine: () => this.lineRipple_ && this.lineRipple_.deactivate(),\n      notifyChange: (value) => {\n        const index = this.selectedIndex;\n        this.emit(strings.CHANGE_EVENT, {value, index}, true /* shouldBubble  */);\n      },\n    };\n  }\n\n  /**\n   * @return {!{\n   *   hasOutline: function(): boolean,\n   *   notchOutline: function(number, boolean): undefined,\n   *   closeOutline: function(): undefined,\n   * }}\n   */\n  getOutlineAdapterMethods_() {\n    return {\n      hasOutline: () => !!this.outline_,\n      notchOutline: (labelWidth) => {\n        if (this.outline_) {\n          this.outline_.notch(labelWidth);\n        }\n      },\n      closeOutline: () => {\n        if (this.outline_) {\n          this.outline_.closeNotch();\n        }\n      },\n    };\n  }\n\n  /**\n   * @return {!{\n   *   floatLabel: function(boolean): undefined,\n   *   getLabelWidth: function(): number,\n   * }}\n   */\n  getLabelAdapterMethods_() {\n    return {\n      floatLabel: (shouldFloat) => {\n        if (this.label_) {\n          this.label_.float(shouldFloat);\n        }\n      },\n      getLabelWidth: () => {\n        return this.label_ ? this.label_.getWidth() : 0;\n      },\n    };\n  }\n\n  /**\n   * Calculates where the line ripple should start based on the x coordinate within the component.\n   * @param {!(MouseEvent|TouchEvent)} evt\n   * @return {number} normalizedX\n   */\n  getNormalizedXCoordinate_(evt) {\n    const targetClientRect = evt.target.getBoundingClientRect();\n    const xCoordinate = evt.clientX;\n    return xCoordinate - targetClientRect.left;\n  }\n\n  /**\n   * Returns a map of all subcomponents to subfoundations.\n   * @return {!FoundationMapType}\n   */\n  getFoundationMap_() {\n    return {\n      leadingIcon: this.leadingIcon_ ? this.leadingIcon_.foundation : undefined,\n      helperText: this.helperText_ ? this.helperText_.foundation : undefined,\n    };\n  }\n\n  /**\n   * Sets the selected index of the enhanced menu.\n   * @param {number} index\n   * @private\n   */\n  setEnhancedSelectedIndex_(index) {\n    const selectedItem = this.menu_.items[index];\n    this.selectedText_.textContent = selectedItem ? selectedItem.textContent.trim() : '';\n    const previouslySelected = this.menuElement_.querySelector(strings.SELECTED_ITEM_SELECTOR);\n\n    if (previouslySelected) {\n      previouslySelected.classList.remove(cssClasses.SELECTED_ITEM_CLASS);\n      previouslySelected.removeAttribute(strings.ARIA_SELECTED_ATTR);\n    }\n\n    if (selectedItem) {\n      selectedItem.classList.add(cssClasses.SELECTED_ITEM_CLASS);\n      selectedItem.setAttribute(strings.ARIA_SELECTED_ATTR, 'true');\n    }\n\n    // Synchronize hidden input's value with data-value attribute of selected item.\n    // This code path is also followed when setting value directly, so this covers all cases.\n    if (this.hiddenInput_) {\n      this.hiddenInput_.value = selectedItem ? selectedItem.getAttribute(strings.ENHANCED_VALUE_ATTR) || '' : '';\n    }\n\n    this.layout();\n  }\n\n  initialSyncRequiredState_() {\n    const element = this.nativeControl_ ? this.nativeControl_ : this.selectedText_;\n    const isRequired = element.required || element.getAttribute('aria-required') === 'true'\n      || this.root_.classList.contains(cssClasses.REQUIRED);\n    if (isRequired) {\n      if (this.nativeControl_) {\n        this.nativeControl_.required = true;\n      } else {\n        this.selectedText_.setAttribute('aria-required', 'true');\n      }\n      this.root_.classList.add(cssClasses.REQUIRED);\n    }\n  }\n\n  addMutationObserverForRequired_() {\n    const observerHandler = (attributesList) => {\n      attributesList.some((attributeName) => {\n        if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {\n          if (this.selectedText_) {\n            if (this.selectedText_.getAttribute('aria-required') === 'true') {\n              this.root_.classList.add(cssClasses.REQUIRED);\n            } else {\n              this.root_.classList.remove(cssClasses.REQUIRED);\n            }\n          } else {\n            if (this.nativeControl_.required) {\n              this.root_.classList.add(cssClasses.REQUIRED);\n            } else {\n              this.root_.classList.remove(cssClasses.REQUIRED);\n            }\n          }\n          return true;\n        }\n      });\n    };\n\n    const getAttributesList = (mutationsList) => mutationsList.map((mutation) => mutation.attributeName);\n    const observer = new MutationObserver((mutationsList) => observerHandler(getAttributesList(mutationsList)));\n    const element = this.nativeControl_ ? this.nativeControl_ : this.selectedText_;\n    observer.observe(element, {attributes: true});\n    this.validationObserver_ = observer;\n  };\n}\n\nexport {MDCSelect, MDCSelectFoundation,\n  MDCSelectHelperText, MDCSelectHelperTextFoundation,\n  MDCSelectIcon, MDCSelectIconFoundation};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  ARIA_CONTROLS: 'aria-controls',\n  INPUT_SELECTOR: '.mdc-text-field__input',\n  LABEL_SELECTOR: '.mdc-floating-label',\n  ICON_SELECTOR: '.mdc-text-field__icon',\n  OUTLINE_SELECTOR: '.mdc-notched-outline',\n  LINE_RIPPLE_SELECTOR: '.mdc-line-ripple',\n};\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-text-field',\n  DISABLED: 'mdc-text-field--disabled',\n  DENSE: 'mdc-text-field--dense',\n  FOCUSED: 'mdc-text-field--focused',\n  INVALID: 'mdc-text-field--invalid',\n  TEXTAREA: 'mdc-text-field--textarea',\n  OUTLINED: 'mdc-text-field--outlined',\n  WITH_LEADING_ICON: 'mdc-text-field--with-leading-icon',\n  HELPER_LINE: 'mdc-text-field-helper-line',\n};\n\n/** @enum {number} */\nconst numbers = {\n  LABEL_SCALE: 0.75,\n  DENSE_LABEL_SCALE: 0.923,\n};\n\n// whitelist based off of https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation\n// under section: `Validation-related attributes`\nconst VALIDATION_ATTR_WHITELIST = [\n  'pattern', 'min', 'max', 'required', 'step', 'minlength', 'maxlength',\n];\n\n// Label should always float for these types as they show some UI even if value is empty.\nconst ALWAYS_FLOAT_TYPES = [\n  'color', 'date', 'datetime-local', 'month', 'range', 'time', 'week',\n];\n\nexport {cssClasses, strings, numbers, VALIDATION_ATTR_WHITELIST, ALWAYS_FLOAT_TYPES};\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Text Field Character Counter.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the TextField character counter into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldCharacterCounterAdapter {\n  /**\n   * Sets the text content of character counter element.\n   * @param {string} content\n   */\n  setContent(content) {}\n}\n\nexport default MDCTextFieldCharacterCounterAdapter;\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst cssClasses = {\n  ROOT: 'mdc-text-field-character-counter',\n};\n\n/** @enum {string} */\nconst strings = {\n  ROOT_SELECTOR: `.${cssClasses.ROOT}`,\n};\n\nexport {strings, cssClasses};\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCTextFieldCharacterCounterAdapter from './adapter';\nimport {cssClasses, strings} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldCharacterCounterAdapter>}\n * @final\n */\nclass MDCTextFieldCharacterCounterFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldCharacterCounterAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldCharacterCounterAdapter} */ ({\n      setContent: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldCharacterCounterAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCTextFieldCharacterCounterFoundation.defaultAdapter, adapter));\n  }\n\n  /**\n   * @param {number} currentLength\n   * @param {number} maxLength\n   */\n  setCounterValue(currentLength, maxLength) {\n    currentLength = Math.min(currentLength, maxLength);\n    this.adapter_.setContent(`${currentLength} / ${maxLength}`);\n  }\n}\n\nexport default MDCTextFieldCharacterCounterFoundation;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * Adapter for MDC Text Field Icon.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the text field icon into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldIconAdapter {\n  /**\n   * Gets the value of an attribute on the icon element.\n   * @param {string} attr\n   * @return {string}\n   */\n  getAttr(attr) {}\n\n  /**\n   * Sets an attribute on the icon element.\n   * @param {string} attr\n   * @param {string} value\n   */\n  setAttr(attr, value) {}\n\n  /**\n   * Removes an attribute from the icon element.\n   * @param {string} attr\n   */\n  removeAttr(attr) {}\n\n  /**\n   * Sets the text content of the icon element.\n   * @param {string} content\n   */\n  setContent(content) {}\n\n  /**\n   * Registers an event listener on the icon element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerInteractionHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the icon element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterInteractionHandler(evtType, handler) {}\n\n  /**\n   * Emits a custom event \"MDCTextField:icon\" denoting a user has clicked the icon.\n   */\n  notifyIconAction() {}\n}\n\nexport default MDCTextFieldIconAdapter;\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/** @enum {string} */\nconst strings = {\n  ICON_EVENT: 'MDCTextField:icon',\n  ICON_ROLE: 'button',\n};\n\nexport {strings};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\nimport MDCTextFieldIconAdapter from './adapter';\nimport {strings} from './constants';\n\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldIconAdapter>}\n * @final\n */\nclass MDCTextFieldIconFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /**\n   * {@see MDCTextFieldIconAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldIconAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldIconAdapter} */ ({\n      getAttr: () => {},\n      setAttr: () => {},\n      removeAttr: () => {},\n      setContent: () => {},\n      registerInteractionHandler: () => {},\n      deregisterInteractionHandler: () => {},\n      notifyIconAction: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldIconAdapter} adapter\n   */\n  constructor(adapter) {\n    super(Object.assign(MDCTextFieldIconFoundation.defaultAdapter, adapter));\n\n    /** @private {string?} */\n    this.savedTabIndex_ = null;\n\n    /** @private {function(!Event): undefined} */\n    this.interactionHandler_ = (evt) => this.handleInteraction(evt);\n  }\n\n  init() {\n    this.savedTabIndex_ = this.adapter_.getAttr('tabindex');\n\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.registerInteractionHandler(evtType, this.interactionHandler_);\n    });\n  }\n\n  destroy() {\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.deregisterInteractionHandler(evtType, this.interactionHandler_);\n    });\n  }\n\n  /** @param {boolean} disabled */\n  setDisabled(disabled) {\n    if (!this.savedTabIndex_) {\n      return;\n    }\n\n    if (disabled) {\n      this.adapter_.setAttr('tabindex', '-1');\n      this.adapter_.removeAttr('role');\n    } else {\n      this.adapter_.setAttr('tabindex', this.savedTabIndex_);\n      this.adapter_.setAttr('role', strings.ICON_ROLE);\n    }\n  }\n\n  /** @param {string} label */\n  setAriaLabel(label) {\n    this.adapter_.setAttr('aria-label', label);\n  }\n\n  /** @param {string} content */\n  setContent(content) {\n    this.adapter_.setContent(content);\n  }\n\n  /**\n   * Handles an interaction event\n   * @param {!Event} evt\n   */\n  handleInteraction(evt) {\n    if (evt.type === 'click' || evt.key === 'Enter' || evt.keyCode === 13) {\n      this.adapter_.notifyIconAction();\n    }\n  }\n}\n\nexport default MDCTextFieldIconFoundation;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/* eslint-disable no-unused-vars */\nimport MDCTextFieldHelperTextFoundation from './helper-text/foundation';\n/* eslint-disable no-unused-vars */\nimport MDCTextFieldCharacterCounterFoundation from './character-counter/foundation';\nimport MDCTextFieldIconFoundation from './icon/foundation';\n\n/* eslint no-unused-vars: [2, {\"args\": \"none\"}] */\n\n/**\n * @typedef {{\n *   value: string,\n *   disabled: boolean,\n *   badInput: boolean,\n *   validity: {\n *     badInput: boolean,\n *     valid: boolean,\n *   },\n * }}\n */\nlet NativeInputType;\n\n/**\n * @typedef {{\n *   helperText: (!MDCTextFieldHelperTextFoundation|undefined),\n *   characterCounter: (!MDCTextFieldCharacterCounterFoundation|undefined),\n *   leadingIcon: (!MDCTextFieldIconFoundation|undefined),\n *   trailingIcon: (!MDCTextFieldIconFoundation|undefined),\n * }}\n */\nlet FoundationMapType;\n\n/**\n * Adapter for MDC Text Field.\n *\n * Defines the shape of the adapter expected by the foundation. Implement this\n * adapter to integrate the Text Field into your framework. See\n * https://github.com/material-components/material-components-web/blob/master/docs/authoring-components.md\n * for more information.\n *\n * @record\n */\nclass MDCTextFieldAdapter {\n  /**\n   * Adds a class to the root Element.\n   * @param {string} className\n   */\n  addClass(className) {}\n\n  /**\n   * Removes a class from the root Element.\n   * @param {string} className\n   */\n  removeClass(className) {}\n\n  /**\n   * Returns true if the root element contains the given class name.\n   * @param {string} className\n   * @return {boolean}\n   */\n  hasClass(className) {}\n\n  /**\n   * Registers an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  registerTextFieldInteractionHandler(type, handler) {}\n\n  /**\n   * Deregisters an event handler on the root element for a given event.\n   * @param {string} type\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterTextFieldInteractionHandler(type, handler) {}\n\n  /**\n   * Registers an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  registerInputInteractionHandler(evtType, handler) {}\n\n  /**\n   * Deregisters an event listener on the native input element for a given event.\n   * @param {string} evtType\n   * @param {function(!Event): undefined} handler\n   */\n  deregisterInputInteractionHandler(evtType, handler) {}\n\n  /**\n   * Registers a validation attribute change listener on the input element.\n   * Handler accepts list of attribute names.\n   * @param {function(!Array<string>): undefined} handler\n   * @return {!MutationObserver}\n   */\n  registerValidationAttributeChangeHandler(handler) {}\n\n  /**\n   * Disconnects a validation attribute observer on the input element.\n   * @param {!MutationObserver} observer\n   */\n  deregisterValidationAttributeChangeHandler(observer) {}\n\n  /**\n   * Returns an object representing the native text input element, with a\n   * similar API shape. The object returned should include the value, disabled\n   * and badInput properties, as well as the checkValidity() function. We never\n   * alter the value within our code, however we do update the disabled\n   * property, so if you choose to duck-type the return value for this method\n   * in your implementation it's important to keep this in mind. Also note that\n   * this method can return null, which the foundation will handle gracefully.\n   * @return {?Element|?NativeInputType}\n   */\n  getNativeInput() {}\n\n  /**\n   * Returns true if the textfield is focused.\n   * We achieve this via `document.activeElement === this.root_`.\n   * @return {boolean}\n   */\n  isFocused() {}\n\n  /**\n   * Activates the line ripple.\n   */\n  activateLineRipple() {}\n\n  /**\n   * Deactivates the line ripple.\n   */\n  deactivateLineRipple() {}\n\n  /**\n   * Sets the transform origin of the line ripple.\n   * @param {number} normalizedX\n   */\n  setLineRippleTransformOrigin(normalizedX) {}\n\n  /**\n   * Only implement if label exists.\n   * Shakes label if shouldShake is true.\n   * @param {boolean} shouldShake\n   */\n  shakeLabel(shouldShake) {}\n\n  /**\n   * Only implement if label exists.\n   * Floats the label above the input element if shouldFloat is true.\n   * @param {boolean} shouldFloat\n   */\n  floatLabel(shouldFloat) {}\n\n  /**\n   * Returns true if label element exists, false if it doesn't.\n   * @return {boolean}\n   */\n  hasLabel() {}\n\n  /**\n   * Only implement if label exists.\n   * Returns width of label in pixels.\n   * @return {number}\n   */\n  getLabelWidth() {}\n\n  /**\n   * Returns true if outline element exists, false if it doesn't.\n   * @return {boolean}\n   */\n  hasOutline() {}\n\n  /**\n   * Only implement if outline element exists.\n   * @param {number} labelWidth\n   */\n  notchOutline(labelWidth) {}\n\n  /**\n   * Only implement if outline element exists.\n   * Closes notch in outline element.\n   */\n  closeOutline() {}\n}\n\nexport {MDCTextFieldAdapter, NativeInputType, FoundationMapType};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCFoundation from '@material/base/foundation';\n/* eslint-disable no-unused-vars */\nimport MDCTextFieldHelperTextFoundation from './helper-text/foundation';\nimport MDCTextFieldCharacterCounterFoundation from './character-counter/foundation';\nimport MDCTextFieldIconFoundation from './icon/foundation';\n/* eslint-enable no-unused-vars */\nimport {MDCTextFieldAdapter, NativeInputType, FoundationMapType} from './adapter';\nimport {cssClasses, strings, numbers, VALIDATION_ATTR_WHITELIST, ALWAYS_FLOAT_TYPES} from './constants';\n\n/**\n * @extends {MDCFoundation<!MDCTextFieldAdapter>}\n * @final\n */\nclass MDCTextFieldFoundation extends MDCFoundation {\n  /** @return enum {string} */\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  /** @return enum {string} */\n  static get strings() {\n    return strings;\n  }\n\n  /** @return enum {string} */\n  static get numbers() {\n    return numbers;\n  }\n\n  /** @return {boolean} */\n  get shouldShake() {\n    return !this.isValid() && !this.isFocused_ && !!this.getValue();\n  }\n\n  /**\n   * @return {boolean}\n   * @private\n   */\n  get shouldAlwaysFloat_() {\n    const type = this.getNativeInput_().type;\n    return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;\n  }\n\n  /** @return {boolean} */\n  get shouldFloat() {\n    return this.shouldAlwaysFloat_ || this.isFocused_ || !!this.getValue() || this.isBadInput_();\n  }\n\n  /**\n   * {@see MDCTextFieldAdapter} for typing information on parameters and return\n   * types.\n   * @return {!MDCTextFieldAdapter}\n   */\n  static get defaultAdapter() {\n    return /** @type {!MDCTextFieldAdapter} */ ({\n      addClass: () => {},\n      removeClass: () => {},\n      hasClass: () => {},\n      registerTextFieldInteractionHandler: () => {},\n      deregisterTextFieldInteractionHandler: () => {},\n      registerInputInteractionHandler: () => {},\n      deregisterInputInteractionHandler: () => {},\n      registerValidationAttributeChangeHandler: () => {},\n      deregisterValidationAttributeChangeHandler: () => {},\n      getNativeInput: () => {},\n      isFocused: () => {},\n      activateLineRipple: () => {},\n      deactivateLineRipple: () => {},\n      setLineRippleTransformOrigin: () => {},\n      shakeLabel: () => {},\n      floatLabel: () => {},\n      hasLabel: () => {},\n      getLabelWidth: () => {},\n      hasOutline: () => {},\n      notchOutline: () => {},\n      closeOutline: () => {},\n    });\n  }\n\n  /**\n   * @param {!MDCTextFieldAdapter} adapter\n   * @param {!FoundationMapType=} foundationMap Map from subcomponent names to their subfoundations.\n   */\n  constructor(adapter, foundationMap = /** @type {!FoundationMapType} */ ({})) {\n    super(Object.assign(MDCTextFieldFoundation.defaultAdapter, adapter));\n\n    /** @type {!MDCTextFieldHelperTextFoundation|undefined} */\n    this.helperText_ = foundationMap.helperText;\n    /** @type {!MDCTextFieldCharacterCounterFoundation|undefined} */\n    this.characterCounter_ = foundationMap.characterCounter;\n    /** @type {!MDCTextFieldIconFoundation|undefined} */\n    this.leadingIcon_ = foundationMap.leadingIcon;\n    /** @type {!MDCTextFieldIconFoundation|undefined} */\n    this.trailingIcon_ = foundationMap.trailingIcon;\n\n    /** @private {boolean} */\n    this.isFocused_ = false;\n    /** @private {boolean} */\n    this.receivedUserInput_ = false;\n    /** @private {boolean} */\n    this.useCustomValidityChecking_ = false;\n    /** @private {boolean} */\n    this.isValid_ = true;\n\n    /** @private {boolean} */\n    this.useNativeValidation_ = true;\n\n    /** @private {function(): undefined} */\n    this.inputFocusHandler_ = () => this.activateFocus();\n    /** @private {function(): undefined} */\n    this.inputBlurHandler_ = () => this.deactivateFocus();\n    /** @private {function(): undefined} */\n    this.inputInputHandler_ = () => this.handleInput();\n    /** @private {function(!Event): undefined} */\n    this.setPointerXOffset_ = (evt) => this.setTransformOrigin(evt);\n    /** @private {function(!Event): undefined} */\n    this.textFieldInteractionHandler_ = () => this.handleTextFieldInteraction();\n    /** @private {function(!Array): undefined} */\n    this.validationAttributeChangeHandler_ = (attributesList) => this.handleValidationAttributeChange(attributesList);\n\n    /** @private {!MutationObserver} */\n    this.validationObserver_;\n  }\n\n  init() {\n    if (this.adapter_.isFocused()) {\n      this.inputFocusHandler_();\n    } else if (this.adapter_.hasLabel() && this.shouldFloat) {\n      this.notchOutline(true);\n      this.adapter_.floatLabel(true);\n    }\n\n    this.adapter_.registerInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.registerInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.registerInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      this.adapter_.registerInputInteractionHandler(evtType, this.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler_);\n    });\n    this.validationObserver_ =\n        this.adapter_.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler_);\n    this.setCharacterCounter_(this.getValue().length);\n  }\n\n  destroy() {\n    this.adapter_.deregisterInputInteractionHandler('focus', this.inputFocusHandler_);\n    this.adapter_.deregisterInputInteractionHandler('blur', this.inputBlurHandler_);\n    this.adapter_.deregisterInputInteractionHandler('input', this.inputInputHandler_);\n    ['mousedown', 'touchstart'].forEach((evtType) => {\n      this.adapter_.deregisterInputInteractionHandler(evtType, this.setPointerXOffset_);\n    });\n    ['click', 'keydown'].forEach((evtType) => {\n      this.adapter_.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler_);\n    });\n    this.adapter_.deregisterValidationAttributeChangeHandler(this.validationObserver_);\n  }\n\n  /**\n   * Handles user interactions with the Text Field.\n   */\n  handleTextFieldInteraction() {\n    if (this.adapter_.getNativeInput().disabled) {\n      return;\n    }\n    this.receivedUserInput_ = true;\n  }\n\n  /**\n   * Handles validation attribute changes\n   * @param {!Array<string>} attributesList\n   */\n  handleValidationAttributeChange(attributesList) {\n    attributesList.some((attributeName) => {\n      if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {\n        this.styleValidity_(true);\n        return true;\n      }\n    });\n\n    if (attributesList.indexOf('maxlength') > -1) {\n      this.setCharacterCounter_(this.getValue().length);\n    }\n  }\n\n  /**\n   * Opens/closes the notched outline.\n   * @param {boolean} openNotch\n   */\n  notchOutline(openNotch) {\n    if (!this.adapter_.hasOutline()) {\n      return;\n    }\n\n    if (openNotch) {\n      const isDense = this.adapter_.hasClass(cssClasses.DENSE);\n      const labelScale = isDense ? numbers.DENSE_LABEL_SCALE : numbers.LABEL_SCALE;\n      const labelWidth = this.adapter_.getLabelWidth() * labelScale;\n      this.adapter_.notchOutline(labelWidth);\n    } else {\n      this.adapter_.closeOutline();\n    }\n  }\n\n  /**\n   * Activates the text field focus state.\n   */\n  activateFocus() {\n    this.isFocused_ = true;\n    this.styleFocused_(this.isFocused_);\n    this.adapter_.activateLineRipple();\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter_.floatLabel(this.shouldFloat);\n      this.adapter_.shakeLabel(this.shouldShake);\n    }\n    if (this.helperText_) {\n      this.helperText_.showToScreenReader();\n    }\n  }\n\n  /**\n   * Sets the line ripple's transform origin, so that the line ripple activate\n   * animation will animate out from the user's click location.\n   * @param {!Event} evt\n   */\n  setTransformOrigin(evt) {\n    let targetEvent;\n    if (evt.touches) {\n      targetEvent = evt.touches[0];\n    } else {\n      targetEvent = evt;\n    }\n    const targetClientRect = targetEvent.target.getBoundingClientRect();\n    const normalizedX = targetEvent.clientX - targetClientRect.left;\n    this.adapter_.setLineRippleTransformOrigin(normalizedX);\n  }\n\n  /**\n   * Handles input change of text input and text area.\n   */\n  handleInput() {\n    this.autoCompleteFocus();\n    this.setCharacterCounter_(this.getValue().length);\n  }\n\n  /**\n   * Activates the Text Field's focus state in cases when the input value\n   * changes without user input (e.g. programatically).\n   */\n  autoCompleteFocus() {\n    if (!this.receivedUserInput_) {\n      this.activateFocus();\n    }\n  }\n\n  /**\n   * Deactivates the Text Field's focus state.\n   */\n  deactivateFocus() {\n    this.isFocused_ = false;\n    this.adapter_.deactivateLineRipple();\n    const isValid = this.isValid();\n    this.styleValidity_(isValid);\n    this.styleFocused_(this.isFocused_);\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter_.floatLabel(this.shouldFloat);\n      this.adapter_.shakeLabel(this.shouldShake);\n    }\n    if (!this.shouldFloat) {\n      this.receivedUserInput_ = false;\n    }\n  }\n\n  /**\n   * @return {string} The value of the input Element.\n   */\n  getValue() {\n    return this.getNativeInput_().value;\n  }\n\n  /**\n   * @param {string} value The value to set on the input Element.\n   */\n  setValue(value) {\n    // Prevent Safari from moving the caret to the end of the input when the value has not changed.\n    if (this.getValue() !== value) {\n      this.getNativeInput_().value = value;\n    }\n    const isValid = this.isValid();\n    this.styleValidity_(isValid);\n    if (this.adapter_.hasLabel()) {\n      this.notchOutline(this.shouldFloat);\n      this.adapter_.floatLabel(this.shouldFloat);\n      this.adapter_.shakeLabel(this.shouldShake);\n    }\n  }\n\n  /**\n   * @return {boolean} If a custom validity is set, returns that value.\n   *     Otherwise, returns the result of native validity checks.\n   */\n  isValid() {\n    return this.useNativeValidation_\n      ? this.isNativeInputValid_() : this.isValid_;\n  }\n\n  /**\n   * @param {boolean} isValid Sets the validity state of the Text Field.\n   */\n  setValid(isValid) {\n    this.isValid_ = isValid;\n    this.styleValidity_(isValid);\n\n    const shouldShake = !isValid && !this.isFocused_;\n    if (this.adapter_.hasLabel()) {\n      this.adapter_.shakeLabel(shouldShake);\n    }\n  }\n\n  /**\n   * Enables or disables the use of native validation. Use this for custom validation.\n   * @param {boolean} useNativeValidation Set this to false to ignore native input validation.\n   */\n  setUseNativeValidation(useNativeValidation) {\n    this.useNativeValidation_ = useNativeValidation;\n  }\n\n  /**\n   * @return {boolean} True if the Text Field is disabled.\n   */\n  isDisabled() {\n    return this.getNativeInput_().disabled;\n  }\n\n  /**\n   * @param {boolean} disabled Sets the text-field disabled or enabled.\n   */\n  setDisabled(disabled) {\n    this.getNativeInput_().disabled = disabled;\n    this.styleDisabled_(disabled);\n  }\n\n  /**\n   * @param {string} content Sets the content of the helper text.\n   */\n  setHelperTextContent(content) {\n    if (this.helperText_) {\n      this.helperText_.setContent(content);\n    }\n  }\n\n  /**\n   * Sets character counter values that shows characters used and the total character limit.\n   * @param {number} currentLength\n   * @private\n   */\n  setCharacterCounter_(currentLength) {\n    if (!this.characterCounter_) return;\n\n    const maxLength = this.getNativeInput_().maxLength;\n    if (maxLength === -1) {\n      throw new Error('MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.');\n    }\n\n    this.characterCounter_.setCounterValue(currentLength, maxLength);\n  }\n\n  /**\n   * Sets the aria label of the leading icon.\n   * @param {string} label\n   */\n  setLeadingIconAriaLabel(label) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setAriaLabel(label);\n    }\n  }\n\n  /**\n   * Sets the text content of the leading icon.\n   * @param {string} content\n   */\n  setLeadingIconContent(content) {\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setContent(content);\n    }\n  }\n\n  /**\n   * Sets the aria label of the trailing icon.\n   * @param {string} label\n   */\n  setTrailingIconAriaLabel(label) {\n    if (this.trailingIcon_) {\n      this.trailingIcon_.setAriaLabel(label);\n    }\n  }\n\n  /**\n   * Sets the text content of the trailing icon.\n   * @param {string} content\n   */\n  setTrailingIconContent(content) {\n    if (this.trailingIcon_) {\n      this.trailingIcon_.setContent(content);\n    }\n  }\n\n  /**\n   * @return {boolean} True if the Text Field input fails in converting the\n   *     user-supplied value.\n   * @private\n   */\n  isBadInput_() {\n    return this.getNativeInput_().validity.badInput;\n  }\n\n  /**\n   * @return {boolean} The result of native validity checking\n   *     (ValidityState.valid).\n   */\n  isNativeInputValid_() {\n    return this.getNativeInput_().validity.valid;\n  }\n\n  /**\n   * Styles the component based on the validity state.\n   * @param {boolean} isValid\n   * @private\n   */\n  styleValidity_(isValid) {\n    const {INVALID} = MDCTextFieldFoundation.cssClasses;\n    if (isValid) {\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.addClass(INVALID);\n    }\n    if (this.helperText_) {\n      this.helperText_.setValidity(isValid);\n    }\n  }\n\n  /**\n   * Styles the component based on the focused state.\n   * @param {boolean} isFocused\n   * @private\n   */\n  styleFocused_(isFocused) {\n    const {FOCUSED} = MDCTextFieldFoundation.cssClasses;\n    if (isFocused) {\n      this.adapter_.addClass(FOCUSED);\n    } else {\n      this.adapter_.removeClass(FOCUSED);\n    }\n  }\n\n  /**\n   * Styles the component based on the disabled state.\n   * @param {boolean} isDisabled\n   * @private\n   */\n  styleDisabled_(isDisabled) {\n    const {DISABLED, INVALID} = MDCTextFieldFoundation.cssClasses;\n    if (isDisabled) {\n      this.adapter_.addClass(DISABLED);\n      this.adapter_.removeClass(INVALID);\n    } else {\n      this.adapter_.removeClass(DISABLED);\n    }\n\n    if (this.leadingIcon_) {\n      this.leadingIcon_.setDisabled(isDisabled);\n    }\n\n    if (this.trailingIcon_) {\n      this.trailingIcon_.setDisabled(isDisabled);\n    }\n  }\n\n  /**\n   * @return {!Element|!NativeInputType} The native text input from the\n   * host environment, or a dummy if none exists.\n   * @private\n   */\n  getNativeInput_() {\n    return this.adapter_.getNativeInput() ||\n    /** @type {!NativeInputType} */ ({\n      value: '',\n      disabled: false,\n      validity: {\n        badInput: false,\n        valid: true,\n      },\n    });\n  }\n}\n\nexport default MDCTextFieldFoundation;\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCTextFieldCharacterCounterAdapter from './adapter';\nimport MDCTextFieldCharacterCounterFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCTextFieldCharacterCounterFoundation>}\n * @final\n */\nclass MDCTextFieldCharacterCounter extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCTextFieldCharacterCounter}\n   */\n  static attachTo(root) {\n    return new MDCTextFieldCharacterCounter(root);\n  }\n\n  /**\n   * @return {!MDCTextFieldCharacterCounterFoundation}\n   */\n  get foundation() {\n    return this.foundation_;\n  }\n\n  /**\n   * @return {!MDCTextFieldCharacterCounterFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCTextFieldCharacterCounterFoundation(\n      /** @type {!MDCTextFieldCharacterCounterAdapter} */ (Object.assign({\n        setContent: (content) => {\n          this.root_.textContent = content;\n        },\n      })));\n  }\n}\n\nexport {MDCTextFieldCharacterCounter, MDCTextFieldCharacterCounterFoundation};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n\nimport MDCTextFieldIconAdapter from './adapter';\nimport MDCTextFieldIconFoundation from './foundation';\n\n/**\n * @extends {MDCComponent<!MDCTextFieldIconFoundation>}\n * @final\n */\nclass MDCTextFieldIcon extends MDCComponent {\n  /**\n   * @param {!Element} root\n   * @return {!MDCTextFieldIcon}\n   */\n  static attachTo(root) {\n    return new MDCTextFieldIcon(root);\n  }\n\n  /**\n   * @return {!MDCTextFieldIconFoundation}\n   */\n  get foundation() {\n    return this.foundation_;\n  }\n\n  /**\n   * @return {!MDCTextFieldIconFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCTextFieldIconFoundation(/** @type {!MDCTextFieldIconAdapter} */ (Object.assign({\n      getAttr: (attr) => this.root_.getAttribute(attr),\n      setAttr: (attr, value) => this.root_.setAttribute(attr, value),\n      removeAttr: (attr) => this.root_.removeAttribute(attr),\n      setContent: (content) => {\n        this.root_.textContent = content;\n      },\n      registerInteractionHandler: (evtType, handler) => this.root_.addEventListener(evtType, handler),\n      deregisterInteractionHandler: (evtType, handler) => this.root_.removeEventListener(evtType, handler),\n      notifyIconAction: () => this.emit(\n        MDCTextFieldIconFoundation.strings.ICON_EVENT, {} /* evtData */, true /* shouldBubble */),\n    })));\n  }\n}\n\nexport {MDCTextFieldIcon, MDCTextFieldIconFoundation};\n","/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\n/* eslint-disable no-unused-vars */\nimport {MDCRipple, MDCRippleFoundation, RippleCapableSurface} from '@material/ripple/index';\n/* eslint-enable no-unused-vars */\nimport {getMatchesProperty} from '@material/ripple/util';\n\n\nimport {cssClasses, strings} from './constants';\nimport {MDCTextFieldAdapter, FoundationMapType} from './adapter';\nimport MDCTextFieldFoundation from './foundation';\n/* eslint-disable no-unused-vars */\nimport {MDCLineRipple, MDCLineRippleFoundation} from '@material/line-ripple/index';\nimport {MDCTextFieldHelperText, MDCTextFieldHelperTextFoundation} from './helper-text/index';\nimport {MDCTextFieldCharacterCounter, MDCTextFieldCharacterCounterFoundation} from './character-counter/index';\nimport {MDCTextFieldIcon, MDCTextFieldIconFoundation} from './icon/index';\nimport {MDCFloatingLabel, MDCFloatingLabelFoundation} from '@material/floating-label/index';\nimport {MDCNotchedOutline, MDCNotchedOutlineFoundation} from '@material/notched-outline/index';\n/* eslint-enable no-unused-vars */\n\n/**\n * @extends {MDCComponent<!MDCTextFieldFoundation>}\n * @final\n */\nclass MDCTextField extends MDCComponent {\n  /**\n   * @param {...?} args\n   */\n  constructor(...args) {\n    super(...args);\n    /** @private {?Element} */\n    this.input_;\n    /** @type {?MDCRipple} */\n    this.ripple;\n    /** @private {?MDCLineRipple} */\n    this.lineRipple_;\n    /** @private {?MDCTextFieldHelperText} */\n    this.helperText_;\n    /** @private {?MDCTextFieldCharacterCounter} */\n    this.characterCounter_;\n    /** @private {?MDCTextFieldIcon} */\n    this.leadingIcon_;\n    /** @private {?MDCTextFieldIcon} */\n    this.trailingIcon_;\n    /** @private {?MDCFloatingLabel} */\n    this.label_;\n    /** @private {?MDCNotchedOutline} */\n    this.outline_;\n  }\n\n  /**\n   * @param {!Element} root\n   * @return {!MDCTextField}\n   */\n  static attachTo(root) {\n    return new MDCTextField(root);\n  }\n\n  /**\n   * @param {(function(!Element, MDCRippleFoundation): !MDCRipple)=} rippleFactory A function which\n   * creates a new MDCRipple.\n   * @param {(function(!Element): !MDCLineRipple)=} lineRippleFactory A function which\n   * creates a new MDCLineRipple.\n   * @param {(function(!Element): !MDCTextFieldHelperText)=} helperTextFactory A function which\n   * creates a new MDCTextFieldHelperText.\n   * @param {(function(!Element): !MDCTextFieldCharacterCounter)=} characterCounterFactory A function which\n   * creates a new MDCTextFieldCharacterCounter.\n   * @param {(function(!Element): !MDCTextFieldIcon)=} iconFactory A function which\n   * creates a new MDCTextFieldIcon.\n   * @param {(function(!Element): !MDCFloatingLabel)=} labelFactory A function which\n   * creates a new MDCFloatingLabel.\n   * @param {(function(!Element): !MDCNotchedOutline)=} outlineFactory A function which\n   * creates a new MDCNotchedOutline.\n   */\n  initialize(\n    rippleFactory = (el, foundation) => new MDCRipple(el, foundation),\n    lineRippleFactory = (el) => new MDCLineRipple(el),\n    helperTextFactory = (el) => new MDCTextFieldHelperText(el),\n    characterCounterFactory = (el) => new MDCTextFieldCharacterCounter(el),\n    iconFactory = (el) => new MDCTextFieldIcon(el),\n    labelFactory = (el) => new MDCFloatingLabel(el),\n    outlineFactory = (el) => new MDCNotchedOutline(el)) {\n    this.input_ = this.root_.querySelector(strings.INPUT_SELECTOR);\n    const labelElement = this.root_.querySelector(strings.LABEL_SELECTOR);\n    if (labelElement) {\n      this.label_ = labelFactory(labelElement);\n    }\n    const lineRippleElement = this.root_.querySelector(strings.LINE_RIPPLE_SELECTOR);\n    if (lineRippleElement) {\n      this.lineRipple_ = lineRippleFactory(lineRippleElement);\n    }\n    const outlineElement = this.root_.querySelector(strings.OUTLINE_SELECTOR);\n    if (outlineElement) {\n      this.outline_ = outlineFactory(outlineElement);\n    }\n\n    // Helper text\n    const helperTextStrings = MDCTextFieldHelperTextFoundation.strings;\n    const nextElementSibling = this.root_.nextElementSibling;\n    const hasHelperLine = (nextElementSibling && nextElementSibling.classList.contains(cssClasses.HELPER_LINE));\n    const helperTextEl = hasHelperLine && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);\n    if (helperTextEl) {\n      this.helperText_ = helperTextFactory(helperTextEl);\n    }\n\n    // Character counter\n    const characterCounterStrings = MDCTextFieldCharacterCounterFoundation.strings;\n    let characterCounterEl = this.root_.querySelector(characterCounterStrings.ROOT_SELECTOR);\n    // If character counter is not found in root element search in sibling element.\n    if (!characterCounterEl && hasHelperLine) {\n      characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);\n    }\n\n    if (characterCounterEl) {\n      this.characterCounter_ = characterCounterFactory(characterCounterEl);\n    }\n\n    const iconElements = this.root_.querySelectorAll(strings.ICON_SELECTOR);\n    if (iconElements.length > 0) {\n      if (iconElements.length > 1) { // Has both icons.\n        this.leadingIcon_ = iconFactory(iconElements[0]);\n        this.trailingIcon_ = iconFactory(iconElements[1]);\n      } else {\n        if (this.root_.classList.contains(cssClasses.WITH_LEADING_ICON)) {\n          this.leadingIcon_ = iconFactory(iconElements[0]);\n        } else {\n          this.trailingIcon_ = iconFactory(iconElements[0]);\n        }\n      }\n    }\n\n    this.ripple = null;\n    if (!this.root_.classList.contains(cssClasses.TEXTAREA) && !this.root_.classList.contains(cssClasses.OUTLINED)) {\n      const MATCHES = getMatchesProperty(HTMLElement.prototype);\n      const adapter =\n        Object.assign(MDCRipple.createAdapter(/** @type {!RippleCapableSurface} */ (this)), {\n          isSurfaceActive: () => this.input_[MATCHES](':active'),\n          registerInteractionHandler: (type, handler) => this.input_.addEventListener(type, handler),\n          deregisterInteractionHandler: (type, handler) => this.input_.removeEventListener(type, handler),\n        });\n      const foundation = new MDCRippleFoundation(adapter);\n      this.ripple = rippleFactory(this.root_, foundation);\n    }\n  }\n\n  destroy() {\n    if (this.ripple) {\n      this.ripple.destroy();\n    }\n    if (this.lineRipple_) {\n      this.lineRipple_.destroy();\n    }\n    if (this.helperText_) {\n      this.helperText_.destroy();\n    }\n    if (this.characterCounter_) {\n      this.characterCounter_.destroy();\n    }\n    if (this.leadingIcon_) {\n      this.leadingIcon_.destroy();\n    }\n    if (this.trailingIcon_) {\n      this.trailingIcon_.destroy();\n    }\n    if (this.label_) {\n      this.label_.destroy();\n    }\n    if (this.outline_) {\n      this.outline_.destroy();\n    }\n    super.destroy();\n  }\n\n  /**\n   * Initiliazes the Text Field's internal state based on the environment's\n   * state.\n   */\n  initialSyncWithDom() {\n    this.disabled = this.input_.disabled;\n  }\n\n  /**\n   * @return {string} The value of the input.\n   */\n  get value() {\n    return this.foundation_.getValue();\n  }\n\n  /**\n   * @param {string} value The value to set on the input.\n   */\n  set value(value) {\n    this.foundation_.setValue(value);\n  }\n\n  /**\n   * @return {boolean} True if the Text Field is disabled.\n   */\n  get disabled() {\n    return this.foundation_.isDisabled();\n  }\n\n  /**\n   * @param {boolean} disabled Sets the Text Field disabled or enabled.\n   */\n  set disabled(disabled) {\n    this.foundation_.setDisabled(disabled);\n  }\n\n  /**\n   * @return {boolean} valid True if the Text Field is valid.\n   */\n  get valid() {\n    return this.foundation_.isValid();\n  }\n\n  /**\n   * @param {boolean} valid Sets the Text Field valid or invalid.\n   */\n  set valid(valid) {\n    this.foundation_.setValid(valid);\n  }\n\n  /**\n   * @return {boolean} True if the Text Field is required.\n   */\n  get required() {\n    return this.input_.required;\n  }\n\n  /**\n   * @param {boolean} required Sets the Text Field to required.\n   */\n  set required(required) {\n    this.input_.required = required;\n  }\n\n  /**\n   * @return {string} The input element's validation pattern.\n   */\n  get pattern() {\n    return this.input_.pattern;\n  }\n\n  /**\n   * @param {string} pattern Sets the input element's validation pattern.\n   */\n  set pattern(pattern) {\n    this.input_.pattern = pattern;\n  }\n\n  /**\n   * @return {number} The input element's minLength.\n   */\n  get minLength() {\n    return this.input_.minLength;\n  }\n\n  /**\n   * @param {number} minLength Sets the input element's minLength.\n   */\n  set minLength(minLength) {\n    this.input_.minLength = minLength;\n  }\n\n  /**\n   * @return {number} The input element's maxLength.\n   */\n  get maxLength() {\n    return this.input_.maxLength;\n  }\n\n  /**\n   * @param {number} maxLength Sets the input element's maxLength.\n   */\n  set maxLength(maxLength) {\n    // Chrome throws exception if maxLength is set < 0\n    if (maxLength < 0) {\n      this.input_.removeAttribute('maxLength');\n    } else {\n      this.input_.maxLength = maxLength;\n    }\n  }\n\n  /**\n   * @return {string} The input element's min.\n   */\n  get min() {\n    return this.input_.min;\n  }\n\n  /**\n   * @param {string} min Sets the input element's min.\n   */\n  set min(min) {\n    this.input_.min = min;\n  }\n\n  /**\n   * @return {string} The input element's max.\n   */\n  get max() {\n    return this.input_.max;\n  }\n\n  /**\n   * @param {string} max Sets the input element's max.\n   */\n  set max(max) {\n    this.input_.max = max;\n  }\n\n  /**\n   * @return {string} The input element's step.\n   */\n  get step() {\n    return this.input_.step;\n  }\n\n  /**\n   * @param {string} step Sets the input element's step.\n   */\n  set step(step) {\n    this.input_.step = step;\n  }\n\n  /**\n   * Sets the helper text element content.\n   * @param {string} content\n   */\n  set helperTextContent(content) {\n    this.foundation_.setHelperTextContent(content);\n  }\n\n  /**\n   * Sets the aria label of the leading icon.\n   * @param {string} label\n   */\n  set leadingIconAriaLabel(label) {\n    this.foundation_.setLeadingIconAriaLabel(label);\n  }\n\n  /**\n   * Sets the text content of the leading icon.\n   * @param {string} content\n   */\n  set leadingIconContent(content) {\n    this.foundation_.setLeadingIconContent(content);\n  }\n\n  /**\n   * Sets the aria label of the trailing icon.\n   * @param {string} label\n   */\n  set trailingIconAriaLabel(label) {\n    this.foundation_.setTrailingIconAriaLabel(label);\n  }\n\n  /**\n   * Sets the text content of the trailing icon.\n   * @param {string} content\n   */\n  set trailingIconContent(content) {\n    this.foundation_.setTrailingIconContent(content);\n  }\n\n  /**\n   * Enables or disables the use of native validation. Use this for custom validation.\n   * @param {boolean} useNativeValidation Set this to false to ignore native input validation.\n   */\n  set useNativeValidation(useNativeValidation) {\n    this.foundation_.setUseNativeValidation(useNativeValidation);\n  }\n\n  /**\n   * Focuses the input element.\n   */\n  focus() {\n    this.input_.focus();\n  }\n\n  /**\n   * Recomputes the outline SVG path for the outline element.\n   */\n  layout() {\n    const openNotch = this.foundation_.shouldFloat;\n    this.foundation_.notchOutline(openNotch);\n  }\n\n  /**\n   * @return {!MDCTextFieldFoundation}\n   */\n  getDefaultFoundation() {\n    return new MDCTextFieldFoundation(\n      /** @type {!MDCTextFieldAdapter} */ (Object.assign({\n        addClass: (className) => this.root_.classList.add(className),\n        removeClass: (className) => this.root_.classList.remove(className),\n        hasClass: (className) => this.root_.classList.contains(className),\n        registerTextFieldInteractionHandler: (evtType, handler) => this.root_.addEventListener(evtType, handler),\n        deregisterTextFieldInteractionHandler: (evtType, handler) => this.root_.removeEventListener(evtType, handler),\n        registerValidationAttributeChangeHandler: (handler) => {\n          const getAttributesList = (mutationsList) => mutationsList.map((mutation) => mutation.attributeName);\n          const observer = new MutationObserver((mutationsList) => handler(getAttributesList(mutationsList)));\n          const targetNode = this.root_.querySelector(strings.INPUT_SELECTOR);\n          const config = {attributes: true};\n          observer.observe(targetNode, config);\n          return observer;\n        },\n        deregisterValidationAttributeChangeHandler: (observer) => observer.disconnect(),\n        isFocused: () => {\n          return document.activeElement === this.root_.querySelector(strings.INPUT_SELECTOR);\n        },\n      },\n      this.getInputAdapterMethods_(),\n      this.getLabelAdapterMethods_(),\n      this.getLineRippleAdapterMethods_(),\n      this.getOutlineAdapterMethods_())),\n      this.getFoundationMap_());\n  }\n\n  /**\n   * @return {!{\n   *   shakeLabel: function(boolean): undefined,\n   *   floatLabel: function(boolean): undefined,\n   *   hasLabel: function(): boolean,\n   *   getLabelWidth: function(): number,\n   * }}\n   */\n  getLabelAdapterMethods_() {\n    return {\n      shakeLabel: (shouldShake) => this.label_.shake(shouldShake),\n      floatLabel: (shouldFloat) => this.label_.float(shouldFloat),\n      hasLabel: () => !!this.label_,\n      getLabelWidth: () => this.label_ ? this.label_.getWidth() : 0,\n    };\n  }\n\n  /**\n   * @return {!{\n   *   activateLineRipple: function(): undefined,\n   *   deactivateLineRipple: function(): undefined,\n   *   setLineRippleTransformOrigin: function(number): undefined,\n   * }}\n   */\n  getLineRippleAdapterMethods_() {\n    return {\n      activateLineRipple: () => {\n        if (this.lineRipple_) {\n          this.lineRipple_.activate();\n        }\n      },\n      deactivateLineRipple: () => {\n        if (this.lineRipple_) {\n          this.lineRipple_.deactivate();\n        }\n      },\n      setLineRippleTransformOrigin: (normalizedX) => {\n        if (this.lineRipple_) {\n          this.lineRipple_.setRippleCenter(normalizedX);\n        }\n      },\n    };\n  }\n\n  /**\n   * @return {!{\n   *   notchOutline: function(number, boolean): undefined,\n   *   hasOutline: function(): boolean,\n   * }}\n   */\n  getOutlineAdapterMethods_() {\n    return {\n      notchOutline: (labelWidth) => this.outline_.notch(labelWidth),\n      closeOutline: () => this.outline_.closeNotch(),\n      hasOutline: () => !!this.outline_,\n    };\n  }\n\n  /**\n   * @return {!{\n   *   registerInputInteractionHandler: function(string, function()): undefined,\n   *   deregisterInputInteractionHandler: function(string, function()): undefined,\n   *   getNativeInput: function(): ?Element,\n   * }}\n   */\n  getInputAdapterMethods_() {\n    return {\n      registerInputInteractionHandler: (evtType, handler) => this.input_.addEventListener(evtType, handler),\n      deregisterInputInteractionHandler: (evtType, handler) => this.input_.removeEventListener(evtType, handler),\n      getNativeInput: () => this.input_,\n    };\n  }\n\n  /**\n   * Returns a map of all subcomponents to subfoundations.\n   * @return {!FoundationMapType}\n   */\n  getFoundationMap_() {\n    return {\n      helperText: this.helperText_ ? this.helperText_.foundation : undefined,\n      characterCounter: this.characterCounter_ ? this.characterCounter_.foundation : undefined,\n      leadingIcon: this.leadingIcon_ ? this.leadingIcon_.foundation : undefined,\n      trailingIcon: this.trailingIcon_ ? this.trailingIcon_.foundation : undefined,\n    };\n  }\n}\n\nexport {MDCTextField, MDCTextFieldFoundation,\n  MDCTextFieldHelperText, MDCTextFieldHelperTextFoundation,\n  MDCTextFieldCharacterCounter, MDCTextFieldCharacterCounterFoundation,\n  MDCTextFieldIcon, MDCTextFieldIconFoundation};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nexport const cssClasses = {\n  FIXED: 'mdc-toolbar--fixed',\n  FIXED_LASTROW: 'mdc-toolbar--fixed-lastrow-only',\n  FIXED_AT_LAST_ROW: 'mdc-toolbar--fixed-at-last-row',\n  TOOLBAR_ROW_FLEXIBLE: 'mdc-toolbar--flexible',\n  FLEXIBLE_DEFAULT_BEHAVIOR: 'mdc-toolbar--flexible-default-behavior',\n  FLEXIBLE_MAX: 'mdc-toolbar--flexible-space-maximized',\n  FLEXIBLE_MIN: 'mdc-toolbar--flexible-space-minimized',\n};\n\nexport const strings = {\n  TITLE_SELECTOR: '.mdc-toolbar__title',\n  ICON_SELECTOR: '.mdc-toolbar__icon',\n  FIRST_ROW_SELECTOR: '.mdc-toolbar__row:first-child',\n  CHANGE_EVENT: 'MDCToolbar:change',\n};\n\nexport const numbers = {\n  MAX_TITLE_SIZE: 2.125,\n  MIN_TITLE_SIZE: 1.25,\n  TOOLBAR_ROW_HEIGHT: 64,\n  TOOLBAR_ROW_MOBILE_HEIGHT: 56,\n  TOOLBAR_MOBILE_BREAKPOINT: 600,\n};\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport MDCFoundation from '@material/base/foundation';\nimport {cssClasses, strings, numbers} from './constants';\n\nexport default class MDCToolbarFoundation extends MDCFoundation {\n  static get cssClasses() {\n    return cssClasses;\n  }\n\n  static get strings() {\n    return strings;\n  }\n\n  static get numbers() {\n    return numbers;\n  }\n\n  static get defaultAdapter() {\n    return {\n      hasClass: (/* className: string */) => /* boolean */ false,\n      addClass: (/* className: string */) => {},\n      removeClass: (/* className: string */) => {},\n      registerScrollHandler: (/* handler: EventListener */) => {},\n      deregisterScrollHandler: (/* handler: EventListener */) => {},\n      registerResizeHandler: (/* handler: EventListener */) => {},\n      deregisterResizeHandler: (/* handler: EventListener */) => {},\n      getViewportWidth: () => /* number */ 0,\n      getViewportScrollY: () => /* number */ 0,\n      getOffsetHeight: () => /* number */ 0,\n      getFirstRowElementOffsetHeight: () => /* number */ 0,\n      notifyChange: (/* evtData: {flexibleExpansionRatio: number} */) => {},\n      setStyle: (/* property: string, value: string */) => {},\n      setStyleForTitleElement: (/* property: string, value: string */) => {},\n      setStyleForFlexibleRowElement: (/* property: string, value: string */) => {},\n      setStyleForFixedAdjustElement: (/* property: string, value: string */) => {},\n    };\n  }\n\n  constructor(adapter) {\n    super(Object.assign(MDCToolbarFoundation.defaultAdapter, adapter));\n    this.resizeHandler_ = () => this.checkRowHeight_();\n    this.scrollHandler_ = () => this.updateToolbarStyles_();\n    this.checkRowHeightFrame_ = 0;\n    this.scrollFrame_ = 0;\n    this.executedLastChange_ = false;\n\n    this.calculations_ = {\n      toolbarRowHeight: 0,\n      // Calculated Height ratio. We use ratio to calculate corresponding heights in resize event.\n      toolbarRatio: 0, // The ratio of toolbar height to row height\n      flexibleExpansionRatio: 0, // The ratio of flexible space height to row height\n      maxTranslateYRatio: 0, // The ratio of max toolbar move up distance to row height\n      scrollThresholdRatio: 0, // The ratio of max scrollTop that we should listen to to row height\n      // Derived Heights based on the above key ratios.\n      toolbarHeight: 0,\n      flexibleExpansionHeight: 0, // Flexible row minus toolbar height (derived)\n      maxTranslateYDistance: 0, // When toolbar only fix last row (derived)\n      scrollThreshold: 0,\n    };\n    // Toolbar fixed behavior\n    // If toolbar is fixed\n    this.fixed_ = false;\n    // If fixed is targeted only at the last row\n    this.fixedLastrow_ = false;\n    // Toolbar flexible behavior\n    // If the first row is flexible\n    this.hasFlexibleRow_ = false;\n    // If use the default behavior\n    this.useFlexDefaultBehavior_ = false;\n  }\n\n  init() {\n    this.fixed_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED);\n    this.fixedLastrow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED_LASTROW) & this.fixed_;\n    this.hasFlexibleRow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.TOOLBAR_ROW_FLEXIBLE);\n    if (this.hasFlexibleRow_) {\n      this.useFlexDefaultBehavior_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_DEFAULT_BEHAVIOR);\n    }\n    this.initKeyRatio_();\n    this.setKeyHeights_();\n    this.adapter_.registerResizeHandler(this.resizeHandler_);\n    this.adapter_.registerScrollHandler(this.scrollHandler_);\n  }\n\n  destroy() {\n    this.adapter_.deregisterResizeHandler(this.resizeHandler_);\n    this.adapter_.deregisterScrollHandler(this.scrollHandler_);\n  }\n\n  updateAdjustElementStyles() {\n    if (this.fixed_) {\n      this.adapter_.setStyleForFixedAdjustElement('margin-top', `${this.calculations_.toolbarHeight}px`);\n    }\n  }\n\n  getFlexibleExpansionRatio_(scrollTop) {\n    // To prevent division by zero when there is no flexibleExpansionHeight\n    const delta = 0.0001;\n    return Math.max(0, 1 - scrollTop / (this.calculations_.flexibleExpansionHeight + delta));\n  }\n\n  checkRowHeight_() {\n    cancelAnimationFrame(this.checkRowHeightFrame_);\n    this.checkRowHeightFrame_ = requestAnimationFrame(() => this.setKeyHeights_());\n  }\n\n  setKeyHeights_() {\n    const newToolbarRowHeight = this.getRowHeight_();\n    if (newToolbarRowHeight !== this.calculations_.toolbarRowHeight) {\n      this.calculations_.toolbarRowHeight = newToolbarRowHeight;\n      this.calculations_.toolbarHeight = this.calculations_.toolbarRatio * this.calculations_.toolbarRowHeight;\n      this.calculations_.flexibleExpansionHeight =\n        this.calculations_.flexibleExpansionRatio * this.calculations_.toolbarRowHeight;\n      this.calculations_.maxTranslateYDistance =\n        this.calculations_.maxTranslateYRatio * this.calculations_.toolbarRowHeight;\n      this.calculations_.scrollThreshold =\n        this.calculations_.scrollThresholdRatio * this.calculations_.toolbarRowHeight;\n      this.updateAdjustElementStyles();\n      this.updateToolbarStyles_();\n    }\n  }\n\n  updateToolbarStyles_() {\n    cancelAnimationFrame(this.scrollFrame_);\n    this.scrollFrame_ = requestAnimationFrame(() => {\n      const scrollTop = this.adapter_.getViewportScrollY();\n      const hasScrolledOutOfThreshold = this.scrolledOutOfThreshold_(scrollTop);\n\n      if (hasScrolledOutOfThreshold && this.executedLastChange_) {\n        return;\n      }\n\n      const flexibleExpansionRatio = this.getFlexibleExpansionRatio_(scrollTop);\n\n      this.updateToolbarFlexibleState_(flexibleExpansionRatio);\n      if (this.fixedLastrow_) {\n        this.updateToolbarFixedState_(scrollTop);\n      }\n      if (this.hasFlexibleRow_) {\n        this.updateFlexibleRowElementStyles_(flexibleExpansionRatio);\n      }\n      this.executedLastChange_ = hasScrolledOutOfThreshold;\n      this.adapter_.notifyChange({flexibleExpansionRatio: flexibleExpansionRatio});\n    });\n  }\n\n  scrolledOutOfThreshold_(scrollTop) {\n    return scrollTop > this.calculations_.scrollThreshold;\n  }\n\n  initKeyRatio_() {\n    const toolbarRowHeight = this.getRowHeight_();\n    const firstRowMaxRatio = this.adapter_.getFirstRowElementOffsetHeight() / toolbarRowHeight;\n    this.calculations_.toolbarRatio = this.adapter_.getOffsetHeight() / toolbarRowHeight;\n    this.calculations_.flexibleExpansionRatio = firstRowMaxRatio - 1;\n    this.calculations_.maxTranslateYRatio =\n      this.fixedLastrow_ ? this.calculations_.toolbarRatio - firstRowMaxRatio : 0;\n    this.calculations_.scrollThresholdRatio =\n      (this.fixedLastrow_ ? this.calculations_.toolbarRatio : firstRowMaxRatio) - 1;\n  }\n\n  getRowHeight_() {\n    const breakpoint = MDCToolbarFoundation.numbers.TOOLBAR_MOBILE_BREAKPOINT;\n    return this.adapter_.getViewportWidth() < breakpoint ?\n      MDCToolbarFoundation.numbers.TOOLBAR_ROW_MOBILE_HEIGHT : MDCToolbarFoundation.numbers.TOOLBAR_ROW_HEIGHT;\n  }\n\n  updateToolbarFlexibleState_(flexibleExpansionRatio) {\n    this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);\n    this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);\n    if (flexibleExpansionRatio === 1) {\n      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);\n    } else if (flexibleExpansionRatio === 0) {\n      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);\n    }\n  }\n\n  updateToolbarFixedState_(scrollTop) {\n    const translateDistance = Math.max(0, Math.min(\n      scrollTop - this.calculations_.flexibleExpansionHeight,\n      this.calculations_.maxTranslateYDistance));\n    this.adapter_.setStyle('transform', `translateY(${-translateDistance}px)`);\n\n    if (translateDistance === this.calculations_.maxTranslateYDistance) {\n      this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);\n    } else {\n      this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);\n    }\n  }\n\n  updateFlexibleRowElementStyles_(flexibleExpansionRatio) {\n    if (this.fixed_) {\n      const height = this.calculations_.flexibleExpansionHeight * flexibleExpansionRatio;\n      this.adapter_.setStyleForFlexibleRowElement('height',\n        `${height + this.calculations_.toolbarRowHeight}px`);\n    }\n    if (this.useFlexDefaultBehavior_) {\n      this.updateElementStylesDefaultBehavior_(flexibleExpansionRatio);\n    }\n  }\n\n  updateElementStylesDefaultBehavior_(flexibleExpansionRatio) {\n    const maxTitleSize = MDCToolbarFoundation.numbers.MAX_TITLE_SIZE;\n    const minTitleSize = MDCToolbarFoundation.numbers.MIN_TITLE_SIZE;\n    const currentTitleSize = (maxTitleSize - minTitleSize) * flexibleExpansionRatio + minTitleSize;\n\n    this.adapter_.setStyleForTitleElement('font-size', `${currentTitleSize}rem`);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport MDCComponent from '@material/base/component';\nimport {MDCRipple} from '@material/ripple/index';\n\nimport MDCToolbarFoundation from './foundation';\n\nexport {MDCToolbarFoundation};\n\nexport class MDCToolbar extends MDCComponent {\n  static attachTo(root) {\n    return new MDCToolbar(root);\n  }\n\n  get firstRowElement_() {\n    return this.root_.querySelector(MDCToolbarFoundation.strings.FIRST_ROW_SELECTOR);\n  }\n\n  get titleElement_() {\n    return this.root_.querySelector(MDCToolbarFoundation.strings.TITLE_SELECTOR);\n  }\n\n  set fixedAdjustElement(fixedAdjustElement) {\n    this.fixedAdjustElement_ = fixedAdjustElement;\n    this.foundation_.updateAdjustElementStyles();\n  }\n\n  get fixedAdjustElement() {\n    return this.fixedAdjustElement_;\n  }\n\n  initialize() {\n    this.ripples_ = [].map.call(this.root_.querySelectorAll(MDCToolbarFoundation.strings.ICON_SELECTOR), (icon) => {\n      const ripple = MDCRipple.attachTo(icon);\n      ripple.unbounded = true;\n      return ripple;\n    });\n  }\n\n  destroy() {\n    this.ripples_.forEach((ripple) => {\n      ripple.destroy();\n    });\n    super.destroy();\n  }\n\n\n  getDefaultFoundation() {\n    return new MDCToolbarFoundation({\n      hasClass: (className) => this.root_.classList.contains(className),\n      addClass: (className) => this.root_.classList.add(className),\n      removeClass: (className) => this.root_.classList.remove(className),\n      registerScrollHandler: (handler) => window.addEventListener('scroll', handler),\n      deregisterScrollHandler: (handler) => window.removeEventListener('scroll', handler),\n      registerResizeHandler: (handler) => window.addEventListener('resize', handler),\n      deregisterResizeHandler: (handler) => window.removeEventListener('resize', handler),\n      getViewportWidth: () => window.innerWidth,\n      getViewportScrollY: () => window.pageYOffset,\n      getOffsetHeight: () => this.root_.offsetHeight,\n      getFirstRowElementOffsetHeight: () => this.firstRowElement_.offsetHeight,\n      notifyChange: (evtData) => this.emit(MDCToolbarFoundation.strings.CHANGE_EVENT, evtData),\n      setStyle: (property, value) => this.root_.style.setProperty(property, value),\n      setStyleForTitleElement: (property, value) => this.titleElement_.style.setProperty(property, value),\n      setStyleForFlexibleRowElement: (property, value) => this.firstRowElement_.style.setProperty(property, value),\n      setStyleForFixedAdjustElement: (property, value) => {\n        if (this.fixedAdjustElement) {\n          this.fixedAdjustElement.style.setProperty(property, value);\n        }\n      },\n    });\n  }\n}\n","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      max;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null && value > max) {\n            max = value;\n          }\n        }\n      }\n    }\n  }\n\n  return max;\n}\n","export var slice = Array.prototype.slice;\n","export default function(x) {\n  return x;\n}\n","import {slice} from \"./array\";\nimport identity from \"./identity\";\n\nvar top = 1,\n    right = 2,\n    bottom = 3,\n    left = 4,\n    epsilon = 1e-6;\n\nfunction translateX(x) {\n  return \"translate(\" + (x + 0.5) + \",0)\";\n}\n\nfunction translateY(y) {\n  return \"translate(0,\" + (y + 0.5) + \")\";\n}\n\nfunction number(scale) {\n  return function(d) {\n    return +scale(d);\n  };\n}\n\nfunction center(scale) {\n  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.\n  if (scale.round()) offset = Math.round(offset);\n  return function(d) {\n    return +scale(d) + offset;\n  };\n}\n\nfunction entering() {\n  return !this.__axis;\n}\n\nfunction axis(orient, scale) {\n  var tickArguments = [],\n      tickValues = null,\n      tickFormat = null,\n      tickSizeInner = 6,\n      tickSizeOuter = 6,\n      tickPadding = 3,\n      k = orient === top || orient === left ? -1 : 1,\n      x = orient === left || orient === right ? \"x\" : \"y\",\n      transform = orient === top || orient === bottom ? translateX : translateY;\n\n  function axis(context) {\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\n        range = scale.range(),\n        range0 = +range[0] + 0.5,\n        range1 = +range[range.length - 1] + 0.5,\n        position = (scale.bandwidth ? center : number)(scale.copy()),\n        selection = context.selection ? context.selection() : context,\n        path = selection.selectAll(\".domain\").data([null]),\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\n        tickExit = tick.exit(),\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n        line = tick.select(\"line\"),\n        text = tick.select(\"text\");\n\n    path = path.merge(path.enter().insert(\"path\", \".tick\")\n        .attr(\"class\", \"domain\")\n        .attr(\"stroke\", \"currentColor\"));\n\n    tick = tick.merge(tickEnter);\n\n    line = line.merge(tickEnter.append(\"line\")\n        .attr(\"stroke\", \"currentColor\")\n        .attr(x + \"2\", k * tickSizeInner));\n\n    text = text.merge(tickEnter.append(\"text\")\n        .attr(\"fill\", \"currentColor\")\n        .attr(x, k * spacing)\n        .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\n\n    if (context !== selection) {\n      path = path.transition(context);\n      tick = tick.transition(context);\n      line = line.transition(context);\n      text = text.transition(context);\n\n      tickExit = tickExit.transition(context)\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute(\"transform\"); });\n\n      tickEnter\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });\n    }\n\n    tickExit.remove();\n\n    path\n        .attr(\"d\", orient === left || orient == right\n            ? (tickSizeOuter ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H0.5V\" + range1 + \"H\" + k * tickSizeOuter : \"M0.5,\" + range0 + \"V\" + range1)\n            : (tickSizeOuter ? \"M\" + range0 + \",\" + k * tickSizeOuter + \"V0.5H\" + range1 + \"V\" + k * tickSizeOuter : \"M\" + range0 + \",0.5H\" + range1));\n\n    tick\n        .attr(\"opacity\", 1)\n        .attr(\"transform\", function(d) { return transform(position(d)); });\n\n    line\n        .attr(x + \"2\", k * tickSizeInner);\n\n    text\n        .attr(x, k * spacing)\n        .text(format);\n\n    selection.filter(entering)\n        .attr(\"fill\", \"none\")\n        .attr(\"font-size\", 10)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n    selection\n        .each(function() { this.__axis = position; });\n  }\n\n  axis.scale = function(_) {\n    return arguments.length ? (scale = _, axis) : scale;\n  };\n\n  axis.ticks = function() {\n    return tickArguments = slice.call(arguments), axis;\n  };\n\n  axis.tickArguments = function(_) {\n    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();\n  };\n\n  axis.tickValues = function(_) {\n    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();\n  };\n\n  axis.tickFormat = function(_) {\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\n  };\n\n  axis.tickSize = function(_) {\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeInner = function(_) {\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeOuter = function(_) {\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n  };\n\n  axis.tickPadding = function(_) {\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n  };\n\n  return axis;\n}\n\nexport function axisTop(scale) {\n  return axis(top, scale);\n}\n\nexport function axisRight(scale) {\n  return axis(right, scale);\n}\n\nexport function axisBottom(scale) {\n  return axis(bottom, scale);\n}\n\nexport function axisLeft(scale) {\n  return axis(left, scale);\n}\n","var noop = {value: function() {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import namespaces from \"./namespaces\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;\n}\n","import namespace from \"./namespace\";\nimport {xhtml} from \"./namespaces\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","import {Selection} from \"./index\";\nimport selector from \"../selector\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","import {Selection} from \"./index\";\nimport selectorAll from \"../selectorAll\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n","import {Selection} from \"./index\";\nimport matcher from \"../matcher\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","export default function(update) {\n  return new Array(update.length);\n}\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import {Selection} from \"./index\";\nimport {EnterNode} from \"./enter\";\nimport constant from \"../constant\";\n\nvar keyPrefix = \"$\"; // Protect against keys like “__proto__”.\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = {},\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);\n      if (keyValue in nodeByKeyValue) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue[keyValue] = node;\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = keyPrefix + key.call(parent, data[i], i, data);\n    if (node = nodeByKeyValue[keyValue]) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue[keyValue] = null;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nexport default function(value, key) {\n  if (!value) {\n    data = new Array(this.size()), j = -1;\n    this.each(function(d) { data[++j] = d; });\n    return data;\n  }\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = value.call(parent, parent && parent.__data__, j, parents),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n","import sparse from \"./sparse\";\nimport {Selection} from \"./index\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  enter = typeof onenter === \"function\" ? onenter(enter) : enter.append(onenter + \"\");\n  if (onupdate != null) update = onupdate(update);\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n","import {Selection} from \"./index\";\n\nexport default function(selection) {\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","import {Selection} from \"./index\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","export default function() {\n  var nodes = new Array(this.size()), i = -1;\n  this.each(function() { nodes[++i] = this; });\n  return nodes;\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  var size = 0;\n  this.each(function() { ++size; });\n  return size;\n}\n","export default function() {\n  return !this.node();\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","import namespace from \"../namespace\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","import defaultView from \"../window\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import creator from \"../creator\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","import creator from \"../creator\";\nimport selector from \"../selector\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","function selection_cloneShallow() {\n  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);\n}\n\nfunction selection_cloneDeep() {\n  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","var filterEvents = {};\n\nexport var event = null;\n\nif (typeof document !== \"undefined\") {\n  var element = document.documentElement;\n  if (!(\"onmouseenter\" in element)) {\n    filterEvents = {mouseenter: \"mouseover\", mouseleave: \"mouseout\"};\n  }\n}\n\nfunction filterContextListener(listener, index, group) {\n  listener = contextListener(listener, index, group);\n  return function(event) {\n    var related = event.relatedTarget;\n    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {\n      listener.call(this, event);\n    }\n  };\n}\n\nfunction contextListener(listener, index, group) {\n  return function(event1) {\n    var event0 = event; // Events can be reentrant (e.g., focus).\n    event = event1;\n    try {\n      listener.call(this, this.__data__, index, group);\n    } finally {\n      event = event0;\n    }\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, capture) {\n  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;\n  return function(d, i, group) {\n    var on = this.__on, o, listener = wrap(value, i, group);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.capture);\n        this.addEventListener(o.type, o.listener = listener, o.capture = capture);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, capture);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, capture) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  if (capture == null) capture = false;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));\n  return this;\n}\n\nexport function customEvent(event1, listener, that, args) {\n  var event0 = event;\n  event1.sourceEvent = event;\n  event = event1;\n  try {\n    return listener.apply(that, args);\n  } finally {\n    event = event0;\n  }\n}\n","import defaultView from \"../window\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","import selection_select from \"./select\";\nimport selection_selectAll from \"./selectAll\";\nimport selection_filter from \"./filter\";\nimport selection_data from \"./data\";\nimport selection_enter from \"./enter\";\nimport selection_exit from \"./exit\";\nimport selection_join from \"./join\";\nimport selection_merge from \"./merge\";\nimport selection_order from \"./order\";\nimport selection_sort from \"./sort\";\nimport selection_call from \"./call\";\nimport selection_nodes from \"./nodes\";\nimport selection_node from \"./node\";\nimport selection_size from \"./size\";\nimport selection_empty from \"./empty\";\nimport selection_each from \"./each\";\nimport selection_attr from \"./attr\";\nimport selection_style from \"./style\";\nimport selection_property from \"./property\";\nimport selection_classed from \"./classed\";\nimport selection_text from \"./text\";\nimport selection_html from \"./html\";\nimport selection_raise from \"./raise\";\nimport selection_lower from \"./lower\";\nimport selection_append from \"./append\";\nimport selection_insert from \"./insert\";\nimport selection_remove from \"./remove\";\nimport selection_clone from \"./clone\";\nimport selection_datum from \"./datum\";\nimport selection_on from \"./on\";\nimport selection_dispatch from \"./dispatch\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch\n};\n\nexport default selection;\n","import {Selection, root} from \"./selection/index\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","import {event} from \"./selection/on\";\n\nexport default function() {\n  var current = event, source;\n  while (source = current.sourceEvent) current = source;\n  return current;\n}\n","export default function(node, event) {\n  var svg = node.ownerSVGElement || node;\n\n  if (svg.createSVGPoint) {\n    var point = svg.createSVGPoint();\n    point.x = event.clientX, point.y = event.clientY;\n    point = point.matrixTransform(node.getScreenCTM().inverse());\n    return [point.x, point.y];\n  }\n\n  var rect = node.getBoundingClientRect();\n  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n}\n","import sourceEvent from \"./sourceEvent\";\nimport point from \"./point\";\n\nexport default function(node) {\n  var event = sourceEvent();\n  if (event.changedTouches) event = event.changedTouches[0];\n  return point(node, event);\n}\n","import {Selection, root} from \"./selection/index\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])\n      : new Selection([selector == null ? [] : selector], root);\n}\n","export default function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {\n  this.target = target;\n  this.type = type;\n  this.subject = subject;\n  this.identifier = id;\n  this.active = active;\n  this.x = x;\n  this.y = y;\n  this.dx = dx;\n  this.dy = dy;\n  this._ = dispatch;\n}\n\nDragEvent.prototype.on = function() {\n  var value = this._.on.apply(this._, arguments);\n  return value === this._ ? this : value;\n};\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?\\\\d*\\\\.?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex3 = /^#([0-9a-f]{3})$/,\n    reHex6 = /^#([0-9a-f]{6})$/,\n    reRgbInteger = new RegExp(\"^rgb\\\\(\" + [reI, reI, reI] + \"\\\\)$\"),\n    reRgbPercent = new RegExp(\"^rgb\\\\(\" + [reP, reP, reP] + \"\\\\)$\"),\n    reRgbaInteger = new RegExp(\"^rgba\\\\(\" + [reI, reI, reI, reN] + \"\\\\)$\"),\n    reRgbaPercent = new RegExp(\"^rgba\\\\(\" + [reP, reP, reP, reN] + \"\\\\)$\"),\n    reHslPercent = new RegExp(\"^hsl\\\\(\" + [reN, reP, reP] + \"\\\\)$\"),\n    reHslaPercent = new RegExp(\"^hsla\\\\(\" + [reN, reP, reP, reN] + \"\\\\)$\");\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  displayable: function() {\n    return this.rgb().displayable();\n  },\n  hex: function() {\n    return this.rgb().hex();\n  },\n  toString: function() {\n    return this.rgb() + \"\";\n  }\n});\n\nexport default function color(format) {\n  var m;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00\n      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format])\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb: function() {\n    return this;\n  },\n  displayable: function() {\n    return (0 <= this.r && this.r <= 255)\n        && (0 <= this.g && this.g <= 255)\n        && (0 <= this.b && this.b <= 255)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: function() {\n    return \"#\" + hex(this.r) + hex(this.g) + hex(this.b);\n  },\n  toString: function() {\n    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));\n    return (a === 1 ? \"rgb(\" : \"rgba(\")\n        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + \", \"\n        + Math.max(0, Math.min(255, Math.round(this.b) || 0))\n        + (a === 1 ? \")\" : \", \" + a + \")\");\n  }\n}));\n\nfunction hex(value) {\n  value = Math.max(0, Math.min(255, Math.round(value) || 0));\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  displayable: function() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  }\n}));\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export var deg2rad = Math.PI / 180;\nexport var rad2deg = 180 / Math.PI;\n","import define, {extend} from \"./define\";\nimport {Color, rgbConvert, Rgb} from \"./color\";\nimport {deg2rad, rad2deg} from \"./math\";\n\n// https://beta.observablehq.com/@mbostock/lab-and-rgb\nvar K = 18,\n    Xn = 0.96422,\n    Yn = 1,\n    Zn = 0.82521,\n    t0 = 4 / 29,\n    t1 = 6 / 29,\n    t2 = 3 * t1 * t1,\n    t3 = t1 * t1 * t1;\n\nfunction labConvert(o) {\n  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);\n  if (o instanceof Hcl) {\n    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);\n    var h = o.h * deg2rad;\n    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);\n  }\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = rgb2lrgb(o.r),\n      g = rgb2lrgb(o.g),\n      b = rgb2lrgb(o.b),\n      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;\n  if (r === g && g === b) x = z = y; else {\n    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);\n    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);\n  }\n  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);\n}\n\nexport function gray(l, opacity) {\n  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);\n}\n\nexport default function lab(l, a, b, opacity) {\n  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);\n}\n\nexport function Lab(l, a, b, opacity) {\n  this.l = +l;\n  this.a = +a;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Lab, lab, extend(Color, {\n  brighter: function(k) {\n    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  darker: function(k) {\n    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);\n  },\n  rgb: function() {\n    var y = (this.l + 16) / 116,\n        x = isNaN(this.a) ? y : y + this.a / 500,\n        z = isNaN(this.b) ? y : y - this.b / 200;\n    x = Xn * lab2xyz(x);\n    y = Yn * lab2xyz(y);\n    z = Zn * lab2xyz(z);\n    return new Rgb(\n      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),\n      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),\n      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),\n      this.opacity\n    );\n  }\n}));\n\nfunction xyz2lab(t) {\n  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;\n}\n\nfunction lab2xyz(t) {\n  return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfunction lrgb2rgb(x) {\n  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);\n}\n\nfunction rgb2lrgb(x) {\n  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n}\n\nfunction hclConvert(o) {\n  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);\n  if (!(o instanceof Lab)) o = labConvert(o);\n  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);\n  var h = Math.atan2(o.b, o.a) * rad2deg;\n  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);\n}\n\nexport function lch(l, c, h, opacity) {\n  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function hcl(h, c, l, opacity) {\n  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);\n}\n\nexport function Hcl(h, c, l, opacity) {\n  this.h = +h;\n  this.c = +c;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hcl, hcl, extend(Color, {\n  brighter: function(k) {\n    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);\n  },\n  darker: function(k) {\n    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);\n  },\n  rgb: function() {\n    return labConvert(this).rgb();\n  }\n}));\n","import define, {extend} from \"./define\";\nimport {Color, rgbConvert, Rgb, darker, brighter} from \"./color\";\nimport {deg2rad, rad2deg} from \"./math\";\n\nvar A = -0.14861,\n    B = +1.78277,\n    C = -0.29227,\n    D = -0.90649,\n    E = +1.97294,\n    ED = E * D,\n    EB = E * B,\n    BC_DA = B * C - D * A;\n\nfunction cubehelixConvert(o) {\n  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Rgb)) o = rgbConvert(o);\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),\n      bl = b - l,\n      k = (E * (g - l) - C * bl) / D,\n      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1\n      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;\n  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);\n}\n\nexport default function cubehelix(h, s, l, opacity) {\n  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);\n}\n\nexport function Cubehelix(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Cubehelix, cubehelix, extend(Color, {\n  brighter: function(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker: function(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb: function() {\n    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,\n        l = +this.l,\n        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),\n        cosh = Math.cos(h),\n        sinh = Math.sin(h);\n    return new Rgb(\n      255 * (l + a * (A * cosh + B * sinh)),\n      255 * (l + a * (C * cosh + D * sinh)),\n      255 * (l + a * (E * cosh)),\n      this.opacity\n    );\n  }\n}));\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import constant from \"./constant\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis\";\nimport basisClosed from \"./basisClosed\";\nimport nogamma, {gamma} from \"./color\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","import value from \"./value\";\n\nexport default function(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b -= a, function(t) {\n    return d.setTime(a + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b -= a, function(t) {\n    return a + b * t;\n  };\n}\n","import value from \"./value\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import number from \"./number\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb\";\nimport array from \"./array\";\nimport date from \"./date\";\nimport number from \"./number\";\nimport object from \"./object\";\nimport string from \"./string\";\nimport constant from \"./constant\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : Array.isArray(b) ? array\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","export default function(a, b) {\n  return a = +a, b -= a, function(t) {\n    return Math.round(a + b * t);\n  };\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import decompose, {identity} from \"./decompose\";\n\nvar cssNode,\n    cssRoot,\n    cssView,\n    svgNode;\n\nexport function parseCss(value) {\n  if (value === \"none\") return identity;\n  if (!cssNode) cssNode = document.createElement(\"DIV\"), cssRoot = document.documentElement, cssView = document.defaultView;\n  cssNode.style.transform = value;\n  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue(\"transform\");\n  cssRoot.removeChild(cssNode);\n  value = value.slice(7, -1).split(\",\");\n  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import number from \"../number\";\nimport {parseCss, parseSvg} from \"./parse\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","import {cubehelix as colorCubehelix} from \"d3-color\";\nimport color, {hue} from \"./color\";\n\nfunction cubehelix(hue) {\n  return (function cubehelixGamma(y) {\n    y = +y;\n\n    function cubehelix(start, end) {\n      var h = hue((start = colorCubehelix(start)).h, (end = colorCubehelix(end)).h),\n          s = color(start.s, end.s),\n          l = color(start.l, end.l),\n          opacity = color(start.opacity, end.opacity);\n      return function(t) {\n        start.h = h(t);\n        start.s = s(t);\n        start.l = l(Math.pow(t, y));\n        start.opacity = opacity(t);\n        return start + \"\";\n      };\n    }\n\n    cubehelix.gamma = cubehelixGamma;\n\n    return cubehelix;\n  })(1);\n}\n\nexport default cubehelix(hue);\nexport var cubehelixLong = cubehelix(color);\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","import {Timer} from \"./timer\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(function(elapsed) {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n","import {STARTING, ENDING, ENDED} from \"./transition/schedule\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n","import interrupt from \"../interrupt\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n","import {get, set} from \"./schedule\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n","import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n","import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween\";\nimport interpolate from \"./interpolate\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));\n}\n","import {namespace} from \"d3-selection\";\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i(t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i(t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n","import {get, init} from \"./schedule\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n","import {get, set} from \"./schedule\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n","import {get, set} from \"./schedule\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n","import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n","import {Transition} from \"./index\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n","import {get, set, init} from \"./schedule\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n","function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n","import {selector} from \"d3-selection\";\nimport {Transition} from \"./index\";\nimport schedule, {get} from \"./schedule\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n","import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index\";\nimport schedule, {get} from \"./schedule\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n","import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n","import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {set} from \"./schedule\";\nimport {tweenValue} from \"./tween\";\nimport interpolate from \"./interpolate\";\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        string1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = style(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        value1 = value(this),\n        string1 = value1 + \"\";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\n  return function() {\n    var schedule = set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on(\"end.style.\" + name, styleRemove(name))\n    : typeof value === \"function\" ? this\n      .styleTween(name, styleFunction(name, i, tweenValue(this, \"style.\" + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, styleConstant(name, i, value), priority)\n      .on(\"end.style.\" + name, null);\n}\n","function styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i(t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n","import {tweenValue} from \"./tween\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n","import {Transition, newId} from \"./index\";\nimport schedule, {get} from \"./schedule\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n","import {set} from \"./schedule\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n  });\n}\n","import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr\";\nimport transition_attrTween from \"./attrTween\";\nimport transition_delay from \"./delay\";\nimport transition_duration from \"./duration\";\nimport transition_ease from \"./ease\";\nimport transition_filter from \"./filter\";\nimport transition_merge from \"./merge\";\nimport transition_on from \"./on\";\nimport transition_remove from \"./remove\";\nimport transition_select from \"./select\";\nimport transition_selectAll from \"./selectAll\";\nimport transition_selection from \"./selection\";\nimport transition_style from \"./style\";\nimport transition_styleTween from \"./styleTween\";\nimport transition_text from \"./text\";\nimport transition_transition from \"./transition\";\nimport transition_tween from \"./tween\";\nimport transition_end from \"./end\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease,\n  end: transition_end\n};\n","export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n","import {Transition, newId} from \"../transition/index\";\nimport schedule from \"../transition/schedule\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      return defaultTiming.time = now(), defaultTiming;\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n","import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt\";\nimport selection_transition from \"./transition\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n","import {Transition} from \"./transition/index\";\nimport {SCHEDULED} from \"./transition/schedule\";\n\nvar root = [null];\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      i;\n\n  if (schedules) {\n    name = name == null ? null : name + \"\";\n    for (i in schedules) {\n      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {\n        return new Transition([[node]], root, name, +i);\n      }\n    }\n  }\n\n  return null;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {customEvent, event, mouse, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant\";\nimport BrushEvent from \"./event\";\nimport noevent, {nopropagation} from \"./noevent\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nvar X = {\n  name: \"x\",\n  handles: [\"e\", \"w\"].map(type),\n  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"e\", \"s\", \"w\", \"nw\", \"ne\", \"se\", \"sw\"].map(type),\n  input: function(xy) { return xy; },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter() {\n  return !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      listeners = dispatch(brush, \"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\")\n        .on(\"mousedown.brush touchstart.brush\", started);\n  }\n\n  brush.move = function(group, selection) {\n    if (group.selection) {\n      group\n          .on(\"start.brush\", function() { emitter(this, arguments).beforestart().start(); })\n          .on(\"interrupt.brush end.brush\", function() { emitter(this, arguments).end(); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && empty(selection1) ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 && selection1 ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 == null || empty(selection1) ? null : selection1;\n            redraw.call(that);\n            emit.start().brush().end();\n          });\n    }\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args) {\n    return that.__brush.emitter || new Emitter(that, args);\n  }\n\n  function Emitter(that, args) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function() {\n      if (this.starting) this.starting = false, this.emit(\"start\");\n      return this;\n    },\n    brush: function() {\n      this.emit(\"brush\");\n      return this;\n    },\n    end: function() {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\");\n      return this;\n    },\n    emit: function(type) {\n      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);\n    }\n  };\n\n  function started() {\n    if (event.touches) { if (event.changedTouches.length < event.touches.length) return noevent(); }\n    else if (touchending) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx,\n        dy,\n        moving,\n        shifting = signX && signY && event.shiftKey,\n        lockX,\n        lockY,\n        point0 = mouse(that),\n        point = point0,\n        emit = emitter(that, arguments).beforestart();\n\n    if (type === \"overlay\") {\n      state.selection = selection = [\n        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],\n        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]\n      ];\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    if (event.touches) {\n      group\n          .on(\"touchmove.brush\", moved, true)\n          .on(\"touchend.brush touchcancel.brush\", ended, true);\n    } else {\n      var view = select(event.view)\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n\n      dragDisable(event.view);\n    }\n\n    nopropagation();\n    interrupt(that);\n    redraw.call(that);\n    emit.start();\n\n    function moved() {\n      var point1 = mouse(that);\n      if (shifting && !lockX && !lockY) {\n        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;\n        else lockX = true;\n      }\n      point = point1;\n      moving = true;\n      noevent();\n      move();\n    }\n\n    function move() {\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));\n          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush();\n      }\n    }\n\n    function ended() {\n      nopropagation();\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n        group.on(\"touchmove.brush touchend.brush touchcancel.brush\", null);\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end();\n    }\n\n    function keydowned() {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent();\n    }\n\n    function keyupped() {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move();\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move();\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move();\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent();\n    }\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = extent.apply(this, arguments);\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n","var pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon));\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) throw new Error(\"negative radius: \" + r);\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) return;\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) da = da % tau + tau;\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nexport default path;\n","export var prefix = \"$\";\n\nfunction Map() {}\n\nMap.prototype = map.prototype = {\n  constructor: Map,\n  has: function(key) {\n    return (prefix + key) in this;\n  },\n  get: function(key) {\n    return this[prefix + key];\n  },\n  set: function(key, value) {\n    this[prefix + key] = value;\n    return this;\n  },\n  remove: function(key) {\n    var property = prefix + key;\n    return property in this && delete this[property];\n  },\n  clear: function() {\n    for (var property in this) if (property[0] === prefix) delete this[property];\n  },\n  keys: function() {\n    var keys = [];\n    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));\n    return keys;\n  },\n  values: function() {\n    var values = [];\n    for (var property in this) if (property[0] === prefix) values.push(this[property]);\n    return values;\n  },\n  entries: function() {\n    var entries = [];\n    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});\n    return entries;\n  },\n  size: function() {\n    var size = 0;\n    for (var property in this) if (property[0] === prefix) ++size;\n    return size;\n  },\n  empty: function() {\n    for (var property in this) if (property[0] === prefix) return false;\n    return true;\n  },\n  each: function(f) {\n    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);\n  }\n};\n\nfunction map(object, f) {\n  var map = new Map;\n\n  // Copy constructor.\n  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });\n\n  // Index array by numeric index or specified key function.\n  else if (Array.isArray(object)) {\n    var i = -1,\n        n = object.length,\n        o;\n\n    if (f == null) while (++i < n) map.set(i, object[i]);\n    else while (++i < n) map.set(f(o = object[i], i, object), o);\n  }\n\n  // Convert object to map.\n  else if (object) for (var key in object) map.set(key, object[key]);\n\n  return map;\n}\n\nexport default map;\n","export default function(map) {\n  var keys = [];\n  for (var key in map) keys.push(key);\n  return keys;\n}\n","export default function(map) {\n  var values = [];\n  for (var key in map) values.push(map[key]);\n  return values;\n}\n","export default function(map) {\n  var entries = [];\n  for (var key in map) entries.push({key: key, value: map[key]});\n  return entries;\n}\n","// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurX(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var j = 0; j < m; ++j) {\n    for (var i = 0, sr = 0; i < n + r; ++i) {\n      if (i < n) {\n        sr += source.data[i + j * n];\n      }\n      if (i >= r) {\n        if (i >= w) {\n          sr -= source.data[i - w + j * n];\n        }\n        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);\n      }\n    }\n  }\n}\n\n// TODO Optimize edge cases.\n// TODO Optimize index calculation.\n// TODO Optimize arguments.\nexport function blurY(source, target, r) {\n  var n = source.width,\n      m = source.height,\n      w = (r << 1) + 1;\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0, sr = 0; j < m + r; ++j) {\n      if (j < m) {\n        sr += source.data[i + j * n];\n      }\n      if (j >= r) {\n        if (j >= w) {\n          sr -= source.data[i + (j - w) * n];\n        }\n        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);\n      }\n    }\n  }\n}\n","var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"]\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows\n  };\n}\n","import dsv from \"./dsv\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\n","import dsv from \"./dsv\";\n\nvar tsv = dsv(\"\\t\");\n\nexport var tsvParse = tsv.parse;\nexport var tsvParseRows = tsv.parseRows;\nexport var tsvFormat = tsv.format;\nexport var tsvFormatBody = tsv.formatBody;\nexport var tsvFormatRows = tsv.formatRows;\n","export default function(d) {\n  var x = +this._x.call(null, d),\n      y = +this._y.call(null, d);\n  return add(this.cover(x, y), x, y, d);\n}\n\nfunction add(tree, x, y, d) {\n  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points\n\n  var parent,\n      node = tree._root,\n      leaf = {data: d},\n      x0 = tree._x0,\n      y0 = tree._y0,\n      x1 = tree._x1,\n      y1 = tree._y1,\n      xm,\n      ym,\n      xp,\n      yp,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return tree._root = leaf, tree;\n\n  // Find the existing leaf for the new point, or add it.\n  while (node.length) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;\n  }\n\n  // Is the new point is exactly coincident with the existing point?\n  xp = +tree._x.call(null, node.data);\n  yp = +tree._y.call(null, node.data);\n  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;\n\n  // Otherwise, split the leaf node until the old and new point are separated.\n  do {\n    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));\n  return parent[j] = node, parent[i] = leaf, tree;\n}\n\nexport function addAll(data) {\n  var d, i, n = data.length,\n      x,\n      y,\n      xz = new Array(n),\n      yz = new Array(n),\n      x0 = Infinity,\n      y0 = Infinity,\n      x1 = -Infinity,\n      y1 = -Infinity;\n\n  // Compute the points and their extent.\n  for (i = 0; i < n; ++i) {\n    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;\n    xz[i] = x;\n    yz[i] = y;\n    if (x < x0) x0 = x;\n    if (x > x1) x1 = x;\n    if (y < y0) y0 = y;\n    if (y > y1) y1 = y;\n  }\n\n  // If there were no (valid) points, abort.\n  if (x0 > x1 || y0 > y1) return this;\n\n  // Expand the tree to cover the new points.\n  this.cover(x0, y0).cover(x1, y1);\n\n  // Add the new points.\n  for (i = 0; i < n; ++i) {\n    add(this, xz[i], yz[i], data[i]);\n  }\n\n  return this;\n}\n","export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else {\n    var z = x1 - x0,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1) {\n      i = (y < y0) << 1 | (x < x0);\n      parent = new Array(4), parent[i] = node, node = parent, z *= 2;\n      switch (i) {\n        case 0: x1 = x0 + z, y1 = y0 + z; break;\n        case 1: x0 = x1 - z, y1 = y0 + z; break;\n        case 2: x1 = x0 + z, y0 = y1 - z; break;\n        case 3: x0 = x1 - z, y0 = y1 - z; break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n","export default function() {\n  var data = [];\n  this.visit(function(node) {\n    if (!node.length) do data.push(node.data); while (node = node.next)\n  });\n  return data;\n}\n","export default function(_) {\n  return arguments.length\n      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])\n      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];\n}\n","export default function(node, x0, y0, x1, y1) {\n  this.node = node;\n  this.x0 = x0;\n  this.y0 = y0;\n  this.x1 = x1;\n  this.y1 = y1;\n}\n","import Quad from \"./quad\";\n\nexport default function(x, y, radius) {\n  var data,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1,\n      y1,\n      x2,\n      y2,\n      x3 = this._x1,\n      y3 = this._y1,\n      quads = [],\n      node = this._root,\n      q,\n      i;\n\n  if (node) quads.push(new Quad(node, x0, y0, x3, y3));\n  if (radius == null) radius = Infinity;\n  else {\n    x0 = x - radius, y0 = y - radius;\n    x3 = x + radius, y3 = y + radius;\n    radius *= radius;\n  }\n\n  while (q = quads.pop()) {\n\n    // Stop searching if this quadrant can’t contain a closer node.\n    if (!(node = q.node)\n        || (x1 = q.x0) > x3\n        || (y1 = q.y0) > y3\n        || (x2 = q.x1) < x0\n        || (y2 = q.y1) < y0) continue;\n\n    // Bisect the current quadrant.\n    if (node.length) {\n      var xm = (x1 + x2) / 2,\n          ym = (y1 + y2) / 2;\n\n      quads.push(\n        new Quad(node[3], xm, ym, x2, y2),\n        new Quad(node[2], x1, ym, xm, y2),\n        new Quad(node[1], xm, y1, x2, ym),\n        new Quad(node[0], x1, y1, xm, ym)\n      );\n\n      // Visit the closest quadrant first.\n      if (i = (y >= ym) << 1 | (x >= xm)) {\n        q = quads[quads.length - 1];\n        quads[quads.length - 1] = quads[quads.length - 1 - i];\n        quads[quads.length - 1 - i] = q;\n      }\n    }\n\n    // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var dx = x - +this._x.call(null, node.data),\n          dy = y - +this._y.call(null, node.data),\n          d2 = dx * dx + dy * dy;\n      if (d2 < radius) {\n        var d = Math.sqrt(radius = d2);\n        x0 = x - d, y0 = y - d;\n        x3 = x + d, y3 = y + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}\n","export default function(d) {\n  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points\n\n  var parent,\n      node = this._root,\n      retainer,\n      previous,\n      next,\n      x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1,\n      x,\n      y,\n      xm,\n      ym,\n      right,\n      bottom,\n      i,\n      j;\n\n  // If the tree is empty, initialize the root as a leaf.\n  if (!node) return this;\n\n  // Find the leaf node for the point.\n  // While descending, also retain the deepest parent with a non-removed sibling.\n  if (node.length) while (true) {\n    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;\n    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;\n    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;\n    if (!node.length) break;\n    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;\n  }\n\n  // Find the point to remove.\n  while (node.data !== d) if (!(previous = node, node = node.next)) return this;\n  if (next = node.next) delete node.next;\n\n  // If there are multiple coincident points, remove just the point.\n  if (previous) return (next ? previous.next = next : delete previous.next), this;\n\n  // If this is the root point, remove it.\n  if (!parent) return this._root = next, this;\n\n  // Remove this leaf.\n  next ? parent[i] = next : delete parent[i];\n\n  // If the parent now contains exactly one leaf, collapse superfluous parents.\n  if ((node = parent[0] || parent[1] || parent[2] || parent[3])\n      && node === (parent[3] || parent[2] || parent[1] || parent[0])\n      && !node.length) {\n    if (retainer) retainer[j] = node;\n    else this._root = node;\n  }\n\n  return this;\n}\n\nexport function removeAll(data) {\n  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);\n  return this;\n}\n","export default function() {\n  return this._root;\n}\n","export default function() {\n  var size = 0;\n  this.visit(function(node) {\n    if (!node.length) do ++size; while (node = node.next)\n  });\n  return size;\n}\n","import Quad from \"./quad\";\n\nexport default function(callback) {\n  var quads = [], q, node = this._root, child, x0, y0, x1, y1;\n  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {\n      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n    }\n  }\n  return this;\n}\n","import Quad from \"./quad\";\n\nexport default function(callback) {\n  var quads = [], next = [], q;\n  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));\n  while (q = quads.pop()) {\n    var node = q.node;\n    if (node.length) {\n      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;\n      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));\n      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));\n      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));\n      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));\n    }\n    next.push(q);\n  }\n  while (q = next.pop()) {\n    callback(q.node, q.x0, q.y0, q.x1, q.y1);\n  }\n  return this;\n}\n","export function defaultX(d) {\n  return d[0];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._x = _, this) : this._x;\n}\n","export function defaultY(d) {\n  return d[1];\n}\n\nexport default function(_) {\n  return arguments.length ? (this._y = _, this) : this._y;\n}\n","import tree_add, {addAll as tree_addAll} from \"./add\";\nimport tree_cover from \"./cover\";\nimport tree_data from \"./data\";\nimport tree_extent from \"./extent\";\nimport tree_find from \"./find\";\nimport tree_remove, {removeAll as tree_removeAll} from \"./remove\";\nimport tree_root from \"./root\";\nimport tree_size from \"./size\";\nimport tree_visit from \"./visit\";\nimport tree_visitAfter from \"./visitAfter\";\nimport tree_x, {defaultX} from \"./x\";\nimport tree_y, {defaultY} from \"./y\";\n\nexport default function quadtree(nodes, x, y) {\n  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);\n  return nodes == null ? tree : tree.addAll(nodes);\n}\n\nfunction Quadtree(x, y, x0, y0, x1, y1) {\n  this._x = x;\n  this._y = y;\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._root = undefined;\n}\n\nfunction leaf_copy(leaf) {\n  var copy = {data: leaf.data}, next = copy;\n  while (leaf = leaf.next) next = next.next = {data: leaf.data};\n  return copy;\n}\n\nvar treeProto = quadtree.prototype = Quadtree.prototype;\n\ntreeProto.copy = function() {\n  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),\n      node = this._root,\n      nodes,\n      child;\n\n  if (!node) return copy;\n\n  if (!node.length) return copy._root = leaf_copy(node), copy;\n\n  nodes = [{source: node, target: copy._root = new Array(4)}];\n  while (node = nodes.pop()) {\n    for (var i = 0; i < 4; ++i) {\n      if (child = node.source[i]) {\n        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});\n        else node.target[i] = leaf_copy(child);\n      }\n    }\n  }\n\n  return copy;\n};\n\ntreeProto.add = tree_add;\ntreeProto.addAll = tree_addAll;\ntreeProto.cover = tree_cover;\ntreeProto.data = tree_data;\ntreeProto.extent = tree_extent;\ntreeProto.find = tree_find;\ntreeProto.remove = tree_remove;\ntreeProto.removeAll = tree_removeAll;\ntreeProto.root = tree_root;\ntreeProto.size = tree_size;\ntreeProto.visit = tree_visit;\ntreeProto.visitAfter = tree_visitAfter;\ntreeProto.x = tree_x;\ntreeProto.y = tree_y;\n","// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  this.fill = match[1] || \" \";\n  this.align = match[2] || \">\";\n  this.sign = match[3] || \"-\";\n  this.symbol = match[4] || \"\";\n  this.zero = !!match[5];\n  this.width = match[6] && +match[6];\n  this.comma = !!match[7];\n  this.precision = match[8] && +match[8].slice(1);\n  this.trim = !!match[9];\n  this.type = match[10] || \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import formatDecimal from \"./formatDecimal\";\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatPrefixAuto from \"./formatPrefixAuto\";\nimport formatRounded from \"./formatRounded\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTrim from \"./formatTrim\";\nimport formatTypes from \"./formatTypes\";\nimport {prefixExponent} from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import exponent from \"./exponent\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","// Adds floating point numbers with twice the normal precision.\n// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and\n// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)\n// 305–363 (1997).\n// Code adapted from GeographicLib by Charles F. F. Karney,\n// http://geographiclib.sourceforge.net/\n\nexport default function() {\n  return new Adder;\n}\n\nfunction Adder() {\n  this.reset();\n}\n\nAdder.prototype = {\n  constructor: Adder,\n  reset: function() {\n    this.s = // rounded value\n    this.t = 0; // exact error\n  },\n  add: function(y) {\n    add(temp, y, this.t);\n    add(this, temp.s, this.s);\n    if (this.s) this.t += temp.t;\n    else this.s = temp.t;\n  },\n  valueOf: function() {\n    return this.s;\n  }\n};\n\nvar temp = new Adder;\n\nfunction add(adder, a, b) {\n  var x = adder.s = a + b,\n      bv = x - a,\n      av = x - bv;\n  adder.t = (a - av) + (b - bv);\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","import adder from \"./adder\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nexport var areaRingSum = adder();\n\nvar areaSum = adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum.reset();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum.reset();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import adder from \"./adder\";\nimport {areaStream, areaRingSum} from \"./area\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport {abs, degrees, epsilon, radians} from \"./math\";\nimport stream from \"./stream\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum = adder(),\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum.reset();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian\";\nimport constant from \"./constant\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math\";\nimport {rotateRadians} from \"./rotation\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, halfPi, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n","import adder from \"./adder\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math\";\nimport noop from \"./noop\";\nimport stream from \"./stream\";\n\nvar lengthSum = adder(),\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum.reset();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import adder from \"../adder\";\nimport {abs} from \"../math\";\nimport noop from \"../noop\";\n\nvar areaSum = adder(),\n    areaRingSum = adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum.reset();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum.reset();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","import adder from \"../adder\";\nimport {sqrt} from \"../math\";\nimport noop from \"../noop\";\n\nvar lengthSum = adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum.reset();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","import {asin, atan2, cos, sin, sqrt} from \"../math\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {asin, cos, epsilon, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import {atan, cos, sin} from \"../math\";\nimport {azimuthalInvert} from \"./azimuthal\";\nimport projection from \"./index\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of\n// the 3D cross product in a quadrant I Cartesian coordinate system (+x is\n// right, +y is up). Returns a positive value if ABC is counter-clockwise,\n// negative if clockwise, and zero if the points are collinear.\nexport default function(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.interpolator(domain); break;\n    default: this.interpolator(interpolator).domain(domain); break;\n  }\n  return this;\n}\n","var array = Array.prototype;\n\nexport var map = array.map;\nexport var slice = array.slice;\n","import {map} from \"d3-collection\";\nimport {slice} from \"./array\";\nimport {initRange} from \"./init\";\n\nexport var implicit = {name: \"implicit\"};\n\nexport default function ordinal() {\n  var index = map(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    var key = d + \"\", i = index.get(key);\n    if (!i) {\n      if (unknown !== implicit) return unknown;\n      index.set(key, i = domain.push(d));\n    }\n    return range[(i - 1) % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = map();\n    var i = -1, n = _.length, d, key;\n    while (++i < n) if (!index.has(key = (d = _[i]) + \"\")) index.set(key, domain.push(d));\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {range as sequence} from \"d3-array\";\nimport {initRange} from \"./init\";\nimport ordinal from \"./ordinal\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      range = [0, 1],\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = range[1] < range[0],\n        start = range[reverse - 0],\n        stop = range[1 - reverse];\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = [+_[0], +_[1]], round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), range)\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport {map, slice} from \"./array\";\nimport constant from \"./constant\";\nimport number from \"./number\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(domain) {\n  var a = domain[0], b = domain[domain.length - 1], t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = map.call(_, number), clamp === identity || (clamp = clamper(domain)), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = slice.call(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = slice.call(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? clamper(domain) : identity, scale) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous(transform, untransform) {\n  return transformer()(transform, untransform);\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy, identity} from \"./continuous\";\nimport {initRange} from \"./init\";\nimport tickFormat from \"./tickFormat\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain(),\n        i0 = 0,\n        i1 = d.length - 1,\n        start = d[i0],\n        stop = d[i1],\n        step;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n\n    step = tickIncrement(start, stop, count);\n\n    if (step > 0) {\n      start = Math.floor(start / step) * step;\n      stop = Math.ceil(stop / step) * step;\n      step = tickIncrement(start, stop, count);\n    } else if (step < 0) {\n      start = Math.ceil(start * step) / step;\n      stop = Math.floor(stop * step) / step;\n      step = tickIncrement(start, stop, count);\n    }\n\n    if (step > 0) {\n      d[i0] = Math.floor(start / step) * step;\n      d[i1] = Math.ceil(stop / step) * step;\n      domain(d);\n    } else if (step < 0) {\n      d[i0] = Math.ceil(start * step) / step;\n      d[i1] = Math.floor(stop * step) / step;\n      domain(d);\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous(identity, identity);\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","export default function(domain, interval) {\n  domain = domain.slice();\n\n  var i0 = 0,\n      i1 = domain.length - 1,\n      x0 = domain[i0],\n      x1 = domain[i1],\n      t;\n\n  if (x1 < x0) {\n    t = i0, i0 = i1, i1 = t;\n    t = x0, x0 = x1, x1 = t;\n  }\n\n  domain[i0] = interval.floor(x0);\n  domain[i1] = interval.ceil(x1);\n  return domain;\n}\n","var t0 = new Date,\n    t1 = new Date;\n\nexport default function newInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = new Date(+date)), date;\n  }\n\n  interval.floor = interval;\n\n  interval.ceil = function(date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function(date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function(date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function(start, stop, step) {\n    var range = [], previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = function(test) {\n    return newInterval(function(date) {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, function(date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function(start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function(step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? function(d) { return field(d) % step === 0; }\n              : function(d) { return interval.count(0, d) % step === 0; });\n    };\n  }\n\n  return interval;\n}\n","import interval from \"./interval\";\n\nvar millisecond = interval(function() {\n  // noop\n}, function(date, step) {\n  date.setTime(+date + step);\n}, function(start, end) {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = function(k) {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return interval(function(date) {\n    date.setTime(Math.floor(date / k) * k);\n  }, function(date, step) {\n    date.setTime(+date + step * k);\n  }, function(start, end) {\n    return (end - start) / k;\n  });\n};\n\nexport default millisecond;\nexport var milliseconds = millisecond.range;\n","export var durationSecond = 1e3;\nexport var durationMinute = 6e4;\nexport var durationHour = 36e5;\nexport var durationDay = 864e5;\nexport var durationWeek = 6048e5;\n","import interval from \"./interval\";\nimport {durationSecond} from \"./duration\";\n\nvar second = interval(function(date) {\n  date.setTime(date - date.getMilliseconds());\n}, function(date, step) {\n  date.setTime(+date + step * durationSecond);\n}, function(start, end) {\n  return (end - start) / durationSecond;\n}, function(date) {\n  return date.getUTCSeconds();\n});\n\nexport default second;\nexport var seconds = second.range;\n","import interval from \"./interval\";\nimport {durationMinute, durationSecond} from \"./duration\";\n\nvar minute = interval(function(date) {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getMinutes();\n});\n\nexport default minute;\nexport var minutes = minute.range;\n","import interval from \"./interval\";\nimport {durationHour, durationMinute, durationSecond} from \"./duration\";\n\nvar hour = interval(function(date) {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getHours();\n});\n\nexport default hour;\nexport var hours = hour.range;\n","import interval from \"./interval\";\nimport {durationDay, durationMinute} from \"./duration\";\n\nvar day = interval(function(date) {\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setDate(date.getDate() + step);\n}, function(start, end) {\n  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;\n}, function(date) {\n  return date.getDate() - 1;\n});\n\nexport default day;\nexport var days = day.range;\n","import interval from \"./interval\";\nimport {durationMinute, durationWeek} from \"./duration\";\n\nfunction weekday(i) {\n  return interval(function(date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport var sunday = weekday(0);\nexport var monday = weekday(1);\nexport var tuesday = weekday(2);\nexport var wednesday = weekday(3);\nexport var thursday = weekday(4);\nexport var friday = weekday(5);\nexport var saturday = weekday(6);\n\nexport var sundays = sunday.range;\nexport var mondays = monday.range;\nexport var tuesdays = tuesday.range;\nexport var wednesdays = wednesday.range;\nexport var thursdays = thursday.range;\nexport var fridays = friday.range;\nexport var saturdays = saturday.range;\n","import interval from \"./interval\";\n\nvar month = interval(function(date) {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setMonth(date.getMonth() + step);\n}, function(start, end) {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, function(date) {\n  return date.getMonth();\n});\n\nexport default month;\nexport var months = month.range;\n","import interval from \"./interval\";\n\nvar year = interval(function(date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function(start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function(date) {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\nyear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport default year;\nexport var years = year.range;\n","import interval from \"./interval\";\nimport {durationMinute} from \"./duration\";\n\nvar utcMinute = interval(function(date) {\n  date.setUTCSeconds(0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationMinute);\n}, function(start, end) {\n  return (end - start) / durationMinute;\n}, function(date) {\n  return date.getUTCMinutes();\n});\n\nexport default utcMinute;\nexport var utcMinutes = utcMinute.range;\n","import interval from \"./interval\";\nimport {durationHour} from \"./duration\";\n\nvar utcHour = interval(function(date) {\n  date.setUTCMinutes(0, 0, 0);\n}, function(date, step) {\n  date.setTime(+date + step * durationHour);\n}, function(start, end) {\n  return (end - start) / durationHour;\n}, function(date) {\n  return date.getUTCHours();\n});\n\nexport default utcHour;\nexport var utcHours = utcHour.range;\n","import interval from \"./interval\";\nimport {durationDay} from \"./duration\";\n\nvar utcDay = interval(function(date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function(start, end) {\n  return (end - start) / durationDay;\n}, function(date) {\n  return date.getUTCDate() - 1;\n});\n\nexport default utcDay;\nexport var utcDays = utcDay.range;\n","import interval from \"./interval\";\nimport {durationWeek} from \"./duration\";\n\nfunction utcWeekday(i) {\n  return interval(function(date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function(start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport var utcSunday = utcWeekday(0);\nexport var utcMonday = utcWeekday(1);\nexport var utcTuesday = utcWeekday(2);\nexport var utcWednesday = utcWeekday(3);\nexport var utcThursday = utcWeekday(4);\nexport var utcFriday = utcWeekday(5);\nexport var utcSaturday = utcWeekday(6);\n\nexport var utcSundays = utcSunday.range;\nexport var utcMondays = utcMonday.range;\nexport var utcTuesdays = utcTuesday.range;\nexport var utcWednesdays = utcWednesday.range;\nexport var utcThursdays = utcThursday.range;\nexport var utcFridays = utcFriday.range;\nexport var utcSaturdays = utcSaturday.range;\n","import interval from \"./interval\";\n\nvar utcMonth = interval(function(date) {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, function(start, end) {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, function(date) {\n  return date.getUTCMonth();\n});\n\nexport default utcMonth;\nexport var utcMonths = utcMonth.range;\n","import interval from \"./interval\";\n\nvar utcYear = interval(function(date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function(start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function(date) {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport default utcYear;\nexport var utcYears = utcYear.range;\n","import {\n  timeDay,\n  timeSunday,\n  timeMonday,\n  timeThursday,\n  timeYear,\n  utcDay,\n  utcSunday,\n  utcMonday,\n  utcThursday,\n  utcYear\n} from \"d3-time\";\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newYear(y) {\n  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};\n}\n\nexport default function formatLocale(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  };\n\n  // These recursive directive definitions must be deferred.\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function(date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n          else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, newDate) {\n    return function(string) {\n      var d = newYear(1900),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week, day;\n      if (i != string.length) return null;\n\n      // If a UNIX timestamp is specified, return it.\n      if (\"Q\" in d) return new Date(d.Q);\n\n      // The am-pm flag is 0 for AM, and 1 for PM.\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n      // Convert day-of-week and week-of-year to day-of-year.\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n        if (\"Z\" in d) {\n          week = utcDate(newYear(d.y)), day = week.getUTCDay();\n          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = newDate(newYear(d.y)), day = week.getDay();\n          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);\n          week = timeDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day = \"Z\" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n      }\n\n      // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      }\n\n      // Otherwise, all fields are in local time.\n      return newDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  return {\n    format: function(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    parse: function(specifier) {\n      var p = newParse(specifier += \"\", localDate);\n      p.toString = function() { return specifier; };\n      return p;\n    },\n    utcFormat: function(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    utcParse: function(specifier) {\n      var p = newParse(specifier, utcDate);\n      p.toString = function() { return specifier; };\n      return p;\n    }\n  };\n}\n\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  var map = {}, i = -1, n = names.length;\n  while (++i < n) map[names[i].toLowerCase()] = i;\n  return map;\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + timeDay.count(timeYear(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day = d.getDay();\n  return day === 0 ? 7 : day;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(timeSunday.count(timeYear(d), d), p, 2);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  var day = d.getDay();\n  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(timeMonday.count(timeYear(d), d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n      + pad(z / 60 | 0, \"0\", 2)\n      + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  var day = d.getUTCDay();\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d), d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n","import formatLocale from \"./locale\";\n\nvar locale;\nexport var timeFormat;\nexport var timeParse;\nexport var utcFormat;\nexport var utcParse;\n\ndefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  timeFormat = locale.format;\n  timeParse = locale.parse;\n  utcFormat = locale.utcFormat;\n  utcParse = locale.utcParse;\n  return locale;\n}\n","import {utcFormat} from \"./defaultLocale\";\n\nexport var isoSpecifier = \"%Y-%m-%dT%H:%M:%S.%LZ\";\n\nfunction formatIsoNative(date) {\n  return date.toISOString();\n}\n\nvar formatIso = Date.prototype.toISOString\n    ? formatIsoNative\n    : utcFormat(isoSpecifier);\n\nexport default formatIso;\n","import {isoSpecifier} from \"./isoFormat\";\nimport {utcParse} from \"./defaultLocale\";\n\nfunction parseIsoNative(string) {\n  var date = new Date(string);\n  return isNaN(date) ? null : date;\n}\n\nvar parseIso = +new Date(\"2000-01-01T00:00:00.000Z\")\n    ? parseIsoNative\n    : utcParse(isoSpecifier);\n\nexport default parseIso;\n","import {bisector, tickStep} from \"d3-array\";\nimport {timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond} from \"d3-time\";\nimport {timeFormat} from \"d3-time-format\";\nimport {map} from \"./array\";\nimport continuous, {copy, identity} from \"./continuous\";\nimport {initRange} from \"./init\";\nimport nice from \"./nice\";\n\nvar durationSecond = 1000,\n    durationMinute = durationSecond * 60,\n    durationHour = durationMinute * 60,\n    durationDay = durationHour * 24,\n    durationWeek = durationDay * 7,\n    durationMonth = durationDay * 30,\n    durationYear = durationDay * 365;\n\nfunction date(t) {\n  return new Date(t);\n}\n\nfunction number(t) {\n  return t instanceof Date ? +t : +new Date(+t);\n}\n\nexport function calendar(year, month, week, day, hour, minute, second, millisecond, format) {\n  var scale = continuous(identity, identity),\n      invert = scale.invert,\n      domain = scale.domain;\n\n  var formatMillisecond = format(\".%L\"),\n      formatSecond = format(\":%S\"),\n      formatMinute = format(\"%I:%M\"),\n      formatHour = format(\"%I %p\"),\n      formatDay = format(\"%a %d\"),\n      formatWeek = format(\"%b %d\"),\n      formatMonth = format(\"%B\"),\n      formatYear = format(\"%Y\");\n\n  var tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function tickFormat(date) {\n    return (second(date) < date ? formatMillisecond\n        : minute(date) < date ? formatSecond\n        : hour(date) < date ? formatMinute\n        : day(date) < date ? formatHour\n        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)\n        : year(date) < date ? formatMonth\n        : formatYear)(date);\n  }\n\n  function tickInterval(interval, start, stop, step) {\n    if (interval == null) interval = 10;\n\n    // If a desired tick count is specified, pick a reasonable tick interval\n    // based on the extent of the domain and a rough estimate of tick size.\n    // Otherwise, assume interval is already a time interval and use it.\n    if (typeof interval === \"number\") {\n      var target = Math.abs(stop - start) / interval,\n          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);\n      if (i === tickIntervals.length) {\n        step = tickStep(start / durationYear, stop / durationYear, interval);\n        interval = year;\n      } else if (i) {\n        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n        step = i[1];\n        interval = i[0];\n      } else {\n        step = Math.max(tickStep(start, stop, interval), 1);\n        interval = millisecond;\n      }\n    }\n\n    return step == null ? interval : interval.every(step);\n  }\n\n  scale.invert = function(y) {\n    return new Date(invert(y));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? domain(map.call(_, number)) : domain().map(date);\n  };\n\n  scale.ticks = function(interval, step) {\n    var d = domain(),\n        t0 = d[0],\n        t1 = d[d.length - 1],\n        r = t1 < t0,\n        t;\n    if (r) t = t0, t0 = t1, t1 = t;\n    t = tickInterval(interval, t0, t1, step);\n    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop\n    return r ? t.reverse() : t;\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    return specifier == null ? tickFormat : format(specifier);\n  };\n\n  scale.nice = function(interval, step) {\n    var d = domain();\n    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))\n        ? domain(nice(d, interval))\n        : scale;\n  };\n\n  scale.copy = function() {\n    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));\n  };\n\n  return scale;\n}\n\nexport default function() {\n  return initRange.apply(calendar(timeYear, timeMonth, timeWeek, timeDay, timeHour, timeMinute, timeSecond, timeMillisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);\n}\n","export default function(specifier) {\n  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;\n  while (i < n) colors[i] = \"#\" + specifier.slice(i * 6, ++i * 6);\n  return colors;\n}\n","import colors from \"../colors\";\n\nexport default colors(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\");\n","import colors from \"../colors\";\n\nexport default colors(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\");\n","import colors from \"../colors\";\n\nexport default colors(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\");\n","import colors from \"../colors\";\n\nexport default colors(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\");\n","import colors from \"../colors\";\n\nexport default colors(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\");\n","import colors from \"../colors\";\n\nexport default colors(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\");\n","import colors from \"../colors\";\n\nexport default colors(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\");\n","import colors from \"../colors\";\n\nexport default colors(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\");\n","import {interpolateRgbBasis} from \"d3-interpolate\";\n\nexport default function(scheme) {\n  return interpolateRgbBasis(scheme[scheme.length - 1]);\n}\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"d8b365f5f5f55ab4ac\",\n  \"a6611adfc27d80cdc1018571\",\n  \"a6611adfc27df5f5f580cdc1018571\",\n  \"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\n  \"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\n  \"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\n  \"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n  \"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\n  \"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"af8dc3f7f7f77fbf7b\",\n  \"7b3294c2a5cfa6dba0008837\",\n  \"7b3294c2a5cff7f7f7a6dba0008837\",\n  \"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\n  \"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\n  \"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\n  \"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\n  \"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n  \"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e9a3c9f7f7f7a1d76a\",\n  \"d01c8bf1b6dab8e1864dac26\",\n  \"d01c8bf1b6daf7f7f7b8e1864dac26\",\n  \"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\n  \"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\n  \"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\n  \"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\n  \"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\n  \"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"998ec3f7f7f7f1a340\",\n  \"5e3c99b2abd2fdb863e66101\",\n  \"5e3c99b2abd2f7f7f7fdb863e66101\",\n  \"542788998ec3d8daebfee0b6f1a340b35806\",\n  \"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\n  \"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\n  \"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\n  \"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\n  \"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62f7f7f767a9cf\",\n  \"ca0020f4a58292c5de0571b0\",\n  \"ca0020f4a582f7f7f792c5de0571b0\",\n  \"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\n  \"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\n  \"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\n  \"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\n  \"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\n  \"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ef8a62ffffff999999\",\n  \"ca0020f4a582bababa404040\",\n  \"ca0020f4a582ffffffbababa404040\",\n  \"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n  \"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\n  \"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\n  \"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\n  \"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\n  \"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91bfdb\",\n  \"d7191cfdae61abd9e92c7bb6\",\n  \"d7191cfdae61ffffbfabd9e92c7bb6\",\n  \"d73027fc8d59fee090e0f3f891bfdb4575b4\",\n  \"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\n  \"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n  \"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\n  \"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\n  \"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf91cf60\",\n  \"d7191cfdae61a6d96a1a9641\",\n  \"d7191cfdae61ffffbfa6d96a1a9641\",\n  \"d73027fc8d59fee08bd9ef8b91cf601a9850\",\n  \"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\n  \"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\n  \"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\n  \"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n  \"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fc8d59ffffbf99d594\",\n  \"d7191cfdae61abdda42b83ba\",\n  \"d7191cfdae61ffffbfabdda42b83ba\",\n  \"d53e4ffc8d59fee08be6f59899d5943288bd\",\n  \"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\n  \"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\n  \"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\n  \"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\n  \"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5f999d8c92ca25f\",\n  \"edf8fbb2e2e266c2a4238b45\",\n  \"edf8fbb2e2e266c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a42ca25f006d2c\",\n  \"edf8fbccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\n  \"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0ecf49ebcda8856a7\",\n  \"edf8fbb3cde38c96c688419d\",\n  \"edf8fbb3cde38c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\n  \"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\n  \"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e0f3dba8ddb543a2ca\",\n  \"f0f9e8bae4bc7bccc42b8cbe\",\n  \"f0f9e8bae4bc7bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\n  \"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\n  \"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee8c8fdbb84e34a33\",\n  \"fef0d9fdcc8afc8d59d7301f\",\n  \"fef0d9fdcc8afc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\n  \"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\n  \"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece2f0a6bddb1c9099\",\n  \"f6eff7bdc9e167a9cf02818a\",\n  \"f6eff7bdc9e167a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\n  \"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\n  \"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ece7f2a6bddb2b8cbe\",\n  \"f1eef6bdc9e174a9cf0570b0\",\n  \"f1eef6bdc9e174a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\n  \"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\n  \"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e7e1efc994c7dd1c77\",\n  \"f1eef6d7b5d8df65b0ce1256\",\n  \"f1eef6d7b5d8df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0dd1c77980043\",\n  \"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\n  \"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fde0ddfa9fb5c51b8a\",\n  \"feebe2fbb4b9f768a1ae017e\",\n  \"feebe2fbb4b9f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\n  \"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\n  \"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"edf8b17fcdbb2c7fb8\",\n  \"ffffcca1dab441b6c4225ea8\",\n  \"ffffcca1dab441b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\n  \"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\n  \"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f7fcb9addd8e31a354\",\n  \"ffffccc2e69978c679238443\",\n  \"ffffccc2e69978c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67931a354006837\",\n  \"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\n  \"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fff7bcfec44fd95f0e\",\n  \"ffffd4fed98efe9929cc4c02\",\n  \"ffffd4fed98efe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929d95f0e993404\",\n  \"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\n  \"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"ffeda0feb24cf03b20\",\n  \"ffffb2fecc5cfd8d3ce31a1c\",\n  \"ffffb2fecc5cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\n  \"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n  \"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"deebf79ecae13182bd\",\n  \"eff3ffbdd7e76baed62171b5\",\n  \"eff3ffbdd7e76baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed63182bd08519c\",\n  \"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\n  \"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"e5f5e0a1d99b31a354\",\n  \"edf8e9bae4b374c476238b45\",\n  \"edf8e9bae4b374c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\n  \"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\n  \"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"f0f0f0bdbdbd636363\",\n  \"f7f7f7cccccc969696525252\",\n  \"f7f7f7cccccc969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696636363252525\",\n  \"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\n  \"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"efedf5bcbddc756bb1\",\n  \"f2f0f7cbc9e29e9ac86a51a3\",\n  \"f2f0f7cbc9e29e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\n  \"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\n  \"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee0d2fc9272de2d26\",\n  \"fee5d9fcae91fb6a4acb181d\",\n  \"fee5d9fcae91fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\n  \"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n  \"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\"\n).map(colors);\n\nexport default ramp(scheme);\n","import colors from \"../colors\";\nimport ramp from \"../ramp\";\n\nexport var scheme = new Array(3).concat(\n  \"fee6cefdae6be6550d\",\n  \"feeddefdbe85fd8d3cd94701\",\n  \"feeddefdbe85fd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\n  \"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\n  \"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\"\n).map(colors);\n\nexport default ramp(scheme);\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport default interpolateCubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));\n","import {cubehelix} from \"d3-color\";\nimport {interpolateCubehelixLong} from \"d3-interpolate\";\n\nexport var warm = interpolateCubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nexport var cool = interpolateCubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));\n\nvar c = cubehelix();\n\nexport default function(t) {\n  if (t < 0 || t > 1) t -= Math.floor(t);\n  var ts = Math.abs(t - 0.5);\n  c.h = 360 * t - 100;\n  c.s = 1.5 - 1.5 * ts;\n  c.l = 0.8 - 0.9 * ts;\n  return c + \"\";\n}\n","import {rgb} from \"d3-color\";\n\nvar c = rgb(),\n    pi_1_3 = Math.PI / 3,\n    pi_2_3 = Math.PI * 2 / 3;\n\nexport default function(t) {\n  var x;\n  t = (0.5 - t) * Math.PI;\n  c.r = 255 * (x = Math.sin(t)) * x;\n  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;\n  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;\n  return c + \"\";\n}\n","import colors from \"../colors\";\n\nfunction ramp(range) {\n  var n = range.length;\n  return function(t) {\n    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];\n  };\n}\n\nexport default ramp(colors(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\"));\n\nexport var magma = ramp(colors(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\"));\n\nexport var inferno = ramp(colors(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\"));\n\nexport var plasma = ramp(colors(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\"));\n","export default function(x) {\n  return function constant() {\n    return x;\n  };\n}\n","function Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nexport default function(context) {\n  return new Linear(context);\n}\n","export function x(p) {\n  return p[0];\n}\n\nexport function y(p) {\n  return p[1];\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport curveLinear from \"./curve/linear\";\nimport {x as pointX, y as pointY} from \"./point\";\n\nexport default function() {\n  var x = pointX,\n      y = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) output.lineStart();\n        else output.lineEnd();\n      }\n      if (defined0) output.point(+x(d, i, data), +y(d, i, data));\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x = typeof _ === \"function\" ? _ : constant(+_), line) : x;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y = typeof _ === \"function\" ? _ : constant(+_), line) : y;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n","import {path} from \"d3-path\";\nimport constant from \"./constant\";\nimport curveLinear from \"./curve/linear\";\nimport line from \"./line\";\nimport {x as pointX, y as pointY} from \"./point\";\n\nexport default function() {\n  var x0 = pointX,\n      x1 = null,\n      y0 = constant(0),\n      y1 = pointY,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n","function sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\n// Calculate the slopes of the tangents (Hermite-type interpolation) based on\n// the following paper: Steffen, M. 1990. A Simple Method for Monotonic\n// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.\n// NOV(II), P. 443, 1990.\nfunction slope3(that, x2, y2) {\n  var h0 = that._x1 - that._x0,\n      h1 = x2 - that._x1,\n      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),\n      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),\n      p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n\n// Calculate a one-sided slope.\nfunction slope2(that, t) {\n  var h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n\n// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations\n// \"you can express cubic Hermite interpolation in terms of cubic Bézier curves\n// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1\".\nfunction point(that, t0, t1) {\n  var x0 = that._x0,\n      y0 = that._y0,\n      x1 = that._x1,\n      y1 = that._y1,\n      dx = (x1 - x0) / 3;\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n\nfunction MonotoneX(context) {\n  this._context = context;\n}\n\nMonotoneX.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 =\n    this._y0 = this._y1 =\n    this._t0 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x1, this._y1); break;\n      case 3: point(this, this._t0, slope2(this, this._t0)); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    var t1 = NaN;\n\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; break;\n      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;\n      default: point(this, this._t0, t1 = slope3(this, x, y)); break;\n    }\n\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n\nfunction MonotoneY(context) {\n  this._context = new ReflectContext(context);\n}\n\n(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {\n  MonotoneX.prototype.point.call(this, y, x);\n};\n\nfunction ReflectContext(context) {\n  this._context = context;\n}\n\nReflectContext.prototype = {\n  moveTo: function(x, y) { this._context.moveTo(y, x); },\n  closePath: function() { this._context.closePath(); },\n  lineTo: function(x, y) { this._context.lineTo(y, x); },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }\n};\n\nexport function monotoneX(context) {\n  return new MonotoneX(context);\n}\n\nexport function monotoneY(context) {\n  return new MonotoneY(context);\n}\n","function Natural(context) {\n  this._context = context;\n}\n\nNatural.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = [];\n    this._y = [];\n  },\n  lineEnd: function() {\n    var x = this._x,\n        y = this._y,\n        n = x.length;\n\n    if (n) {\n      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);\n      if (n === 2) {\n        this._context.lineTo(x[1], y[1]);\n      } else {\n        var px = controlPoints(x),\n            py = controlPoints(y);\n        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {\n          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);\n        }\n      }\n    }\n\n    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n    this._x = this._y = null;\n  },\n  point: function(x, y) {\n    this._x.push(+x);\n    this._y.push(+y);\n  }\n};\n\n// See https://www.particleincell.com/2012/bezier-splines/ for derivation.\nfunction controlPoints(x) {\n  var i,\n      n = x.length - 1,\n      m,\n      a = new Array(n),\n      b = new Array(n),\n      r = new Array(n);\n  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];\n  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];\n  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];\n  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];\n  a[n - 1] = r[n - 1] / b[n - 1];\n  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];\n  b[n - 1] = (x[n] + a[n - 1]) / 2;\n  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];\n  return [a, b];\n}\n\nexport default function(context) {\n  return new Natural(context);\n}\n","function Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: {\n        if (this._t <= 0) {\n          this._context.lineTo(this._x, y);\n          this._context.lineTo(x, y);\n        } else {\n          var x1 = this._x * (1 - this._t) + x * this._t;\n          this._context.lineTo(x1, this._y);\n          this._context.lineTo(x1, y);\n        }\n        break;\n      }\n    }\n    this._x = x, this._y = y;\n  }\n};\n\nexport default function(context) {\n  return new Step(context, 0.5);\n}\n\nexport function stepBefore(context) {\n  return new Step(context, 0);\n}\n\nexport function stepAfter(context) {\n  return new Step(context, 1);\n}\n","\"use strict\";\n\nfunction toggleFoldable(event) {\n  const foldable = event.currentTarget.parentNode;\n  if (foldable.classList.contains(\"foldable__unfolded\")) {\n    foldable.classList.remove(\"foldable__unfolded\");\n    foldable.querySelector(\".foldable--body\").style.overflow = \"hidden\";\n  } else {\n    foldable.classList.add(\"foldable__unfolded\");\n    setTimeout(function() {\n      foldable.querySelector(\".foldable--body\").style.overflow = \"auto\";\n    }, 300);\n  }\n}\n\nfunction handleDragStart(event) {\n  const elem = event.currentTarget;\n  elem.classList.add(\"draggable--dragging\");\n\n  event.dataTransfer.effectAllowed = \"move\";\n  event.dataTransfer.setData(\n    \"title\",\n    elem.getAttribute(\"data-draggable-name\"),\n  );\n  window.currentDraggedName = elem.getAttribute(\"data-draggable-name\");\n}\n\nfunction handleDragEnd(event) {\n  const elem = event.currentTarget;\n  elem.classList.remove(\"draggable--dragging\");\n  Array.from(elem.parentNode.getElementsByClassName(\"draggable\")).map(x =>\n    x.classList.remove(\"draggable--over\"),\n  );\n}\n\nfunction handleDragEnter(event) {\n  const elem = event.currentTarget;\n  const container = elem.parentNode;\n  const title =\n    event.dataTransfer.getData(\"title\") || window.currentDraggedName;\n  const oldElem = Array.from(container.childNodes).filter(\n    x => x.getAttribute(\"data-draggable-name\") == title,\n  )[0];\n  const oldIdx = Array.from(container.childNodes).indexOf(oldElem);\n  const idx = Array.from(container.childNodes).indexOf(elem);\n  if (idx > oldIdx) {\n    container.insertBefore(oldElem, elem.nextSibling);\n  } else if (idx < oldIdx) {\n    container.insertBefore(oldElem, elem);\n  }\n}\n\nfunction handleDragLeave(event) {\n  const elem = event.currentTarget;\n  elem.classList.remove(\"draggable--over\");\n}\n\nfunction handleDragOver(event) {\n  if (event.preventDefault) {\n    event.preventDefault();\n  }\n  event.dataTransfer.dropEffect = \"move\";\n  return false;\n}\n\nfunction handleDrop(event) {\n  if (event.preventDefault) {\n    event.preventDefault();\n  }\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n  return false;\n}\n\nfunction addEventListeners() {\n  Array.from(document.getElementsByClassName(\"foldable--title\")).map(x =>\n    x.addEventListener(\"click\", e => toggleFoldable(e)),\n  );\n  Array.from(document.getElementsByClassName(\"draggable\")).map(x =>\n    x.addEventListener(\"dragstart\", e => handleDragStart(e), false),\n  );\n  Array.from(document.getElementsByClassName(\"draggable\")).map(x =>\n    x.addEventListener(\"dragend\", e => handleDragEnd(e), false),\n  );\n  Array.from(document.getElementsByClassName(\"draggable\")).map(x =>\n    x.addEventListener(\"dragenter\", e => handleDragEnter(e), false),\n  );\n  Array.from(document.getElementsByClassName(\"draggable\")).map(x =>\n    x.addEventListener(\"dragleave\", e => handleDragLeave(e), false),\n  );\n  Array.from(document.getElementsByClassName(\"draggable\")).map(x =>\n    x.addEventListener(\"dragover\", e => handleDragOver(e), false),\n  );\n  Array.from(document.getElementsByClassName(\"draggable\")).map(x =>\n    x.addEventListener(\"drop\", e => handleDrop(e), false),\n  );\n}\n\nexport { addEventListeners };\n","// MDC\nimport mdcAutoInit from \"@material/auto-init/index\";\nimport * as checkbox from \"@material/checkbox/index\";\nimport * as chips from \"@material/chips/index\";\nimport * as dialog from \"@material/dialog/index\";\nimport * as drawer from \"@material/drawer/index\";\nimport * as helperText from \"@material/textfield/helper-text/index\";\nimport * as iconToggle from \"@material/icon-toggle/index\";\nimport * as radio from \"@material/radio/index\";\nimport * as ripple from \"@material/ripple/index\";\nimport * as selectbox from \"@material/select/index\";\nimport * as textField from \"@material/textfield/index\";\nimport * as toolbar from \"@material/toolbar/index\";\n\nmdcAutoInit.register(\"MDCCheckbox\", checkbox.MDCCheckbox);\nmdcAutoInit.register(\"MDCChip\", chips.MDCChip);\nmdcAutoInit.register(\"MDCChipSet\", chips.MDCChipSet);\nmdcAutoInit.register(\"MDCDialog\", dialog.MDCDialog);\nmdcAutoInit.register(\"MDCDrawer\", drawer.MDCDrawer);\nmdcAutoInit.register(\"MDCIconToggle\", iconToggle.MDCIconToggle);\nmdcAutoInit.register(\"MDCRadio\", radio.MDCRadio);\nmdcAutoInit.register(\"MDCRipple\", ripple.MDCRipple);\nmdcAutoInit.register(\"MDCSelect\", selectbox.MDCSelect);\nmdcAutoInit.register(\"MDCTextField\", textField.MDCTextField);\nmdcAutoInit.register(\n  \"MDCTextFieldHelperText\",\n  helperText.MDCTextFieldHelperText,\n);\nmdcAutoInit.register(\"MDCToolbar\", toolbar.MDCToolbar);\n\nexport {\n  mdcAutoInit,\n  checkbox,\n  chips,\n  dialog,\n  drawer,\n  iconToggle,\n  radio,\n  ripple,\n  selectbox,\n  textField,\n  toolbar,\n};\n\n// D3\nimport * as d3 from \"d3\";\n\nexport {\n  active,\n  area,\n  axisBottom,\n  axisLeft,\n  curveNatural,\n  entries,\n  format,\n  interrupt,\n  keys,\n  line,\n  now,\n  path,\n  range,\n  rgb,\n  scaleBand,\n  scaleLinear,\n  scaleOrdinal,\n  select,\n  selectAll,\n  transition,\n  values,\n} from \"d3\";\n\n// Custom functions (works with custom_elements.scss)\nimport { addEventListeners } from \"./custom_elements.js\";\n\naddEventListeners();\n\n// Ajax\n/** Define csrf safe HTTP methods\n *   https://docs.djangoproject.com/en/1.8/ref/csrf/\n * @function\n * @param {String} method\n * @return {Boolean}\n */\nexport function csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\n\n/** Get csrf token using jQuery\n *   https://docs.djangoproject.com/en/1.8/ref/csrf/\n * @function\n * @param {String} name\n * @return {String}\n */\nexport function getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie != \"\") {\n    const cookies = document.cookie.split(\";\");\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = jQuery.trim(cookies[i]);\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) == name + \"=\") {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\n/** Replace element with text input form using Ajax\n * @function\n * @param {String} idToBind\n * @param {String} formToReplace\n * @param {String} url\n */\nexport function bindAjaxTextInputForm(idToBind, formToReplace, url) {\n  const d = document.getElementById(idToBind);\n  if (d) {\n    d.onclick = function() {\n      /** The callback\n       * @function\n       * @this Callback\n       */\n      function callback() {\n        bundle.mdcAutoInit();\n        const input = this.querySelector(\".mdc-text-field__input\");\n        input.focus();\n      }\n      $(\"#\" + formToReplace).load(url, callback);\n    };\n  }\n}\n\n// Custom functions\n/** Corner language switcher\n * @function\n * @param {String} svgSelector\n * @param {String} formID\n * @param {String} lang\n * @param {String} className\n */\nexport function cornerGraphic(svgSelector, formID, lang, className) {\n  const svg = d3.select(svgSelector);\n  const w = +svg.attr(\"width\");\n  const h = +svg.attr(\"height\");\n\n  const g = svg.append(\"g\");\n  g.append(\"path\")\n    .attr(\"class\", className)\n    .attr(\"d\", () => {\n      const path_ = d3.path();\n      path_.moveTo(0, h);\n      path_.lineTo(w, 0);\n      path_.lineTo(w, h);\n      path_.closePath();\n      return path_;\n    });\n\n  g.append(\"text\")\n    .attr(\"x\", w - w / 3)\n    .attr(\"y\", h - h / 3 + h / 6)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"fill\", \"white\")\n    .style(\"font-size\", h / 3 + \"px\")\n    .text(lang);\n\n  g.on(\"click\", () => {\n    document.getElementById(formID).submit();\n  });\n}\n\n/** Mike Bostock's svg line wrap function\n *   https://bl.ocks.org/mbostock/7555321\n *   (only slightly modified)\n * @function\n * @param {String} text\n * @param {Int} width\n * @this Wrap\n */\nexport function wrap(text, width) {\n  text.each(\n    /* @this */ function() {\n      const text = bundle.select(this);\n      const words = text\n        .text()\n        .split(/\\s+/)\n        .reverse();\n      let word;\n      let line = [];\n      let lineNumber = 0;\n      const lineHeight = 16; // px\n      const x = text.attr(\"x\");\n      const dx = text.attr(\"dx\");\n      const y = text.attr(\"y\");\n      const dy = parseFloat(text.attr(\"dy\"));\n      let tspan = text\n        .text(null)\n        .append(\"tspan\")\n        .attr(\"x\", x)\n        .attr(\"y\", y)\n        .attr(\"dx\", dx)\n        .attr(\"dy\", dy + \"px\");\n      while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(\" \"));\n        if (tspan.node().getComputedTextLength() > width) {\n          line.pop();\n          tspan.text(line.join(\" \"));\n          line = [word];\n          tspan = text\n            .append(\"tspan\")\n            .attr(\"x\", x)\n            .attr(\"y\", y)\n            .attr(\"dx\", dx)\n            .attr(\"dy\", ++lineNumber * lineHeight + dy + \"px\")\n            .text(word);\n        }\n      }\n    },\n  );\n}\n\n/** Underline h1 with svg\n *  @function\n */\nfunction underlines() {\n  \"use strict\";\n\n  // Decorate h1 headers\n  const lines = d3.selectAll(\".underline\");\n  lines.selectAll(\"g\").remove();\n  const w = document.querySelector(\"main\").offsetWidth;\n\n  const gradientX = lines\n    .append(\"linearGradient\")\n    .attr(\"id\", \"underlineGradientX\")\n    .attr(\"x1\", 0)\n    .attr(\"x2\", 1)\n    .attr(\"y1\", 0)\n    .attr(\"y2\", 0);\n\n  gradientX\n    .append(\"stop\")\n    .attr(\"offset\", \"0%\")\n    .attr(\"stop-color\", \"#54c0db\");\n\n  gradientX\n    .append(\"stop\")\n    .attr(\"offset\", \"100%\")\n    .attr(\"stop-color\", \"#004266\");\n\n  const gradientY = lines\n    .append(\"linearGradient\")\n    .attr(\"id\", \"underlineGradientY\")\n    .attr(\"x1\", 0)\n    .attr(\"x2\", 0)\n    .attr(\"y1\", 0)\n    .attr(\"y2\", 1);\n\n  gradientY\n    .append(\"stop\")\n    .attr(\"offset\", \"0%\")\n    .attr(\"stop-color\", \"#004266\");\n\n  gradientY\n    .append(\"stop\")\n    .attr(\"offset\", \"100%\")\n    .attr(\"stop-color\", \"#54c0db\");\n\n  const g = lines.append(\"g\");\n  g.append(\"rect\")\n    .attr(\"x\", -10)\n    .attr(\"y\", 0)\n    .attr(\"width\", w + 10)\n    .attr(\"height\", 1)\n    .attr(\"fill\", \"url(#underlineGradientX)\");\n\n  g.append(\"rect\")\n    .attr(\"x\", w)\n    .attr(\"y\", 0)\n    .attr(\"width\", 1)\n    .attr(\"height\", 120)\n    .attr(\"fill\", \"url(#underlineGradientY)\");\n}\n\n/** Question difficulty\n *  @function\n *  @param {Object} matrix\n *  @param {string} id\n */\nexport function difficulty(matrix, id) {\n  matrix = JSON.parse(matrix);\n  const colour = {\n    easy: \"rgb(30, 142, 62)\",\n    hard: \"rgb(237, 69, 40)\",\n    tricky: \"rgb(237, 170, 30)\",\n    peer: \"rgb(25, 118, 188)\",\n  };\n  let max = -0;\n  let label = \"\";\n  for (const entry in bundle.entries(matrix)) {\n    if ({}.hasOwnProperty.call(bundle.entries(matrix), entry)) {\n      const item = bundle.entries(matrix)[entry];\n      if (item.value > max) {\n        max = item.value;\n        label = item.key;\n      }\n    }\n  }\n  if (max > 0) {\n    const rating = document.getElementById(\"rating-\" + id);\n    rating.innerHTML =\n      label.substring(0, 1).toUpperCase() + label.substring(1);\n\n    const stats = document.getElementById(\"stats-\" + id);\n    stats.style.color = colour[label];\n  }\n}\n\n/** Question analytics\n *  @function\n *  @param {Object} matrix\n *  @param {Object} freq\n *  @param {string} id\n */\nexport function plot(matrix, freq, id) {\n  if (!matrix[\"easy\"]) {\n    matrix[\"easy\"] = 0;\n  }\n  if (!matrix[\"hard\"]) {\n    matrix[\"hard\"] = 0;\n  }\n  if (!matrix[\"tricky\"]) {\n    matrix[\"tricky\"] = 0;\n  }\n  if (!matrix[\"peer\"]) {\n    matrix[\"peer\"] = 0;\n  }\n  const colour = {\n    easy: \"rgb(30, 142, 62)\",\n    hard: \"rgb(237, 69, 40)\",\n    tricky: \"rgb(237, 170, 30)\",\n    peer: \"rgb(25, 118, 188)\",\n  };\n  let max = -0;\n  let label = \"\";\n  for (const entry in bundle.entries(matrix)) {\n    if ({}.hasOwnProperty.call(bundle.entries(matrix), entry)) {\n      const item = bundle.entries(matrix)[entry];\n      if (item.value > max) {\n        max = item.value;\n        label = item.key;\n      }\n    }\n  }\n  if (max > 0) {\n    const rating = document.getElementById(\"rating-\" + id);\n    if (rating) {\n      rating.innerHTML =\n        label.substring(0, 1).toUpperCase() + label.substring(1);\n    }\n    const stats = document.getElementById(\"stats-\" + id);\n    if (stats) {\n      stats.style.color = colour[label];\n    }\n  }\n\n  const matrixSvg = bundle.select(\"#matrix-\" + id);\n  matrixSvg.style(\"overflow\", \"visible\");\n  let size = matrixSvg.attr(\"width\");\n  const g = matrixSvg.append(\"g\");\n\n  g.append(\"text\")\n    .attr(\"class\", \"legend\")\n    .attr(\"x\", size / 2)\n    .attr(\"y\", -6)\n    .style(\"font-size\", \"7pt\")\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"opacity\", 0)\n    .text();\n\n  const easy = g\n    .append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", size / 2)\n    .attr(\"height\", size / 2)\n    .attr(\"fill\", colour[\"easy\"])\n    .style(\"opacity\", 0.5 + 0.5 * matrix[\"easy\"]);\n\n  easy.on(\"mousemove\", () => {\n    g.select(\".legend\")\n      .style(\"opacity\", 1)\n      .style(\"fill\", colour[\"easy\"])\n      .text(\"Right > Right\");\n  });\n  easy.on(\"mouseout\", () => {\n    g.select(\".legend\")\n      .transition()\n      .duration(100)\n      .style(\"opacity\", 0);\n  });\n\n  g.append(\"text\")\n    .attr(\"x\", size / 4)\n    .attr(\"y\", size / 4)\n    .attr(\"dy\", 4)\n    .style(\"font-size\", \"8pt\")\n    .style(\"fill\", \"white\")\n    .style(\"text-anchor\", \"middle\")\n    .text(parseInt(100 * matrix[\"easy\"]) + \"%\");\n\n  const hard = g\n    .append(\"rect\")\n    .attr(\"x\", size / 2)\n    .attr(\"y\", size / 2)\n    .attr(\"width\", size / 2)\n    .attr(\"height\", size / 2)\n    .attr(\"fill\", colour[\"hard\"])\n    .style(\"opacity\", 0.5 + 0.5 * matrix[\"hard\"]);\n\n  hard.on(\"mousemove\", () => {\n    g.select(\".legend\")\n      .style(\"opacity\", 1)\n      .style(\"fill\", colour[\"hard\"])\n      .text(\"Wrong > Wrong\");\n  });\n  hard.on(\"mouseout\", () => {\n    g.select(\".legend\")\n      .transition()\n      .duration(100)\n      .style(\"opacity\", 0);\n  });\n\n  g.append(\"text\")\n    .attr(\"x\", (3 * size) / 4)\n    .attr(\"y\", (3 * size) / 4)\n    .attr(\"dy\", 4)\n    .style(\"font-size\", \"8pt\")\n    .style(\"fill\", \"white\")\n    .style(\"text-anchor\", \"middle\")\n    .text(parseInt(100 * matrix[\"hard\"]) + \"%\");\n\n  const peer = g\n    .append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", size / 2)\n    .attr(\"width\", size / 2)\n    .attr(\"height\", size / 2)\n    .attr(\"fill\", colour[\"peer\"])\n    .style(\"opacity\", 0.5 + 0.5 * matrix[\"peer\"]);\n\n  peer.on(\"mousemove\", () => {\n    g.select(\".legend\")\n      .style(\"opacity\", 1)\n      .style(\"fill\", colour[\"peer\"])\n      .text(\"Wrong > Right\");\n  });\n  peer.on(\"mouseout\", () => {\n    g.select(\".legend\")\n      .transition()\n      .duration(100)\n      .style(\"opacity\", 0);\n  });\n\n  g.append(\"text\")\n    .attr(\"x\", size / 4)\n    .attr(\"y\", (3 * size) / 4)\n    .attr(\"dy\", 4)\n    .style(\"font-size\", \"8pt\")\n    .style(\"fill\", \"white\")\n    .style(\"text-anchor\", \"middle\")\n    .text(parseInt(100 * matrix[\"peer\"]) + \"%\");\n\n  const tricky = g\n    .append(\"rect\")\n    .attr(\"x\", size / 2)\n    .attr(\"y\", 0)\n    .attr(\"width\", size / 2)\n    .attr(\"height\", size / 2)\n    .attr(\"fill\", colour[\"tricky\"])\n    .style(\"opacity\", 0.5 + 0.5 * matrix[\"tricky\"]);\n\n  tricky.on(\"mousemove\", () => {\n    g.select(\".legend\")\n      .style(\"opacity\", 1)\n      .style(\"fill\", colour[\"tricky\"])\n      .text(\"Right > Wrong\");\n  });\n  tricky.on(\"mouseout\", () => {\n    g.select(\".legend\")\n      .transition()\n      .duration(100)\n      .style(\"opacity\", 0);\n  });\n\n  g.append(\"text\")\n    .attr(\"x\", (3 * size) / 4)\n    .attr(\"y\", size / 4)\n    .attr(\"dy\", 4)\n    .style(\"font-size\", \"8pt\")\n    .style(\"fill\", \"white\")\n    .style(\"text-anchor\", \"middle\")\n    .text(parseInt(100 * matrix[\"tricky\"]) + \"%\");\n\n  const firstFreqSvg = bundle.select(\"#first-frequency-\" + id);\n  const secondFreqSvg = bundle.select(\"#second-frequency-\" + id);\n  const margin = { left: 30, right: 30 };\n\n  let sum = 0;\n  for (const entry in freq[\"first_choice\"]) {\n    if ({}.hasOwnProperty.call(freq[\"first_choice\"], entry)) {\n      sum += freq[\"first_choice\"][entry];\n    }\n  }\n  for (const entry in freq[\"first_choice\"]) {\n    if ({}.hasOwnProperty.call(freq[\"first_choice\"], entry)) {\n      freq[\"first_choice\"][entry] /= sum;\n      freq[\"second_choice\"][entry] /= sum;\n    }\n  }\n\n  size = secondFreqSvg.attr(\"width\") - margin.left;\n\n  const x = bundle\n    .scaleLinear()\n    .domain([0, 1])\n    .rangeRound([0, size]);\n  const y = bundle\n    .scaleBand()\n    .domain(bundle.keys(freq[\"first_choice\"]).sort())\n    .rangeRound([0, firstFreqSvg.attr(\"height\")]);\n\n  const gg = secondFreqSvg\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",0)\");\n\n  const ggg = firstFreqSvg.append(\"g\");\n\n  gg.append(\"g\")\n    .attr(\"class\", \"axis axis--x\")\n    .style(\"opacity\", 0)\n    .call(bundle.axisBottom(x));\n\n  ggg\n    .append(\"g\")\n    .attr(\"class\", \"axis axis--x\")\n    .style(\"opacity\", 0)\n    .call(bundle.axisBottom(x));\n\n  gg.append(\"g\")\n    .attr(\"class\", \"axis axis--y\")\n    .style(\"opacity\", 0)\n    .call(bundle.axisLeft(y).ticks);\n\n  gg.append(\"g\")\n    .selectAll(\"rect\")\n    .data(bundle.entries(freq[\"second_choice\"]))\n    .enter()\n    .append(\"rect\")\n    .attr(\"id\", \"second_choice-\" + id)\n    .attr(\"finalwidth\", function(d) {\n      return x(d.value);\n    })\n    .attr(\"x\", x(0))\n    .attr(\"y\", function(d) {\n      return y(d.key);\n    })\n    .attr(\"width\", 0)\n    .attr(\n      \"height\",\n      firstFreqSvg.attr(\"height\") /\n        bundle.values(freq[\"second_choice\"]).length,\n    )\n    .attr(\"fill\", \"gray\")\n    .style(\"stroke\", \"white\")\n    .style(\"opacity\", 0.2);\n\n  ggg\n    .append(\"g\")\n    .selectAll(\"rect\")\n    .data(bundle.entries(freq[\"first_choice\"]))\n    .enter()\n    .append(\"rect\")\n    .attr(\"id\", \"first_choice-\" + id)\n    .attr(\"finalwidth\", function(d) {\n      return x(d.value);\n    })\n    .attr(\"finalx\", function(d) {\n      return x(1 - d.value);\n    })\n    .attr(\"x\", x(1))\n    .attr(\"y\", function(d) {\n      return y(d.key);\n    })\n    .attr(\"width\", 0)\n    .attr(\n      \"height\",\n      firstFreqSvg.attr(\"height\") / bundle.values(freq[\"first_choice\"]).length,\n    )\n    .attr(\"fill\", \"gray\")\n    .style(\"stroke\", \"white\")\n    .style(\"opacity\", 0.2);\n\n  gg.append(\"g\")\n    .selectAll(\"text\")\n    .data(bundle.entries(freq[\"second_choice\"]))\n    .enter()\n    .append(\"text\")\n    .attr(\"x\", x(0))\n    .attr(\"dx\", -2)\n    .attr(\"y\", function(d) {\n      return y(d.key);\n    })\n    .attr(\"dy\", y.bandwidth() / 2 + 4)\n    .style(\"font-size\", \"8pt\")\n    .style(\"text-anchor\", \"end\")\n    .text(function(d) {\n      return parseInt(100 * d.value) + \"%\";\n    });\n\n  ggg\n    .append(\"g\")\n    .selectAll(\"text\")\n    .data(bundle.entries(freq[\"first_choice\"]))\n    .enter()\n    .append(\"text\")\n    .attr(\"x\", x(1))\n    .attr(\"dx\", 2)\n    .attr(\"y\", function(d) {\n      return y(d.key);\n    })\n    .attr(\"dy\", y.bandwidth() / 2 + 4)\n    .style(\"font-size\", \"8pt\")\n    .style(\"text-anchor\", \"start\")\n    .text(function(d) {\n      return parseInt(100 * d.value) + \"%\";\n    });\n\n  gg.append(\"g\")\n    .selectAll(\"text\")\n    .data(bundle.entries(freq[\"second_choice\"]))\n    .enter()\n    .append(\"text\")\n    .attr(\"x\", x(0))\n    .attr(\"dx\", 2)\n    .attr(\"y\", function(d) {\n      return y(d.key);\n    })\n    .attr(\"dy\", y.bandwidth() / 2 + 4)\n    .style(\"font-size\", \"8pt\")\n    .text(function(d) {\n      return d.key;\n    });\n\n  return;\n}\n\n/** Search function\n *  @param {String} className\n *  @param {Object} searchBar\n *  @function\n */\nexport function search(className, searchBar) {\n  const items = document.querySelectorAll(className);\n  for (let i = 0; i < items.length; i++) {\n    if (\n      items[i].innerText.toLowerCase().indexOf(searchBar.value.toLowerCase()) <\n      0\n    ) {\n      items[i].style.display = \"none\";\n    } else {\n      items[i].style.display = \"block\";\n    }\n  }\n  return;\n}\n\n/** Add dialog box to ids containing string dialog using #activate-id\n *  @function\n */\nexport function addDialog() {\n  [].forEach.call(document.querySelectorAll(\"[id^=dialog]\"), el => {\n    const dialog = bundle.dialog.MDCDialog.attachTo(el);\n    document.querySelector(\"#activate-\" + el.id).onclick = () => {\n      dialog.show();\n    };\n  });\n}\n\n/** Handle question delete/undelete for teacher account view\n *  @function\n *  @param {String} url\n */\nexport function handleQuestionDelete(url) {\n  // Toggle questions\n  $(\".toggle-deleted-questions\").click(() => {\n    $(\".deleted\").slideToggle();\n    $(\"#hide-deleted-questions\").toggle();\n    $(\"#show-deleted-questions\").toggle();\n    deletedQuestionsHidden = !deletedQuestionsHidden;\n  });\n\n  // Delete/undelete\n  $(\"[class*=delete-question]\").click(event => {\n    const el = event.target;\n    const pk = $(el).attr(\"question\");\n    const posting = $.post(url, { pk: pk });\n    posting.done(data => {\n      if (data[\"action\"] == \"restore\") {\n        $(\".list-item-question-\" + pk).removeClass(\"deleted\");\n      } else {\n        $(\".list-item-question-\" + pk).addClass(\"deleted\");\n      }\n      $(\".undelete-question-\" + pk).toggle();\n      $(\".delete-question-\" + pk).toggle();\n      if (deletedQuestionsHidden == true) {\n        $(\".list-item-question-\" + pk).slideToggle(\"deleted\");\n      }\n    });\n  });\n}\n\n/** Toggle image visibility\n *  @function\n */\nexport function toggleImages() {\n  [].forEach.call(document.querySelectorAll(\".toggle-images\"), el => {\n    const toggle = bundle.iconToggle.MDCIconToggle.attachTo(el);\n    if (sessionStorage.images !== undefined) {\n      if (sessionStorage.images == \"block\") {\n        toggle.on = true;\n      } else {\n        toggle.on = false;\n      }\n      [].forEach.call(document.querySelectorAll(\".question-image\"), el => {\n        if (sessionStorage.images == \"block\") {\n          el.style.display = \"block\";\n        } else {\n          el.style.display = \"none\";\n        }\n      });\n    }\n    el.addEventListener(\"MDCIconToggle:change\", ({ detail }) => {\n      [].forEach.call(document.querySelectorAll(\".question-image\"), el => {\n        if (detail.isOn) {\n          el.style.display = \"block\";\n        } else {\n          el.style.display = \"none\";\n        }\n        sessionStorage.images = el.style.display;\n      });\n    });\n  });\n}\n\n/** Toggle answer visibility\n *  @function\n */\nexport function toggleAnswers() {\n  [].forEach.call(document.querySelectorAll(\".toggle-answers\"), el => {\n    const toggle = bundle.iconToggle.MDCIconToggle.attachTo(el);\n    if (sessionStorage.answers) {\n      if (sessionStorage.answers == \"block\") {\n        toggle.on = true;\n      } else {\n        toggle.on = false;\n      }\n      [].forEach.call(document.querySelectorAll(\".question-answers\"), el => {\n        el.style.display = sessionStorage.answers;\n      });\n    }\n    el.addEventListener(\"MDCIconToggle:change\", ({ detail }) => {\n      [].forEach.call(document.querySelectorAll(\".question-answers\"), el => {\n        if (detail.isOn) {\n          el.style.display = \"block\";\n        } else {\n          el.style.display = \"none\";\n        }\n        sessionStorage.answers = el.style.display;\n      });\n    });\n  });\n}\n\n/** Bind mdc-checkbox\n *  @function\n */\nexport function bindCheckbox() {\n  [].forEach.call(document.querySelectorAll(\".mdc-checkbox\"), el => {\n    bundle.checkbox.MDCCheckbox.attachTo(el);\n  });\n}\n\n/** Plot student activity\n *  @function\n *  @param {String} el\n *  @param {String} d\n */\nexport function plotTimeSeries(el, d) {\n  const svg = d3.select(el);\n\n  const width = 0.8 * $(\"main\").innerWidth();\n  svg.attr(\"width\", width);\n  const height = +svg.attr(\"height\");\n\n  svg.selectAll(\"g\").remove();\n\n  const x = d3\n    .scaleTime()\n    .domain([\n      new Date(d3.timeParse(d.distribution_date)),\n      new Date(d3.timeParse(d.due_date)),\n    ])\n    .range([0, width]);\n  const y = d3\n    .scaleLinear()\n    .domain([0, d.total])\n    .range([height, 0]);\n\n  const xAxis = d3.axisBottom(x);\n  const xAxisTop = d3.axisTop(x).ticks(\"\");\n\n  const g = svg.append(\"g\");\n\n  g.append(\"rect\")\n    .attr(\"fill\", \"white\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  g.append(\"g\")\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\n    .call(xAxis);\n  g.append(\"g\").call(xAxisTop);\n\n  const format = d3.timeFormat(\"%c\");\n\n  const f = d3\n    .line()\n    .x(function(d) {\n      return x(new Date(d3.timeParse(d)));\n    })\n    .y(function(d, i) {\n      return y(i + 1);\n    })\n    .curve(d3.curveStepAfter);\n\n  g.append(\"g\")\n    .selectAll(\"path\")\n    .data([d.answers])\n    .enter()\n    .append(\"path\")\n    .attr(\"stroke\", \"#004266\")\n    .attr(\"stroke-width\", \"2px\")\n    .attr(\"stroke-linecap\", \"round\")\n    .attr(\"fill\", \"none\")\n    .attr(\"d\", f);\n\n  if (d.due_date > d.last_login) {\n    const endDate = Math.min(\n      new Date(d3.timeParse(d.now)),\n      new Date(d3.timeParse(d.due_date)),\n    );\n    g.append(\"rect\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"stroke-width\", \"1px\")\n      .attr(\"fill\", \"gray\")\n      .style(\"opacity\", 0.2)\n      .attr(\"x\", function() {\n        return x(new Date(d3.timeParse(d.last_login)));\n      })\n      .attr(\"y\", function() {\n        return 0;\n      })\n      .attr(\"width\", function() {\n        return x(endDate) - x(new Date(d3.timeParse(d.last_login)));\n      })\n      .attr(\"height\", height);\n  }\n\n  g.append(\"path\")\n    .attr(\"class\", \"slider\")\n    .attr(\"stroke\", \"gray\")\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"d\", function() {\n      const path = d3.path();\n      path.moveTo(0, height + 30);\n      path.lineTo(0, -6);\n      return path;\n    });\n\n  g.append(\"text\")\n    .attr(\"x\", width)\n    .attr(\"dx\", -5)\n    .attr(\"y\", -25)\n    .attr(\"text-anchor\", \"end\")\n    .style(\"font-size\", \"10px\")\n    .style(\"font-family\", \"sans-serif\")\n    .text(format(new Date(d3.timeParse(d.due_date))));\n\n  g.append(\"text\")\n    .attr(\"x\", 0)\n    .attr(\"dx\", 5)\n    .attr(\"y\", -25)\n    .attr(\"text-anchor\", \"start\")\n    .style(\"font-size\", \"10px\")\n    .style(\"font-family\", \"sans-serif\")\n    .text(format(new Date(d3.timeParse(d.distribution_date))));\n\n  g.append(\"path\")\n    .attr(\"class\", \"limit\")\n    .attr(\"stroke\", \"gray\")\n    .attr(\"stroke-dasharray\", 4)\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"d\", function() {\n      const path = d3.path();\n      path.moveTo(0, height);\n      path.lineTo(0, -30);\n      return path;\n    });\n\n  g.append(\"path\")\n    .attr(\"class\", \"limit\")\n    .attr(\"stroke\", \"gray\")\n    .attr(\"stroke-dasharray\", 4)\n    .attr(\"stroke-width\", \"0.5px\")\n    .attr(\"d\", function() {\n      const path = d3.path();\n      path.moveTo(width, height);\n      path.lineTo(width, -30);\n      return path;\n    });\n\n  g.append(\"text\")\n    .attr(\"class\", \"slider-label-bottom\")\n    .attr(\"x\", 0)\n    .attr(\"dx\", 5)\n    .attr(\"y\", height + 25)\n    .attr(\"dy\", 5)\n    .attr(\"text-anchor\", \"start\")\n    .style(\"font-size\", \"10px\")\n    .style(\"font-family\", \"sans-serif\")\n    .text();\n\n  g.append(\"text\")\n    .attr(\"class\", \"slider-label-top\")\n    .attr(\"x\", 0)\n    .attr(\"y\", -6)\n    .attr(\"dy\", -5)\n    .attr(\"text-anchor\", \"middle\")\n    .style(\"font-size\", \"10px\")\n    .style(\"font-family\", \"sans-serif\")\n    .text();\n\n  const area = d3\n    .area()\n    .x0(f.x())\n    .y0(height)\n    .x1(f.x())\n    .y1(f.y())\n    .curve(d3.curveStepAfter);\n\n  svg.on(\n    \"mousemove\",\n    /* @this */ function() {\n      const xValue = Math.min(\n        d3.mouse(this)[0],\n        1 + x(d3.max(d.answers.map(x => new Date(d3.timeParse(x))))),\n      );\n\n      g.select(\".slider\").attr(\"d\", function() {\n        const path = d3.path();\n        path.moveTo(xValue, height + 30);\n        path.lineTo(xValue, -6);\n        return path;\n      });\n\n      g.select(\".slider-label-bottom\")\n        .attr(\"text-anchor\", function() {\n          if (xValue < width / 2) {\n            return \"start\";\n          } else {\n            return \"end\";\n          }\n        })\n        .attr(\"dx\", function() {\n          if (xValue < width / 2) {\n            return 5;\n          } else {\n            return -5;\n          }\n        })\n        .attr(\"x\", xValue)\n        .text(format(x.invert(xValue)));\n\n      g.select(\".slider-label-top\")\n        .attr(\"x\", xValue)\n        .text(\n          parseInt(\n            (100 *\n              d3.bisectLeft(\n                d.answers.map(x => new Date(d3.timeParse(x))),\n                x.invert(xValue),\n              )) /\n              d.total,\n          ) + \"%\",\n        );\n\n      let data = d.answers.map(x => new Date(d3.timeParse(x)));\n      const index = d3.bisectLeft(data, x.invert(xValue));\n\n      data = data.slice(0, index);\n\n      if (data.length < d.answers.length) {\n        data.push(x.invert(xValue));\n      }\n\n      g.select(\".area\").remove();\n      g.append(\"path\")\n        .datum(data)\n        .attr(\"class\", \"area\")\n        .attr(\"d\", area);\n    },\n  );\n}\n\n// Commands\nunderlines();\n\n// Listeners\nwindow.addEventListener(\"resize\", underlines);\n\n// MDC\nmdcAutoInit();\n"],"names":["strings","util.getMatchesProperty","util.supportsCssVariables","util.applyPassive","cssClasses","numbers","xtend","tabbable","createFocusTrap","matches","util.createFocusTrapInstance","util.isScrollable","util.areTopsMisaligned","createFocusTrapInstance","util.getTransformPropertyName","menuSurfaceConstants.Corner","menuSurfaceConstants.strings","menuConstants.strings","VALIDATION_ATTR_WHITELIST","bisectRight","slice","number","identity","empty","constant","selection","ascending","parseTypenames","extend","color","rgb","colorRgb","basis","value","string","array","cubehelix","hue","colorCubehelix","create","get","set","timeout","schedule","attrRemove","attrRemoveNS","attrConstant","interpolate","attrConstantNS","attrFunction","attrFunctionNS","interpolateTransform","transition","Selection","style","styleRemove","styleConstant","styleFunction","textConstant","textFunction","easeCubicInOut","root","pi","tau","epsilon","path","map","dsv","defaultX","defaultY","tree_addAll","tree_removeAll","exponent","locale","format","add","halfPi","cos","sin","sum","areaSum","areaRingSum","lengthSum","range","bisect","transformer","linear","t0","t1","interval","durationSecond","durationMinute","durationHour","durationDay","durationWeek","formatLocale","formatYear","day","timeMonday","timeDay","pad","timeYear","timeSunday","timeThursday","defaultLocale","date","year","month","hour","minute","second","millisecond","timeMonth","timeWeek","timeHour","timeMinute","timeSecond","timeMillisecond","interpolateRgbBasis","scheme","interpolateCubehelixLong","c","ramp","x","y","pointX","pointY","sign","point","toggleFoldable","event","foldable","currentTarget","parentNode","classList","contains","remove","querySelector","overflow","setTimeout","handleDragStart","elem","dataTransfer","effectAllowed","setData","getAttribute","window","currentDraggedName","handleDragEnd","Array","from","getElementsByClassName","handleDragEnter","container","title","getData","oldElem","childNodes","filter","oldIdx","indexOf","idx","insertBefore","nextSibling","handleDragLeave","handleDragOver","preventDefault","dropEffect","handleDrop","stopPropagation","addEventListeners","document","addEventListener","e","mdcAutoInit","register","checkbox","chips","dialog","drawer","iconToggle","radio","ripple","selectbox","textField","helperText","toolbar","csrfSafeMethod","method","test","getCookie","name","cookieValue","cookie","cookies","split","i","length","jQuery","trim","substring","decodeURIComponent","bindAjaxTextInputForm","idToBind","formToReplace","url","d","getElementById","onclick","callback","bundle","input","focus","$","load","cornerGraphic","svgSelector","formID","lang","className","svg","d3","w","attr","h","g","append","path_","moveTo","lineTo","closePath","text","on","submit","wrap","width","each","select","words","reverse","word","line","lineNumber","lineHeight","dx","dy","parseFloat","tspan","pop","push","join","node","getComputedTextLength","underlines","lines","selectAll","offsetWidth","gradientX","gradientY","difficulty","matrix","id","JSON","parse","colour","easy","hard","tricky","peer","max","label","entry","entries","hasOwnProperty","call","item","key","rating","innerHTML","toUpperCase","stats","plot","freq","matrixSvg","size","duration","parseInt","firstFreqSvg","secondFreqSvg","margin","left","right","scaleLinear","domain","rangeRound","scaleBand","keys","sort","gg","ggg","axisBottom","axisLeft","ticks","data","enter","values","bandwidth","search","searchBar","items","querySelectorAll","innerText","toLowerCase","display","addDialog","forEach","el","MDCDialog","attachTo","show","handleQuestionDelete","click","slideToggle","toggle","deletedQuestionsHidden","target","pk","posting","post","done","removeClass","addClass","toggleImages","MDCIconToggle","sessionStorage","images","undefined","detail","isOn","toggleAnswers","answers","bindCheckbox","MDCCheckbox","plotTimeSeries","innerWidth","height","Date","distribution_date","due_date","total","xAxis","xAxisTop","f","curve","last_login","endDate","Math","min","now","area","x0","y0","x1","y1","xValue","invert","index","datum"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
(function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume(key === "return" ? "return" : "next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

/*********/

/* model */

/*********/

var model;

function initModel(data) {
  model = {
    canClick: true,
    urls: {
      verify: data.urls.verify
    }
  };
}
/**********/

/* update */

/**********/


function verifyUser(_x, _x2, _x3) {
  return _verifyUser.apply(this, arguments);
}

function _verifyUser() {
  _verifyUser = _asyncToGenerator(function* (elem, username, approve) {
    if (model.canClick) {
      model.canClick = false;
      var req = buildReq({
        username: username,
        approve: approve
      }, "post");
      var resp = yield fetch(model.urls.verify, req);

      if (resp.ok) {
        elem.remove();
        setTimeout(function () {
          model.canClick = true;
        }, 500);

        if (!document.querySelectorAll("#new-user-approval li").length) {
          window.location.reload();
        }
      }
    }
  });
  return _verifyUser.apply(this, arguments);
}

function initListeners() {
  document.querySelectorAll("#new-user-approval li").forEach(function (elem) {
    var username = elem.querySelector(".user__username").textContent;
    elem.querySelector(".user__approve").addEventListener("click", function () {
      return verifyUser(elem, username, true);
    });
    elem.querySelector(".user__refuse").addEventListener("click", function () {
      return verifyUser(elem, username, false);
    });
  });
}
/********/

/* init */

/********/


function init(data) {
  initModel(data);
  initListeners();
}

"use strict";

exports.initNewUserApproval = init;

}((this.admin = this.admin || {})));
//# sourceMappingURL=admin.min.js.map

(function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume(key === "return" ? "return" : "next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

/*********/

/* model */

/*********/

var model;

function initModel(data) {
  model = {
    canClick: true,
    urls: {
      verify: data.urls.verify
    }
  };
}
/**********/

/* update */

/**********/


function verifyUser(_x, _x2, _x3) {
  return _verifyUser.apply(this, arguments);
}

function _verifyUser() {
  _verifyUser = _asyncToGenerator(function* (elem, username, approve) {
    if (model.canClick) {
      model.canClick = false;
      var req = buildReq({
        username: username,
        approve: approve
      }, "post");
      var resp = yield fetch(model.urls.verify, req);

      if (resp.ok) {
        elem.remove();
        setTimeout(function () {
          model.canClick = true;
        }, 500);

        if (!document.querySelectorAll("#new-user-approval li").length) {
          window.location.reload();
        }
      }
    }
  });
  return _verifyUser.apply(this, arguments);
}

function initListeners() {
  document.querySelectorAll("#new-user-approval li").forEach(function (elem) {
    var username = elem.querySelector(".user__username").textContent;
    elem.querySelector(".user__approve").addEventListener("click", function () {
      return verifyUser(elem, username, true);
    });
    elem.querySelector(".user__refuse").addEventListener("click", function () {
      return verifyUser(elem, username, false);
    });
  });
}
/********/

/* init */

/********/


function init(data) {
  initModel(data);
  initListeners();
}

"use strict";



function createSvg(name) {
  var useSprite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
  use.setAttributeNS("http://www.w3.org/1999/xlink", "href", svgLink(name, useSprite));
  svg.append(use);
  return svg;
}
function svgLink(name) {
  var useSprite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (useSprite) {
    return "#".concat(name);
  } else {
    return window.location.protocol + "//" + window.location.host + "/static/peerinst/icons.svg#" + name;
  }
}

function createElement(tag) {
  var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var elem = document.createElement(tag);

  if (text) {
    elem.textContent = text;
  }

  Object.entries(attributes).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        val = _ref2[1];

    elem.setAttribute(key, val);
  });
  return elem;
}

/*********/

/* model */

/*********/

var model$1;

function initModel$1(data) {
  model$1 = {
    data: {
      rationales: [],
      criteria: data.criteria
    },
    urls: {
      getRationales: data.urls.getRationales
    },
    config: {
      nPerFetch: 50
    }
  };
}
/**********/

/* update */

/**********/


function getRationales() {
  return _getRationales.apply(this, arguments);
}
/********/

/* view */

/********/


function _getRationales() {
  _getRationales = _asyncToGenerator(function* () {
    var done = false;
    var idx = 0;

    while (!done) {
      var req = buildReq({
        idx: idx,
        n: model$1.config.nPerFetch
      }, "post");
      var resp = yield fetch(model$1.urls.getRationales, req);
      var data = yield resp.json();
      model$1.data.rationales = [].concat(_toConsumableArray(model$1.data.rationales), [data.rationales]);
      idx = idx + data.rationales.length;
      done = data.done;
      addRationalesView(data.rationales);
    }
  });
  return _getRationales.apply(this, arguments);
}

function addRationalesView(rationales) {
  var startingPair = (model$1.data.rationales.length - rationales.length) % 2 == 0;
  rationales.forEach(function (rationale, i) {
    var isPair = i % 2 == 0 && startingPair || i % 2 == 1 && !startingPair;
    var table = document.querySelector("#flagged-rationales__table");
    table.append(createElement("span", rationale.rationale, {
      class: "item rationale ".concat(isPair ? "item--pair" : "")
    }));
    table.append(createElement("span", rationale.quality_type, {
      class: "item ".concat(isPair ? "item--pair" : "")
    }));
    model$1.data.criteria.forEach(function (criterion) {
      var span = createElement("span", "", {
        class: "item ".concat(isPair ? "item--pair" : "")
      });
      var icon = createSvg("close");

      if (rationale.reasons.some(function (r) {
        return r.full_name == criterion;
      })) {
        icon.classList.add("show");
      }

      span.append(icon);
      table.append(span);
    });
  });
}
/********/

/* init */

/********/


function init$1(_x) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator(function* (data) {
    initModel$1(data);
    yield getRationales();
  });
  return _init.apply(this, arguments);
}

"use strict";

exports.initNewUserApproval = init;
exports.initFlaggedRationales = init$1;

}((this.admin = this.admin || {})));
//# sourceMappingURL=admin.min.js.map

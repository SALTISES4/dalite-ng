{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/_teacher/dashboard/questions.js","peerinst/static/peerinst/js/_teacher/dashboard/studentActivity.js","peerinst/static/peerinst/js/_teacher/dashboard/rationales.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","import { buildReq } from \"../../ajax.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    urls: {\n      daliteMessages: data.urls.daliteMessages,\n      removeDaliteMessage: data.urls.removeDaliteMessage,\n      saltiseImage: data.urls.saltiseImage,\n    },\n    messages: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getMessages();\n}\n\nasync function getMessages() {\n  const req = buildReq({}, \"post\");\n\n  const resp = await fetch(model.urls.daliteMessages, req);\n  const data = await resp.json();\n  model.messages = data.messages.map(message => ({\n    id: message.id,\n    title: message.title,\n    text: message.text,\n    colour: message.colour,\n    removable: message.removable,\n    date: message.date,\n    link: message.link,\n    authors: message.authors.map(author => ({\n      name: author.name,\n      picture: author.picture,\n    })),\n  }));\n}\n\nasync function removeMessage(message, div) {\n  const data = {\n    id: message.id,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.removeDaliteMessage, req);\n  if (resp.ok) {\n    removeMessageView(div);\n  }\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  messagesView();\n}\n\nfunction messagesView() {\n  const messages = document.querySelector(\"#dalite-messages\");\n  if (model.messages.length) {\n    messages.classList.remove(\"hidden\");\n    model.messages.forEach(message => {\n      messages.appendChild(messageView(message));\n    });\n  } else {\n    messages.remove();\n  }\n}\n\nfunction messageView(message) {\n  const container = document.createElement(\"div\");\n  container.classList.add(\"mdc-card\");\n\n  const content = document.createElement(\"div\");\n  if (message.link) {\n    content.addEventListener(\"click\", () => {\n      window.location.assign(message.link);\n    });\n    content.style.setProperty(\"cursor\", \"pointer\");\n    content.title = message.link;\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"mdc-typography--title\", \"bold\");\n  title.textContent = message.title;\n  content.appendChild(title);\n\n  const caption = document.createElement(\"div\");\n  caption.classList.add(\"mdc-typography--caption\");\n  caption.textContent = message.date;\n  content.appendChild(caption);\n\n  const text = document.createElement(\"div\");\n  text.classList.add(\"mdc-typography--body1\");\n  text.innerHTML = message.text;\n  content.appendChild(text);\n\n  container.appendChild(content);\n\n  const actions = document.createElement(\"div\");\n  actions.classList.add(\"mdc-card__actions\");\n\n  const images = document.createElement(\"div\");\n  images.classList.add(\"mdc-card__action-buttons\");\n  if (message.authors.length) {\n    const authorsContainer = document.createElement(\"div\");\n    authorsContainer.classList.add(\"dalite-message__authors\");\n    message.authors.forEach(author => {\n      const img = document.createElement(\"img\");\n      img.classList.add(\"dalite-message__authors_author\");\n      img.title = author.name;\n      img.setAttribute(\n        \"src\",\n        author.picture ? author.picture : model.urls.saltiseImage,\n      );\n      img.setAttribute(\"alt\", `Picture of ${author.name}`);\n      authorsContainer.appendChild(img);\n    });\n    images.appendChild(authorsContainer);\n  }\n  actions.appendChild(images);\n\n  if (message.removable) {\n    const buttons = document.createElement(\"div\");\n    buttons.classList.add(\"mdc-card__action-icons\");\n    const remove = document.createElement(\"i\");\n    remove.classList.add(\n      \"mdc-icon-toggle\",\n      \"material-icons\",\n      \"mdc-theme--primary\",\n    );\n    remove.textContent = \"clear\";\n    remove.addEventListener(\"click\", async () => {\n      await removeMessage(message, container);\n    });\n    buttons.appendChild(remove);\n    actions.appendChild(buttons);\n  }\n\n  container.appendChild(actions);\n  container.style.setProperty(\"background-color\", message.colour);\n\n  return container;\n}\n\nfunction removeMessageView(node) {\n  if (node.parentNode.childElementCount == 3) {\n    node.parentNode.remove();\n  } else {\n    node.remove();\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initModel(data);\n  await update();\n  view();\n}\n","import { init as initMessages } from \"./dashboard/messages.js\";\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initMessages({\n    urls: {\n      daliteMessages: data.urls.dalite_messages,\n      removeDaliteMessage: data.urls.remove_dalite_message,\n      saltiseImage: data.urls.saltise_image,\n    },\n  });\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  const header = document.querySelector(\".notifications\");\n  document.querySelectorAll(\".header--togglable > *\").forEach(header_ => {\n    if (header_ != header && header_.hasAttribute(\"open\")) {\n      if (header_.shadowRoot) {\n        header_.shadowRoot\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      } else {\n        header_\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      }\n    }\n  });\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.setAttribute(\"open\", \"\");\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.removeAttribute(\"open\");\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  const header = document.querySelector(\".messages\");\n  document.querySelectorAll(\".header--togglable > *\").forEach(header_ => {\n    if (header_ != header && header_.hasAttribute(\"open\")) {\n      if (header_.shadowRoot) {\n        header_.shadowRoot\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      } else {\n        header_\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      }\n    }\n  });\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n          date: message.last_reply.date,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  document.querySelector(\".messages__read-all-btn\").classList.add(\"hidden\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    document\n      .querySelector(\".messages__read-all-btn\")\n      .classList.remove(\"hidden\");\n  }\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.setAttribute(\"open\", \"\");\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.removeAttribute(\"open\");\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"div\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = \"New!\";\n    div.appendChild(new_);\n  }\n\n  if (message.lastReply.author) {\n    const lastReply = document.createElement(\"div\");\n    lastReply.classList.add(\"message__last-reply\");\n    div.appendChild(lastReply);\n\n    const content = document.createElement(\"span\");\n    content.classList.add(\"message__last-reply__content\");\n    content.textContent = message.lastReply.content;\n    lastReply.appendChild(content);\n\n    const author = document.createElement(\"div\");\n    author.classList.add(\"message__last-reply__author\");\n    author.innerHTML =\n      message.lastReply.author + \" &middot; \" + message.lastReply.date;\n\n    if (message.nNew) {\n      const markReadBtn = document.createElement(\"span\");\n      markReadBtn.classList.add(\"message__mark-read\");\n      markReadBtn.textContent = \"clear\";\n      markReadBtn.title = \"Mark read\";\n      markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n        markRead(event, message, div),\n      );\n      author.appendChild(markReadBtn);\n    }\n\n    lastReply.appendChild(author);\n  }\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","\"use strict\";\nimport { buildReq } from \"../../ajax.js\";\nimport { clear } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(\n  flagQuestionUrl,\n  getFlagQuestionReasonsUrl,\n  getNewQuestionUrl,\n  toggleFavouriteUrl,\n) {\n  model = {\n    flagQuestionReasons: [],\n    urls: {\n      flagQuestion: flagQuestionUrl,\n      getFlagQuestionReasons: getFlagQuestionReasonsUrl,\n      getNewQuestion: getNewQuestionUrl,\n      toggleFavourite: toggleFavouriteUrl,\n    },\n  };\n}\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getFlagQuestionReasons();\n}\n\nfunction toggleFlagQuestion(question) {\n  const open = question.getAttribute(\"open\");\n  const id = question.getAttribute(\"data-id\");\n  const form = question.querySelector(\".flag-question__form\");\n  const icon = question.querySelector(\".flag-question__btn\");\n\n  if (id === null) {\n    console.log(\n      \"The flag question div needs a `data-id` attribute representing the \" +\n        \"question pk.\",\n    );\n  }\n\n  if (open === null) {\n    question.setAttribute(\"open\", \"\");\n    form.removeAttribute(\"hidden\");\n    icon.textContent = \"flag\";\n  } else {\n    question.removeAttribute(\"open\");\n    form.setAttribute(\"hidden\", \"\");\n    icon.textContent = \"outlined_flag\";\n  }\n}\n\nasync function getFlagQuestionReasons() {\n  const req = buildReq({}, \"get\");\n  const resp = await fetch(model.urls.getFlagQuestionReasons, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  const data = await resp.json();\n  model.flagQuestionReasons = data.reasons;\n  flagQuestionView();\n}\n\nasync function flagQuestion(question) {\n  const id = question.getAttribute(\"data-id\");\n  const select = question.querySelector(\".flag-question__form__select\");\n  const reason = select.options[select.selectedIndex].value;\n\n  const data = {\n    id: id,\n    reason: reason,\n  };\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.flagQuestion, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  toggleFlagQuestion(question);\n  await getNewQuestion(question.parentNode.parentNode.parentNode);\n}\n\nasync function getNewQuestion(question) {\n  const posting = $.get(model.urls.getNewQuestion);\n  posting.done(data => {\n    $(question).toggle(\"fade\", () => {\n      $(question).remove();\n      $(\"#questions\").append(data);\n      $(\"#questions .mdc-card\")\n        .hide()\n        .toggle(\"slide\", transition);\n      initNewCard(model.urls.toggleFavourite, model.urls.getNewQuestion);\n      window.location.href = \"#questions\";\n    });\n  });\n  posting.fail(() => {\n    x.innerHTML = \"error\"; // Add snack bar?\n    window.setTimeout(() => {\n      x.innerHTML = \"autorenew\";\n    }, 5000);\n  });\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  flagQuestionView();\n}\n\nfunction flagQuestionView() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    const select = question.querySelector(\".flag-question__form select\");\n    clear(select);\n    model.flagQuestionReasons.forEach(reason => {\n      const option = document.createElement(\"option\");\n      option.classList.add(\"flag-question__form__option\");\n      option.value = reason;\n      option.textContent = reason;\n      select.appendChild(option);\n    });\n  });\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction addFlagQuestionListeners() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    question\n      .querySelector(\".flag-question__close\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__btn\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"submit\", event => {\n        event.preventDefault();\n        flagQuestion(question);\n      });\n    document.body.addEventListener(\"click\", () => {\n      if (question.hasAttribute(\"open\")) {\n        toggleFlagQuestion(question);\n      }\n    });\n  });\n}\n\n/********/\n/* init */\n/********/\n\nfunction initNewCard(favUrl, refreshUrl) {\n  $(\"#questions .mdc-card\").each((i, el) => {\n    if (el.getAttribute(\"initialized\") !== \"true\") {\n      el.setAttribute(\"initialized\", \"true\");\n\n      $(el)\n        .find(\".mdc-icon-toggle.favourite-btn\")\n        .each((i, heart) => {\n          bundle.iconToggle.MDCIconToggle.attachTo(heart);\n          heart.addEventListener(\"click\", () => {\n            const posting = $.post(favUrl, {\n              pk: heart.getAttribute(\"data-id\"),\n            });\n            posting.done(data => {\n              console.log(data);\n            });\n          });\n        });\n\n      $(el)\n        .find(\".remove-btn\")\n        .each((i, x) => {\n          x.addEventListener(\"click\", () => {\n            const posting = $.get(refreshUrl);\n            posting.done(data => {\n              $(el).toggle(\"fade\", () => {\n                $(el).remove();\n                $(\"#questions\").append(data);\n                $(\"#questions .mdc-card\")\n                  .hide()\n                  .toggle(\"slide\", transition);\n                initNewCard(favUrl, refreshUrl);\n                window.location.href = \"#questions\";\n              });\n            });\n            posting.fail(() => {\n              x.innerHTML = \"error\"; // Add snack bar?\n              window.setTimeout(() => {\n                x.innerHTML = \"autorenew\";\n              }, 5000);\n            });\n          });\n        });\n    }\n  });\n  addFlagQuestionListeners();\n  view();\n}\n\nexport async function init(\n  favUrl,\n  refreshUrl,\n  getFlagQuestionReasonsUrl,\n  flagQuestionUrl,\n) {\n  initModel(flagQuestionUrl, getFlagQuestionReasonsUrl, refreshUrl, favUrl);\n  initNewCard(favUrl, refreshUrl);\n  update();\n}\n","\"use strict\";\n\nexport function init(data) {\n  function draw() {\n    $(\".progress-chart\").each((i, el) => {\n      const dataset =\n        data[el.getAttribute(\"group\")][el.getAttribute(\"assignment\")];\n      bundle.plotTimeSeries(el, dataset);\n    });\n  }\n  draw();\n  window.addEventListener(\"resize\", draw);\n}\n","\"use strict\";\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\nexport function init(url) {\n  // Rating system\n  $(\"#rationales .mdc-card\").each((i, el) => {\n    const id = el.getAttribute(\"data-id\");\n    let score;\n\n    // Score\n    $(el)\n      .find(\".star\")\n      .each((i, star) => {\n        // Handle hover\n        star.addEventListener(\"mouseover\", () => {\n          score = star.getAttribute(\"data-rank\");\n          $(\".star\").each((i, _star) => {\n            if (_star.getAttribute(\"data-rank\") <= score) {\n              _star.innerHTML = \"star\";\n            } else {\n              _star.innerHTML = \"star_border\";\n            }\n          });\n        });\n        star.addEventListener(\"mouseout\", () => {\n          $(\".star\").each((i, _star) => {\n            _star.innerHTML = \"star_border\";\n          });\n        });\n\n        // Submit score\n        star.addEventListener(\"click\", () => {\n          const posting = $.post(url, { id: id, score: score });\n          posting.done(data => {\n            processResponse(data);\n          });\n        });\n      });\n\n    // Flag inappropriate\n    $(el)\n      .find(\".flag\")\n      .each((i, flag) => {\n        flag.addEventListener(\"mouseover\", () => {\n          $(\".flag\").each((i, _flag) => {\n            _flag.innerHTML = \"flag\";\n          });\n        });\n        flag.addEventListener(\"mouseout\", () => {\n          $(\".flag\").each((i, _flag) => {\n            _flag.innerHTML = \"outlined_flag\";\n          });\n        });\n        flag.addEventListener(\"click\", () => {\n          const posting = $.post(url, { id: id, score: 0 });\n          posting.done(data => {\n            processResponse(data);\n          });\n        });\n      });\n\n    function processResponse(data) {\n      $(el).toggle(\"fade\", () => {\n        $(el).remove();\n        $(\"#rationales\").append(data);\n        $(\"#rationales .mdc-card\")\n          .hide()\n          .toggle(\"slide\", transition);\n        init(url);\n        // Refresh reputation score\n        document\n          .getElementsByTagName(\"teacher-reputation-header\")[0]\n          .setAttribute(\"stale\", \"\");\n      });\n    }\n  });\n}\n","\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n\nexport { init as initQuestionCards } from \"./_teacher/dashboard/questions.js\";\nexport {\n  init as initStudentActivityCards,\n} from \"./_teacher/dashboard/studentActivity.js\";\nexport {\n  init as initRationalesToScoreCards,\n} from \"./_teacher/dashboard/rationales.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","model","initModel","urls","daliteMessages","removeDaliteMessage","saltiseImage","messages","update","getMessages","req","resp","fetch","json","map","message","id","title","text","colour","removable","date","link","authors","author","name","picture","removeMessage","div","ok","removeMessageView","view","messagesView","querySelector","length","classList","remove","forEach","appendChild","messageView","container","createElement","add","content","addEventListener","window","location","assign","style","setProperty","textContent","caption","innerHTML","actions","images","authorsContainer","img","setAttribute","buttons","node","parentNode","childElementCount","init","initMessages","dalite_messages","remove_dalite_message","saltise_image","clear","hasChildNodes","removeChild","lastChild","createSvg","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","protocol","host","notificationsOpen","notifications","toggleNotifications","header","querySelectorAll","header_","hasAttribute","shadowRoot","dispatchEvent","Event","notificationsView","updateNotifications","badge","notificationsList","completedNotifications","filter","notification","inProgress","toString","display","notificationView","noNotificationView","some","removeAttribute","onClick","spinner","icon","error","onCloseClick","description","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","console","log","task_id","resolve","removeGradebookError","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","open","toggleMessages","messagesUrl","threads","lastReply","last_reply","nNew","n_new","markAllRead","markReadUrl","markRead","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener","flagQuestionUrl","getFlagQuestionReasonsUrl","getNewQuestionUrl","toggleFavouriteUrl","flagQuestionReasons","flagQuestion","getFlagQuestionReasons","getNewQuestion","toggleFavourite","transition","duration","direction","easing","toggleFlagQuestion","question","form","reasons","flagQuestionView","select","reason","options","selectedIndex","value","posting","$","get","done","toggle","hide","initNewCard","fail","x","option","addFlagQuestionListeners","preventDefault","favUrl","refreshUrl","each","i","el","find","heart","bundle","iconToggle","MDCIconToggle","attachTo","post","pk","draw","dataset","plotTimeSeries","score","star","_star","processResponse","flag","_flag","getElementsByTagName"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
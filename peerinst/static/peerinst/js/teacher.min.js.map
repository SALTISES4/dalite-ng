{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/_teacher/dashboard/questions.js","peerinst/static/peerinst/js/_teacher/dashboard/studentActivity.js","peerinst/static/peerinst/js/_teacher/dashboard/rationales.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","import { buildReq } from \"../../ajax.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    urls: {\n      daliteMessages: data.urls.daliteMessages,\n      removeDaliteMessage: data.urls.removeDaliteMessage,\n      saltiseImage: data.urls.saltiseImage,\n    },\n    messages: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getMessages();\n}\n\nasync function getMessages() {\n  const req = buildReq({}, \"post\");\n\n  const resp = await fetch(model.urls.daliteMessages, req);\n  const data = await resp.json();\n  model.messages = data.messages.map(message => ({\n    id: message.id,\n    title: message.title,\n    text: message.text,\n    colour: message.colour,\n    removable: message.removable,\n    date: message.date,\n    link: message.link,\n    authors: message.authors.map(author => ({\n      name: author.name,\n      picture: author.picture,\n    })),\n  }));\n}\n\nasync function removeMessage(message, div) {\n  const data = {\n    id: message.id,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.removeDaliteMessage, req);\n  if (resp.ok) {\n    removeMessageView(div);\n  }\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  messagesView();\n}\n\nfunction messagesView() {\n  const messages = document.querySelector(\"#dalite-messages\");\n  model.messages.forEach(message => {\n    messages.appendChild(messageView(message));\n  });\n}\n\nfunction messageView(message) {\n  const container = document.createElement(\"div\");\n  container.classList.add(\"mdc-card\");\n\n  const content = document.createElement(\"div\");\n  if (message.link) {\n    content.addEventListener(\"click\", () => {\n      window.location.assign(message.link);\n    });\n    content.style.setProperty(\"cursor\", \"pointer\");\n    content.title = message.link;\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"mdc-typography--title\", \"bold\");\n  title.textContent = message.title;\n  content.appendChild(title);\n\n  const caption = document.createElement(\"div\");\n  caption.classList.add(\"mdc-typography--caption\");\n  caption.textContent = message.date;\n  content.appendChild(caption);\n\n  const text = document.createElement(\"div\");\n  text.classList.add(\"mdc-typography--body1\");\n  text.innerHTML = message.text;\n  content.appendChild(text);\n\n  container.appendChild(content);\n\n  const actions = document.createElement(\"div\");\n  actions.classList.add(\"mdc-card__actions\");\n\n  const images = document.createElement(\"div\");\n  images.classList.add(\"mdc-card__action-buttons\");\n  if (message.authors.length) {\n    const authorsContainer = document.createElement(\"div\");\n    authorsContainer.classList.add(\"dalite-message__authors\");\n    message.authors.forEach(author => {\n      const img = document.createElement(\"img\");\n      img.classList.add(\"dalite-message__authors_author\");\n      img.title = author.name;\n      img.setAttribute(\n        \"src\",\n        author.picture ? author.picture : model.urls.saltiseImage,\n      );\n      img.setAttribute(\"alt\", `Picture of ${author.name}`);\n      authorsContainer.appendChild(img);\n    });\n    images.appendChild(authorsContainer);\n  }\n  actions.appendChild(images);\n\n  if (message.removable) {\n    const buttons = document.createElement(\"div\");\n    buttons.classList.add(\"mdc-card__action-icons\");\n    const remove = document.createElement(\"i\");\n    remove.classList.add(\n      \"mdc-icon-toggle\",\n      \"material-icons\",\n      \"mdc-theme--primary\",\n    );\n    remove.textContent = \"clear\";\n    remove.addEventListener(\"click\", async () => {\n      await removeMessage(message, container);\n    });\n    buttons.appendChild(remove);\n    actions.appendChild(buttons);\n  }\n\n  container.appendChild(actions);\n  container.style.setProperty(\"background-color\", message.colour);\n\n  return container;\n}\n\nfunction removeMessageView(node) {\n  if (node.parentNode.childElementCount == 3) {\n    node.parentNode.remove();\n  } else {\n    node.remove();\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initModel(data);\n  await update();\n  view();\n}\n","import { init as initMessages } from \"./dashboard/messages.js\";\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initMessages({\n    urls: {\n      daliteMessages: data.urls.dalite_messages,\n      removeDaliteMessage: data.urls.remove_dalite_message,\n      saltiseImage: data.urls.saltise_image,\n    },\n  });\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n          date: message.last_reply.date,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  document.querySelector(\".messages__read-all-btn\").classList.add(\"hidden\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    document\n      .querySelector(\".messages__read-all-btn\")\n      .classList.remove(\"hidden\");\n  }\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"div\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = \"New!\";\n    div.appendChild(new_);\n  }\n\n  if (message.lastReply.author) {\n    const lastReply = document.createElement(\"div\");\n    lastReply.classList.add(\"message__last-reply\");\n    div.appendChild(lastReply);\n\n    const content = document.createElement(\"span\");\n    content.classList.add(\"message__last-reply__content\");\n    content.textContent = message.lastReply.content;\n    lastReply.appendChild(content);\n\n    const author = document.createElement(\"div\");\n    author.classList.add(\"message__last-reply__author\");\n    author.innerHTML =\n      message.lastReply.author + \" &middot; \" + message.lastReply.date;\n\n    if (message.nNew) {\n      const markReadBtn = document.createElement(\"span\");\n      markReadBtn.classList.add(\"message__mark-read\");\n      markReadBtn.textContent = \"clear\";\n      markReadBtn.title = \"Mark read\";\n      markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n        markRead(event, message, div),\n      );\n      author.appendChild(markReadBtn);\n    }\n\n    lastReply.appendChild(author);\n  }\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","\"use strict\";\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\nexport function init(favUrl, refreshUrl) {\n  $(\"#questions .mdc-card\").each((i, el) => {\n    if (el.getAttribute(\"initialized\") !== \"true\") {\n      el.setAttribute(\"initialized\", \"true\");\n\n      $(el)\n        .find(\".mdc-icon-toggle.favourite-btn\")\n        .each((i, heart) => {\n          bundle.iconToggle.MDCIconToggle.attachTo(heart);\n          heart.addEventListener(\"click\", () => {\n            const posting = $.post(favUrl, {\n              pk: heart.getAttribute(\"data-id\"),\n            });\n            posting.done(data => {\n              console.log(data);\n            });\n          });\n        });\n\n      $(el)\n        .find(\".remove-btn\")\n        .each((i, x) => {\n          x.addEventListener(\"click\", () => {\n            const posting = $.get(refreshUrl);\n            posting.done(data => {\n              $(el).toggle(\"fade\", () => {\n                $(el).remove();\n                $(\"#questions\").append(data);\n                $(\"#questions .mdc-card\")\n                  .hide()\n                  .toggle(\"slide\", transition);\n                init(favUrl, refreshUrl);\n                window.location.href = \"#questions\";\n              });\n            });\n            posting.fail(() => {\n              x.innerHTML = \"error\"; // Add snack bar?\n              window.setTimeout(() => {\n                x.innerHTML = \"autorenew\";\n              }, 5000);\n            });\n          });\n        });\n    }\n  });\n}\n","\"use strict\";\n\nexport function init(data) {\n  function draw() {\n    $(\".progress-chart\").each((i, el) => {\n      const dataset =\n        data[el.getAttribute(\"group\")][el.getAttribute(\"assignment\")];\n      bundle.plotTimeSeries(el, dataset);\n    });\n  }\n  draw();\n  window.addEventListener(\"resize\", draw);\n}\n","\"use strict\";\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\nexport function init(url) {\n  // Rating system\n  $(\"#rationales .mdc-card\").each((i, el) => {\n    const id = el.getAttribute(\"data-id\");\n    const submitBtn = document.getElementById(\"submit-score-btn\");\n    let score;\n\n    $(\".star\").each((i, star) => {\n      star.addEventListener(\"click\", () => {\n        submitBtn.removeAttribute(\"disabled\");\n        score = star.getAttribute(\"data-rank\");\n        $(\".star\").each((i, _star) => {\n          if (_star.getAttribute(\"data-rank\") <= score) {\n            _star.innerHTML = \"star\";\n          } else {\n            _star.innerHTML = \"star_border\";\n          }\n        });\n      });\n    });\n\n    // Submit score\n    submitBtn.addEventListener(\"click\", () => {\n      const posting = $.post(url, { id: id, score: score });\n      posting.done(data => {\n        processResponse(data);\n      });\n    });\n\n    // Flag inappropriate\n    const flagBtn = document.getElementById(\"submit-flag-btn\");\n    flagBtn.addEventListener(\"click\", () => {\n      const posting = $.post(url, { id: id, score: 0 });\n      posting.done(data => {\n        processResponse(data);\n      });\n    });\n\n    function processResponse(data) {\n      $(el).toggle(\"fade\", () => {\n        $(el).remove();\n        $(\"#rationales\").append(data);\n        $(\"#rationales .mdc-card\")\n          .hide()\n          .toggle(\"slide\", transition);\n        init(url);\n        // Refresh reputation score\n        document\n          .getElementsByTagName(\"teacher-reputation-header\")[0]\n          .setAttribute(\"stale\", \"\");\n      });\n    }\n  });\n}\n","\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n\nexport { init as initQuestionCards } from \"./_teacher/dashboard/questions.js\";\nexport {\n  init as initStudentActivityCards,\n} from \"./_teacher/dashboard/studentActivity.js\";\nexport {\n  init as initRationalesToScoreCards,\n} from \"./_teacher/dashboard/rationales.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","model","initModel","urls","daliteMessages","removeDaliteMessage","saltiseImage","messages","update","getMessages","req","resp","fetch","json","map","message","id","title","text","colour","removable","date","link","authors","author","name","picture","removeMessage","div","ok","removeMessageView","view","messagesView","querySelector","forEach","appendChild","messageView","container","createElement","classList","add","content","addEventListener","window","location","assign","style","setProperty","textContent","caption","innerHTML","actions","images","length","authorsContainer","img","setAttribute","buttons","remove","node","parentNode","childElementCount","init","initMessages","dalite_messages","remove_dalite_message","saltise_image","clear","hasChildNodes","removeChild","lastChild","createSvg","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","protocol","host","notificationsOpen","notifications","toggleNotifications","notificationsView","updateNotifications","badge","notificationsList","completedNotifications","filter","notification","inProgress","toString","display","notificationView","noNotificationView","some","onClick","spinner","icon","error","onCloseClick","description","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","console","log","task_id","resolve","removeGradebookError","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","open","toggleMessages","messagesUrl","threads","lastReply","last_reply","nNew","n_new","markAllRead","markReadUrl","markRead","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener","transition","duration","direction","easing","favUrl","refreshUrl","$","each","i","el","find","heart","bundle","iconToggle","MDCIconToggle","attachTo","posting","post","pk","done","x","get","toggle","hide","fail","draw","dataset","plotTimeSeries","submitBtn","getElementById","score","star","removeAttribute","_star","processResponse","flagBtn","getElementsByTagName"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
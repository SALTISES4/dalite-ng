{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","import { buildReq } from \"../../ajax.js\";\nimport { createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    urls: {\n      daliteMessages: data.urls.daliteMessages,\n      removeDaliteMessage: data.urls.removeDaliteMessage,\n      saltiseImage: data.urls.saltiseImage,\n    },\n    messages: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getMessages();\n}\n\nasync function getMessages() {\n  const req = buildReq({}, \"post\");\n\n  const resp = await fetch(model.urls.daliteMessages, req);\n  const data = await resp.json();\n  model.messages = data.messages.map(message => ({\n    id: message.id,\n    title: message.title,\n    text: message.text,\n    colour: message.colour,\n    removable: message.removable,\n    link: message.link,\n    authors: message.authors.map(author => ({\n      name: author.name,\n      picture: author.picture,\n    })),\n  }));\n  console.log(model);\n}\n\nasync function removeMessage(message, div) {\n  const data = {\n    id: message.id,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.removeDaliteMessage, req);\n  if (resp.ok) {\n    removeMessageView(div);\n  }\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  messagesView();\n}\n\nfunction messagesView() {\n  const ul = document.querySelector(\"#dalite-messages ul\");\n  model.messages.forEach(message => {\n    ul.appendChild(messageView(message));\n  });\n}\n\nfunction messageView(message) {\n  const container = document.createElement(\"li\");\n  container.classList.add(\"mdc-card\", \"dalite-message\");\n  if (message.link) {\n    container.addEventListener(\"click\", () => {\n      window.location.assign(message.link);\n    });\n    container.style.setProperty(\"cursor\", \"pointer\");\n    container.title = message.link;\n  }\n\n  if (message.authors.length) {\n    const authorsContainer = document.createElement(\"div\");\n    authorsContainer.classList.add(\"dalite-message__authors\");\n    message.authors.forEach(author => {\n      const img = document.createElement(\"img\");\n      img.classList.add(\"dalite-message__authors__author\");\n      img.title = author.name;\n      img.setAttribute(\n        \"src\",\n        author.picture ? author.picture : model.urls.saltiseImage,\n      );\n      img.setAttribute(\"alt\", `Picture of ${author.name}`);\n      authorsContainer.appendChild(img);\n    });\n    container.appendChild(authorsContainer);\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"mdc-typography--title\", \"dalite-message__title\");\n  title.textContent = message.title;\n  container.appendChild(title);\n\n  const text = document.createElement(\"div\");\n  text.classList.add(\"mdc-typography--body1\", \"dalite-message__text\");\n  text.textContent = message.text;\n  container.appendChild(text);\n\n  if (message.removable) {\n    const remove = document.createElement(\"div\");\n    remove.classList.add(\"dalite-message__remove-icon\");\n    remove.addEventListener(\"click\", async () => {\n      await removeMessage(message, container);\n    });\n    const icon = createSvg(\"close\");\n    remove.appendChild(icon);\n    container.appendChild(remove);\n  }\n\n  const background = document.createElement(\"div\");\n  background.classList.add(\"dalite-message__background\");\n  background.style.setProperty(\"background\", message.colour);\n  container.appendChild(background);\n\n  return container;\n}\n\nfunction removeMessageView(node) {\n  node.parentNode.removeChild(node);\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initModel(data);\n  await update();\n  view();\n}\n","import { init as initMessages } from \"./dashboard/messages.js\";\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initMessages({\n    urls: {\n      daliteMessages: data.urls.dalite_messages,\n      removeDaliteMessage: data.urls.remove_dalite_message,\n      saltiseImage: data.urls.saltise_image,\n    },\n  });\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  const icon = createSvg(\"chat_bubble\");\n  icon.classList.add(\"message__icon\");\n  div.appendChild(icon);\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"span\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = `( ${message.nNew} new )`;\n    div.appendChild(new_);\n  }\n\n  const title = document.createElement(\"span\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    const markReadBtn = document.createElement(\"span\");\n    markReadBtn.classList.add(\"message__mark-read\");\n    markReadBtn.textContent = \"Mark read\";\n    markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n      markRead(event, message, div),\n    );\n    div.appendChild(markReadBtn);\n  }\n\n  const lastReply = document.createElement(\"div\");\n  lastReply.classList.add(\"message__last-reply\");\n  div.appendChild(lastReply);\n\n  const author = document.createElement(\"span\");\n  author.classList.add(\"message__last-reply__author\");\n  author.textContent = message.lastReply.author;\n  lastReply.appendChild(author);\n\n  const content = document.createElement(\"span\");\n  content.classList.add(\"message__last-reply__content\");\n  content.textContent = message.lastReply.content;\n  lastReply.appendChild(content);\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","// @flow\n\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","clear","node","hasChildNodes","removeChild","lastChild","createSvg","name","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","window","location","protocol","host","model","initModel","urls","daliteMessages","removeDaliteMessage","saltiseImage","messages","update","getMessages","req","resp","fetch","json","map","message","id","title","text","colour","removable","link","authors","author","picture","console","log","removeMessage","div","ok","removeMessageView","view","messagesView","ul","querySelector","forEach","appendChild","messageView","container","createElement","classList","add","addEventListener","assign","style","setProperty","length","authorsContainer","img","setAttribute","textContent","remove","icon","background","parentNode","init","initMessages","dalite_messages","remove_dalite_message","saltise_image","notificationsOpen","notifications","toggleNotifications","notificationsView","updateNotifications","badge","notificationsList","completedNotifications","filter","notification","inProgress","toString","display","notificationView","noNotificationView","some","onClick","spinner","error","onCloseClick","description","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","task_id","resolve","removeGradebookError","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","open","toggleMessages","messagesUrl","threads","lastReply","last_reply","content","nNew","n_new","markAllRead","markReadUrl","markRead","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
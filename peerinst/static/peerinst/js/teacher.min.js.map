{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/_ajax/utils.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/notifications.js","peerinst/static/peerinst/js/_teacher/reports.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["export function getCsrfToken() {\n  const name = \"csrftoken\";\n  if (document.cookie && document.cookie !== \"\") {\n    return document.cookie\n      .split(\";\")\n      .map(c => c.trim())\n      .filter(c => c.substring(0, name.length + 1) === name + \"=\")\n      .map(c => decodeURIComponent(c.substring(name.length + 1)))[0];\n  } else {\n    return null;\n  }\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name,\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","// @flow\n\nimport { clear, createSvg } from \"../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Notification = {\n  text: string,\n  inProgress: boolean,\n  onClick: () => void,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(notifications: Array<Notification>): void {\n  model = {\n    notificationsOpen: false,\n    notifications: notifications,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  if (model.notifications.length) {\n    badge.textContent = model.notifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    const icon = createSvg(\"cloud_download\");\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(notifications: Array<Notification>): void {\n  initModel(notifications);\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../_ajax/utils.js\";\nimport { init as initNotifications } from \"./notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model: {\n  urls: {\n    requestReport: string,\n    reportResult: string,\n    tasks: string,\n  },\n  tasks: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: Date,\n  }>,\n};\n\nfunction initModel(urls: {\n  requestReport: string,\n  reportResult: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestReport: urls.requestReport,\n      reportResult: urls.reportResult,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nfunction initTasks(\n  data: Array<{\n    task_id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): void {\n  model.tasks = data.map(task => ({\n    id: task.task_id,\n    description: task.description,\n    completed: task.completed,\n    datetime: new Date(task.datetime),\n  }));\n  const notifications = model.tasks.map(task => ({\n    text: task.completed\n      ? `Your report for ${task.description} is ready.`\n      : `Computing report for ${task.description}...`,\n    inProgress: !task.completed,\n    onClick: () => downloadReport(task.id),\n  }));\n  initNotifications(notifications);\n}\n\nfunction requestReport(event): void {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const group_id = button.getAttribute(\"data-group\");\n  const assignment_id = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: group_id,\n    assignment_id: assignment_id,\n  };\n\n  const url = model.urls.requestReport;\n  const req = buildReq(data, \"post\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {})\n    .catch(err => {\n      console.log(err);\n    });\n}\n\nfunction downloadReport(taskId: string): void {}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addReportListeners();\n}\n\nfunction addReportListeners(): void {\n  [...document.getElementsByClassName(\"report-button\")].forEach(button => {\n    button.addEventListener(\"click\", (event: MouseEvent) =>\n      requestReport(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestReport: string,\n  reportResult: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\n\"use strict\";\n\nexport { init as initReport } from \"./_teacher/reports.js\";\n"],"names":["getCsrfToken","name","document","cookie","split","map","c","trim","filter","substring","length","decodeURIComponent","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","clear","node","hasChildNodes","removeChild","lastChild","createSvg","svg","createElementNS","use","setAttributeNS","window","location","protocol","host","append","model","initModel","notifications","notificationsOpen","toggleNotifications","notificationsView","view","querySelector","badge","notificationsList","textContent","toString","style","display","notification","appendChild","notificationView","noNotificationView","classList","add","remove","div","createElement","addEventListener","onClick","inProgress","spinner","icon","description","text","initEventListeners","addNotificationsOpenListener","event","stopPropagation","init","urls","tasks","requestReport","reportResult","update","getTasks","url","req","fetch","then","resp","json","initTasks","task","id","task_id","completed","datetime","Date","downloadReport","initNotifications","button","currentTarget","group_id","getAttribute","assignment_id","catch","err","console","log","taskId","initListeners","addReportListeners","getElementsByClassName","forEach"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
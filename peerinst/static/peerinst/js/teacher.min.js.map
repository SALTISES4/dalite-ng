{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","import { buildReq } from \"../../ajax.js\";\nimport { createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    urls: {\n      daliteMessages: data.urls.daliteMessages,\n      removeDaliteMessage: data.urls.removeDaliteMessage,\n    },\n    messages: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getMessages();\n}\n\nasync function getMessages() {\n  const req = buildReq({}, \"post\");\n\n  const resp = await fetch(model.urls.daliteMessages, req);\n  const data = await resp.json();\n  model.messages = data.messages.map(message => ({\n    id: message.id,\n    title: message.title,\n    text: message.text,\n    colour: message.colour,\n    removable: message.removable,\n    link: message.link,\n    authors: message.authors.map(author => ({\n      name: author.name,\n      picture: author.picture,\n    })),\n  }));\n}\n\nasync function removeMessage(message, div) {\n  const data = {\n    id: message.id,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.removeDaliteMessage, req);\n  if (resp.ok) {\n    div.parentNode.removeChild(div);\n  }\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  messagesView();\n}\n\nfunction messagesView() {\n  const ul = document.querySelector(\"#dalite-messages ul\");\n  model.messages.forEach(message => {\n    ul.appendChild(messageView(message));\n  });\n}\n\nfunction messageView(message) {\n  const container = document.createElement(\"li\");\n  container.classList.add(\"mdc-card\", \"dalite-message\");\n\n  if (message.authors.length) {\n    const authorsContainer = document.createElement(\"div\");\n    authorsContainer.classList.add(\"dalite-message__authors\");\n    message.authors.forEach(author => {\n      const img = document.createElement(\"img\");\n      img.classList.add(\"dalite-message__authors__author\");\n      img.title = author.name;\n      img.setAttribute(\"src\", author.picture);\n      img.setAttribute(\"alt\", `Picture of ${author.name}`);\n      authorsContainer.appendChild(img);\n    });\n    container.appendChild(authorsContainer);\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"mdc-typography--title\", \"dalite-message__title\");\n  title.textContent = message.title;\n  container.appendChild(title);\n\n  const text = document.createElement(\"div\");\n  text.classList.add(\"mdc-typography--body1\", \"dalite-message__text\");\n  text.textContent = message.text;\n  container.appendChild(text);\n\n  if (message.removable) {\n    const remove = document.createElement(\"div\");\n    remove.classList.add(\"dalite-message__remove-icon\");\n    remove.addEventListener(\"click\", async () => {\n      await removeMessage(message, container);\n    });\n    const icon = createSvg(\"close\");\n    remove.appendChild(icon);\n    container.appendChild(remove);\n  }\n\n  const background = document.createElement(\"div\");\n  background.classList.add(\"dalite-message__background\");\n  background.style.setProperty(\"background\", message.colour);\n  container.appendChild(background);\n\n  return container;\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initModel(data);\n  await update();\n  view();\n}\n","import { init as initMessages } from \"./dashboard/messages.js\";\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initMessages({\n    urls: {\n      daliteMessages: data.urls.dalite_messages,\n      removeDaliteMessage: data.urls.remove_dalite_message,\n    },\n  });\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  const icon = createSvg(\"chat_bubble\");\n  icon.classList.add(\"message__icon\");\n  div.appendChild(icon);\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"span\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = `( ${message.nNew} new )`;\n    div.appendChild(new_);\n  }\n\n  const title = document.createElement(\"span\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    const markReadBtn = document.createElement(\"span\");\n    markReadBtn.classList.add(\"message__mark-read\");\n    markReadBtn.textContent = \"Mark read\";\n    markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n      markRead(event, message, div),\n    );\n    div.appendChild(markReadBtn);\n  }\n\n  const lastReply = document.createElement(\"div\");\n  lastReply.classList.add(\"message__last-reply\");\n  div.appendChild(lastReply);\n\n  const author = document.createElement(\"span\");\n  author.classList.add(\"message__last-reply__author\");\n  author.textContent = message.lastReply.author;\n  lastReply.appendChild(author);\n\n  const content = document.createElement(\"span\");\n  content.classList.add(\"message__last-reply__content\");\n  content.textContent = message.lastReply.content;\n  lastReply.appendChild(content);\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","// @flow\n\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","clear","node","hasChildNodes","removeChild","lastChild","createSvg","name","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","window","location","protocol","host","model","initModel","urls","daliteMessages","removeDaliteMessage","messages","update","getMessages","req","resp","fetch","json","map","message","id","title","text","colour","removable","link","authors","author","picture","removeMessage","div","ok","parentNode","view","messagesView","ul","querySelector","forEach","appendChild","messageView","container","createElement","classList","add","length","authorsContainer","img","setAttribute","textContent","remove","addEventListener","icon","background","style","setProperty","init","initMessages","dalite_messages","remove_dalite_message","notificationsOpen","notifications","toggleNotifications","notificationsView","updateNotifications","badge","notificationsList","completedNotifications","filter","notification","inProgress","toString","display","notificationView","noNotificationView","some","onClick","spinner","error","onCloseClick","description","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","console","log","task_id","resolve","removeGradebookError","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","open","toggleMessages","messagesUrl","threads","lastReply","last_reply","content","nNew","n_new","markAllRead","markReadUrl","markRead","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"file":"teacher.min.js","sources":["dalite/static/js/ajax.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["export function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","// @flow\nimport { buildReq } from \"../../../../../dalite/static/js/ajax.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Collection = {\n  title: string,\n  description: string,\n  discipline: string,\n  nAssignments: number,\n  nFollowers: number,\n};\n\nlet model: {\n  collections: Array<Collection>,\n  urls: {\n    collections: string,\n  },\n};\n\nfunction initModel(data: { urls: { collections: string } }) {\n  model = {\n    collections: [],\n    urls: {\n      collections: data.urls.collections,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getCollections();\n}\n\nasync function getCollections() {\n  const data = {};\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.collections, req);\n  const json = await resp.json();\n  model.collections = json.collections.map(collection => ({\n    title: collection.title,\n    description: collection.description,\n    discipline: collection.discipline,\n    nAssignments: collection.n_assignments,\n    nFollowers: collection.n_followers,\n  }));\n  collectionsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction collectionsView() {\n  const section = document.querySelector(\".collections\");\n  if (!section) {\n    throw new Error(\"There is a missing section with class `collections`\");\n  }\n  if (model.collections.length) {\n    section.classList.remove(\"collections--hidden\");\n  } else {\n    section.classList.add(\"collections--hidden\");\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data: { urls: { collections: string } }) {\n  initModel(data);\n  await update();\n}\n","export function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  if (useSprite) {\n    use.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", `#${name}`);\n  } else {\n    use.setAttributeNS(\n      \"http://www.w3.org/1999/xlink\",\n      \"href\",\n      window.location.protocol +\n        \"//\" +\n        window.location.host +\n        \"/static/peerinst/icons.svg#\" +\n        name,\n    );\n  }\n  svg.append(use);\n  return svg;\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  const icon = createSvg(\"chat_bubble\");\n  icon.classList.add(\"message__icon\");\n  div.appendChild(icon);\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"span\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = `( ${message.nNew} new )`;\n    div.appendChild(new_);\n  }\n\n  const title = document.createElement(\"span\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    const markReadBtn = document.createElement(\"span\");\n    markReadBtn.classList.add(\"message__mark-read\");\n    markReadBtn.textContent = \"Mark read\";\n    markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n      markRead(event, message, div),\n    );\n    div.appendChild(markReadBtn);\n  }\n\n  const lastReply = document.createElement(\"div\");\n  lastReply.classList.add(\"message__last-reply\");\n  div.appendChild(lastReply);\n\n  const author = document.createElement(\"span\");\n  author.classList.add(\"message__last-reply__author\");\n  author.textContent = message.lastReply.author;\n  lastReply.appendChild(author);\n\n  const content = document.createElement(\"span\");\n  content.classList.add(\"message__last-reply__content\");\n  content.textContent = message.lastReply.content;\n  lastReply.appendChild(content);\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","// @flow\n\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","model","initModel","collections","urls","update","getCollections","req","resp","fetch","json","map","collection","title","description","discipline","nAssignments","n_assignments","nFollowers","n_followers","collectionsView","section","querySelector","length","classList","remove","add","init","clear","node","hasChildNodes","removeChild","lastChild","createSvg","name","useSprite","svg","createElementNS","use","setAttributeNS","window","location","protocol","host","append","notificationsOpen","notifications","toggleNotifications","notificationsView","updateNotifications","view","badge","notificationsList","completedNotifications","filter","notification","inProgress","textContent","toString","style","display","appendChild","notificationView","noNotificationView","some","div","createElement","addEventListener","onClick","spinner","icon","error","onCloseClick","text","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","id","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","console","log","task_id","resolve","removeGradebookError","ok","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","forEach","open","messages","getMessages","toggleMessages","messagesView","messagesUrl","threads","message","lastReply","author","last_reply","content","nNew","n_new","link","markAllRead","markReadUrl","markRead","messageView","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAASA,YAAT,GAAwB;SACtBC,QAAQ,CACZC,iBADI,CACc,qBADd,EACqC,CADrC,EAEJC,YAFI,CAES,OAFT,CAAP;;AAKF,AAAO,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;MACjCA,MAAM,CAACC,WAAP,OAAyB,KAA7B,EAAoC;WAC3B;MACLD,MAAM,EAAEA,MAAM,CAACE,WAAP,EADH;MAELC,OAAO,EAAE;wBACS,kBADT;uBAEQT,YAAY;;KAJ/B;GADF,MAQO,IAAIM,MAAM,CAACC,WAAP,OAAyB,MAA7B,EAAqC;QACpCG,IAAI,GAAGL,IAAI,GAAGM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAH,GAA0B,EAA3C;WACO;MACLC,MAAM,EAAEA,MAAM,CAACE,WAAP,EADH;MAELE,IAAI,EAAEA,IAFD;MAGLD,OAAO,EAAE;wBACS,kBADT;uBAEQT,YAAY;;KAL/B;GAFK,MAUA;UACCa,KAAK,kBAAWP,MAAX,2BAAX;;;;ACvBJ;;;;;;AAYA,IAAIQ,KAAJ;;AAOA,SAASC,SAAT,CAAmBV,IAAnB,EAA4D;EAC1DS,KAAK,GAAG;IACNE,WAAW,EAAE,EADP;IAENC,IAAI,EAAE;MACJD,WAAW,EAAEX,IAAI,CAACY,IAAL,CAAUD;;GAH3B;;;;;;;;;SAYaE;;;;;8BAAf,aAAwB;UAChBC,cAAc,EAApB;;;;;SAGaA;;;;;;;;;;;sCAAf,aAAgC;QACxBd,IAAI,GAAG,EAAb;QACMe,GAAG,GAAGhB,QAAQ,CAACC,IAAD,EAAO,MAAP,CAApB;QACMgB,IAAI,SAASC,KAAK,CAACR,KAAK,CAACG,IAAN,CAAWD,WAAZ,EAAyBI,GAAzB,CAAxB;QACMG,IAAI,SAASF,IAAI,CAACE,IAAL,EAAnB;IACAT,KAAK,CAACE,WAAN,GAAoBO,IAAI,CAACP,WAAL,CAAiBQ,GAAjB,CAAqB,UAAAC,UAAU;aAAK;QACtDC,KAAK,EAAED,UAAU,CAACC,KADoC;QAEtDC,WAAW,EAAEF,UAAU,CAACE,WAF8B;QAGtDC,UAAU,EAAEH,UAAU,CAACG,UAH+B;QAItDC,YAAY,EAAEJ,UAAU,CAACK,aAJ6B;QAKtDC,UAAU,EAAEN,UAAU,CAACO;OAL0B;KAA/B,CAApB;IAOAC,eAAe;;;;;AAOjB,SAASA,eAAT,GAA2B;MACnBC,OAAO,GAAGjC,QAAQ,CAACkC,aAAT,CAAuB,cAAvB,CAAhB;;MACI,CAACD,OAAL,EAAc;UACN,IAAIrB,KAAJ,CAAU,qDAAV,CAAN;;;MAEEC,KAAK,CAACE,WAAN,CAAkBoB,MAAtB,EAA8B;IAC5BF,OAAO,CAACG,SAAR,CAAkBC,MAAlB,CAAyB,qBAAzB;GADF,MAEO;IACLJ,OAAO,CAACG,SAAR,CAAkBE,GAAlB,CAAsB,qBAAtB;;;;;;;;;;AAQJ,SAAsBC,IAAtB;;;;;4BAAO,WAAoBnC,IAApB,EAA6D;IAClEU,SAAS,CAACV,IAAD,CAAT;UACMa,MAAM,EAAZ;;;;;AC5EK,SAASlB,cAAT,GAAwB;SACtBC,QAAQ,CACZC,iBADI,CACc,qBADd,EACqC,CADrC,EAEJC,YAFI,CAES,OAFT,CAAP;;AAKF,AAAO,SAASC,UAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;MACjCA,MAAM,CAACC,WAAP,OAAyB,KAA7B,EAAoC;WAC3B;MACLD,MAAM,EAAEA,MAAM,CAACE,WAAP,EADH;MAELC,OAAO,EAAE;wBACS,kBADT;uBAEQT,cAAY;;KAJ/B;GADF,MAQO,IAAIM,MAAM,CAACC,WAAP,OAAyB,MAA7B,EAAqC;QACpCG,IAAI,GAAGL,IAAI,GAAGM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAH,GAA0B,EAA3C;WACO;MACLC,MAAM,EAAEA,MAAM,CAACE,WAAP,EADH;MAELE,IAAI,EAAEA,IAFD;MAGLD,OAAO,EAAE;wBACS,kBADT;uBAEQT,cAAY;;KAL/B;GAFK,MAUA;UACCa,KAAK,kBAAWP,MAAX,2BAAX;;;;ACzBJ;;AAEA,AAAO,SAASmC,KAAT,CAAeC,IAAf,EAA+C;SAC7CA,IAAI,CAACC,aAAL,EAAP,EAA6B;;IAE3BD,IAAI,CAACE,WAAL,CAAiBF,IAAI,CAACG,SAAtB;;;SAEKH,IAAP;;AAGF;AAcA,AAAO,SAASI,SAAT,CAAmBC,IAAnB,EAAqE;MAApCC,SAAoC,uEAAf,IAAe;MACpEC,GAAG,GAAGhD,QAAQ,CAACiD,eAAT,CAAyB,4BAAzB,EAAuD,KAAvD,CAAZ;MACMC,GAAG,GAAGlD,QAAQ,CAACiD,eAAT,CAAyB,4BAAzB,EAAuD,KAAvD,CAAZ;;MACIF,SAAJ,EAAe;IACbG,GAAG,CAACC,cAAJ,CAAmB,8BAAnB,EAAmD,MAAnD,aAA+DL,IAA/D;GADF,MAEO;IACLI,GAAG,CAACC,cAAJ,CACE,8BADF,EAEE,MAFF,EAGEC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GACE,IADF,GAEEF,MAAM,CAACC,QAAP,CAAgBE,IAFlB,GAGE,6BAHF,GAIET,IAPJ;;;EAUFE,GAAG,CAACQ,MAAJ,CAAWN,GAAX;SACOF,GAAP;;;ACtCF;;;;;;AAYA,IAAInC,OAAJ;;AAKA,SAASC,WAAT,GAA2B;EACzBD,OAAK,GAAG;IACN4C,iBAAiB,EAAE,KADb;IAENC,aAAa,EAAE;GAFjB;;;;;;;;;AAUF,SAASC,mBAAT,GAAqC;EACnC9C,OAAK,CAAC4C,iBAAN,GAA0B,CAAC5C,OAAK,CAAC4C,iBAAjC;EACAG,iBAAiB;;;AAGnB,AAAO,SAASC,mBAAT,CAA6BH,aAA7B,EAAuE;EAC5E7C,OAAK,CAAC6C,aAAN,GAAsBA,aAAtB;EACAE,iBAAiB;;;;;;;;AAOnB,SAASE,IAAT,GAAsB;EACpBF,iBAAiB;;;AAGnB,SAASA,iBAAT,GAAmC;MAC3BF,aAAa,GAAG1D,QAAQ,CAACkC,aAAT,CAAuB,gBAAvB,CAAtB;MACM6B,KAAK,GAAGL,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAExB,aAAf,CAA6B,6BAA7B,CAAd;MACM8B,iBAAiB,GAAGN,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAExB,aAAf,CACxB,+BADwB,CAA1B;;MAII,CAACwB,aAAD,IAAkB,CAACK,KAAnB,IAA4B,CAACC,iBAAjC,EAAoD;;;;MAI9CC,sBAAsB,GAAGpD,OAAK,CAAC6C,aAAN,CAAoBQ,MAApB,CAC7B,UAAAC,YAAY;WAAI,CAACA,YAAY,CAACC,UAAlB;GADiB,CAA/B;;MAGIH,sBAAsB,CAAC9B,MAAvB,GAAgC,CAApC,EAAuC;IACrC4B,KAAK,CAACM,WAAN,GAAoBJ,sBAAsB,CAAC9B,MAAvB,CAA8BmC,QAA9B,EAApB;IACAP,KAAK,CAACQ,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;GAFF,MAGO;IACLT,KAAK,CAACM,WAAN,GAAoB,EAApB;IACAN,KAAK,CAACQ,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;;;EAGFhC,KAAK,CAACwB,iBAAD,CAAL;;MAEInD,OAAK,CAAC6C,aAAN,CAAoBvB,MAAxB,EAAgC;IAC9BtB,OAAK,CAAC6C,aAAN,CAAoBnC,GAApB,CAAwB,UAAS4C,YAAT,EAAuB;MAC7CH,iBAAiB,CAACS,WAAlB,CAA8BC,gBAAgB,CAACP,YAAD,CAA9C;KADF;GADF,MAIO;IACLH,iBAAiB,CAACS,WAAlB,CAA8BE,kBAAkB,EAAhD;;;MAGE9D,OAAK,CAAC6C,aAAN,CAAoBkB,IAApB,CAAyB,UAAAT,YAAY;WAAIA,YAAY,CAACC,UAAjB;GAArC,CAAJ,EAAuE;;;6BACrEpE,QAAQ,CACLkC,aADH,CACiB,yBADjB,iFAEIE,SAFJ,CAEcE,GAFd,CAEkB,iCAFlB;GADF,MAIO;;;8BACLtC,QAAQ,CACLkC,aADH,CACiB,yBADjB,mFAEIE,SAFJ,CAEcC,MAFd,CAEqB,iCAFrB;;;MAKExB,OAAK,CAAC4C,iBAAV,EAA6B;IAC3BC,aAAa,CAACtB,SAAd,CAAwBE,GAAxB,CAA4B,qBAA5B;GADF,MAEO;IACLoB,aAAa,CAACtB,SAAd,CAAwBC,MAAxB,CAA+B,qBAA/B;;;;AAIJ,SAASqC,gBAAT,CAA0BP,YAA1B,EAAsE;MAC9DU,GAAG,GAAG7E,QAAQ,CAAC8E,aAAT,CAAuB,KAAvB,CAAZ;EACAD,GAAG,CAACzC,SAAJ,CAAcE,GAAd,CAAkB,cAAlB;EACAuC,GAAG,CAACE,gBAAJ,CAAqB,OAArB,EAA8BZ,YAAY,CAACa,OAA3C;;MAEIb,YAAY,CAACC,UAAjB,EAA6B;QACrBa,OAAO,GAAGjF,QAAQ,CAAC8E,aAAT,CAAuB,iBAAvB,CAAhB;IACAG,OAAO,CAAC7C,SAAR,CAAkBE,GAAlB,CAAsB,uBAAtB;IACAuC,GAAG,CAACJ,WAAJ,CAAgBQ,OAAhB;GAHF,MAIO;QACDC,IAAJ;;QACIf,YAAY,CAACgB,KAAjB,EAAwB;MACtBD,IAAI,GAAGrC,SAAS,CAAC,OAAD,CAAhB;MACAqC,IAAI,CAAC9C,SAAL,CAAeE,GAAf,CAAmB,2BAAnB;UACMD,MAAM,GAAGQ,SAAS,CAAC,OAAD,CAAxB;MACAR,MAAM,CAACD,SAAP,CAAiBE,GAAjB,CAAqB,qBAArB;MACAD,MAAM,CAAC0C,gBAAP,CAAwB,OAAxB,EAAiCZ,YAAY,CAACiB,YAA9C;MACAP,GAAG,CAACJ,WAAJ,CAAgBpC,MAAhB;KANF,MAOO;MACLwC,GAAG,CAACzC,SAAJ,CAAcE,GAAd,CAAkB,yBAAlB;MACA4C,IAAI,GAAGrC,SAAS,CAAC,gBAAD,CAAhB;;;IAEFqC,IAAI,CAAC9C,SAAL,CAAeE,GAAf,CAAmB,oBAAnB;IACAuC,GAAG,CAACJ,WAAJ,CAAgBS,IAAhB;;;MAGIxD,WAAW,GAAG1B,QAAQ,CAAC8E,aAAT,CAAuB,MAAvB,CAApB;EACApD,WAAW,CAACU,SAAZ,CAAsBE,GAAtB,CAA0B,2BAA1B;EACAZ,WAAW,CAAC2C,WAAZ,GAA0BF,YAAY,CAACkB,IAAvC;EACAR,GAAG,CAACJ,WAAJ,CAAgB/C,WAAhB;SAEOmD,GAAP;;;AAGF,SAASF,kBAAT,GAA8C;MACtCE,GAAG,GAAG7E,QAAQ,CAAC8E,aAAT,CAAuB,KAAvB,CAAZ;EACAD,GAAG,CAACR,WAAJ,GAAkB,sBAAlB;SACOQ,GAAP;;;;;;;;;AAOF,SAASS,kBAAT,GAAoC;EAClCC,4BAA4B;;;AAG9B,SAASA,4BAAT,GAA8C;;;4BAC5CvF,QAAQ,CACLkC,aADH,CACiB,gBADjB,mFAEI6C,gBAFJ,CAEqB,OAFrB,EAE8B,UAASS,KAAT,EAA4B;IACtDA,KAAK,CAACC,eAAN;GAHJ;4BAKAzF,QAAQ,CACLkC,aADH,CACiB,sBADjB,mFAEI6C,gBAFJ,CAEqB,OAFrB,EAE8B,UAASS,KAAT,EAA4B;IACtD7B,mBAAmB;GAHvB;oBAKA3D,QAAQ,CAACS,IAAT,kEAAesE,gBAAf,CAAgC,OAAhC,EAAyC,UAASS,KAAT,EAA4B;QAC/D3E,OAAK,CAAC4C,iBAAV,EAA6B;MAC3B+B,KAAK,CAACC,eAAN;MACA9B,mBAAmB;;GAHvB;;;;;;;;;AAYF,AAAO,SAASpB,MAAT,GAAsB;EAC3BzB,WAAS;EACTgD,IAAI;EACJwB,kBAAkB;;;ACxKpB;;;;;AAIA,IAAMI,WAAW,GAAG,CAApB;AAUA,IAAI7E,OAAJ;;AAWA,SAASC,WAAT,CAAmBE,IAAnB,EAMS;EACPH,OAAK,GAAG;IACN8E,KAAK,EAAE,EADD;IAEN3E,IAAI,EAAE;MACJ4E,gBAAgB,EAAE5E,IAAI,CAAC4E,gBADnB;MAEJC,eAAe,EAAE7E,IAAI,CAAC6E,eAFlB;MAGJC,qBAAqB,EAAE9E,IAAI,CAAC8E,qBAHxB;MAIJC,iBAAiB,EAAE/E,IAAI,CAAC+E,iBAJpB;MAKJJ,KAAK,EAAE3E,IAAI,CAAC2E;;GAPhB;;;;;;;;;AAgBF,SAAS1E,QAAT,GAAwB;EACtB+E,QAAQ;;;AAGV,SAASA,QAAT,GAA0B;MAClBC,GAAG,GAAGpF,OAAK,CAACG,IAAN,CAAW2E,KAAvB;MACMxE,GAAG,GAAGhB,UAAQ,CAAC,EAAD,EAAK,KAAL,CAApB;EAEAkB,KAAK,CAAC4E,GAAD,EAAM9E,GAAN,CAAL,CACG+E,IADH,CACQ,UAAA9E,IAAI;WAAIA,IAAI,CAACE,IAAL,EAAJ;GADZ,EAEG4E,IAFH,CAEQ,UAAA9F,IAAI,EAAI;IACZ+F,SAAS,CAAC/F,IAAI,CAACuF,KAAN,CAAT;GAHJ;;;SAOaQ;;;;;iCAAf,WACE/F,IADF,EAOiB;IACfS,OAAK,CAAC8E,KAAN,GAAcvF,IAAI,CACfmB,GADW,CACP,UAAA6E,IAAI;aAAK;QACZC,EAAE,EAAED,IAAI,CAACC,EADG;QAEZ3E,WAAW,EAAE0E,IAAI,CAAC1E,WAFN;QAGZ4E,SAAS,EAAEF,IAAI,CAACE,SAHJ;QAIZC,QAAQ,EAAE,IAAIC,IAAJ,CAASJ,IAAI,CAACG,QAAd,CAJE;QAKZpB,KAAK,EAAE;OALA;KADG,EAQXsB,IARW,CAQN,UAACC,CAAD,EAAIC,CAAJ;aACJD,CAAC,CAACH,QAAF,GAAaI,CAAC,CAACJ,QAAf,GAA0B,CAAC,CAA3B,GAA+BG,CAAC,CAACH,QAAF,GAAaI,CAAC,CAACJ,QAAf,GAA0B,CAA1B,GAA8B,CADzD;KARM,CAAd;IAWA1C,mBAAmB,CAAC+C,gBAAgB,EAAjB,CAAnB;IACAC,OAAO,CAACC,GAAR,CACEjG,OAAK,CAAC8E,KAAN,CACGzB,MADH,CACU,UAAAkC,IAAI;aAAI,CAACA,IAAI,CAACE,SAAV;KADd,EAEG/E,GAFH,CAEO,UAAA6E,IAAI;aAAIW,kBAAkB,CAACX,IAAD,CAAtB;KAFX,CADF;;;;;SAOaR;;;;;wCAAf,WAAgCJ,KAAhC,EAAkE;IAChEA,KAAK,CAACC,eAAN;QACMuB,MAAM,GAAGxB,KAAK,CAACyB,aAArB;QACMC,OAAO,GAAGF,MAAM,CAAC9G,YAAP,CAAoB,YAApB,CAAhB;QACMiH,YAAY,GAAGH,MAAM,CAAC9G,YAAP,CAAoB,iBAApB,CAArB;QAEME,IAAI,GAAG;MACXgH,QAAQ,EAAEF,OADC;MAEXG,aAAa,EAAEF;KAFjB;QAKMlB,GAAG,GAAGpF,OAAK,CAACG,IAAN,CAAW4E,gBAAvB;QACMzE,GAAG,GAAGhB,UAAQ,CAACC,IAAD,EAAO,MAAP,CAApB;QACMgB,IAAI,SAASC,KAAK,CAAC4E,GAAD,EAAM9E,GAAN,CAAxB;;QAEIC,IAAI,CAACkG,MAAL,KAAgB,GAApB,EAAyB;UACjBlH,KAAI,SAASgB,IAAI,CAACiE,IAAL,EAAnB;;UACM5D,KAAK,GAAGrB,KAAI,CAACmH,KAAL,CAAW,IAAX,EAAiB,CAAjB,CAAd;;UACMC,GAAG,GAAGpH,KAAI,CACbmH,KADS,CACH,IADG,EAETE,KAFS,CAEH,CAFG,EAGTC,IAHS,CAGJ,IAHI,CAAZ;;MAIAC,kBAAkB,CAAClG,KAAD,EAAQ+F,GAAR,CAAlB;KAPF,MAQO,IAAIpG,IAAI,CAACkG,MAAL,KAAgB,GAApB,EAAyB;UACxBlH,MAAI,SAASgB,IAAI,CAACE,IAAL,EAAnB;;UACM8E,IAAI,GAAG;QACXC,EAAE,EAAEjG,MAAI,CAACiG,EADE;QAEX3E,WAAW,EAAEtB,MAAI,CAACsB,WAFP;QAGX4E,SAAS,EAAElG,MAAI,CAACkG,SAHL;QAIXC,QAAQ,EAAE,IAAIC,IAAJ,CAASpG,MAAI,CAACmG,QAAd,CAJC;QAKXpB,KAAK,EAAE;OALT;MAOAtE,OAAK,CAAC8E,KAAN,CAAYiC,OAAZ,CAAoBxB,IAApB;MACAyB,UAAU,CAAC;eAAMd,kBAAkB,CAACX,IAAD,CAAxB;OAAD,EAAiC,CAAjC,CAAV;MACAvC,mBAAmB,CAAC+C,gBAAgB,EAAjB,CAAnB;KAXK,MAYA;MACLkB,OAAO,CAACC,GAAR,CAAY3G,IAAZ;;;;;;SAIW2F;;;;;0CAAf,WAAkCX,IAAlC,EAA6D;QACrDH,GAAG,GAAGpF,OAAK,CAACG,IAAN,CAAW6E,eAAvB;QACM1E,GAAG,GAAGhB,UAAQ,CAAC;MAAE6H,OAAO,EAAE5B,IAAI,CAACC;KAAjB,EAAuB,MAAvB,CAApB;QAEMjF,IAAI,SAASC,KAAK,CAAC4E,GAAD,EAAM9E,GAAN,CAAxB;;QAEIC,IAAI,CAACkG,MAAL,IAAe,GAAnB,EAAwB;MACtBlB,IAAI,CAACE,SAAL,GAAiB,IAAjB;MACAzC,mBAAmB,CAAC+C,gBAAgB,EAAjB,CAAnB;KAFF,MAGO,IAAIxF,IAAI,CAACkG,MAAL,IAAe,GAAnB,EAAwB;YACvB,IAAIT,OAAJ,CAAY,UAAAoB,OAAO;eACvBJ,UAAU,CAAC;iBAAMd,kBAAkB,CAACX,IAAD,CAAxB;SAAD,EAAiCV,WAAW,GAAG,IAA/C,CADa;OAAnB,CAAN;KADK,MAIA;MACLU,IAAI,CAACE,SAAL,GAAiB,IAAjB;MACAF,IAAI,CAACjB,KAAL,GAAa,IAAb;MACAtB,mBAAmB,CAAC+C,gBAAgB,EAAjB,CAAnB;;;;;;SAIWsB;;;;;4CAAf,WAAoC9B,IAApC,EAA+D;QACvDH,GAAG,GAAGpF,OAAK,CAACG,IAAN,CAAW8E,qBAAvB;QACM3E,GAAG,GAAGhB,UAAQ,CAAC;MAAE6H,OAAO,EAAE5B,IAAI,CAACC;KAAjB,EAAuB,MAAvB,CAApB;QAEMjF,IAAI,SAASC,KAAK,CAAC4E,GAAD,EAAM9E,GAAN,CAAxB;;QACIC,IAAI,CAAC+G,EAAT,EAAa;MACXtH,OAAK,CAAC8E,KAAN,GAAc9E,OAAK,CAAC8E,KAAN,CAAYzB,MAAZ,CAAmB,UAAAkE,CAAC;eAAIA,CAAC,CAAC/B,EAAF,KAASD,IAAI,CAACC,EAAlB;OAApB,CAAd;;;IAEFxC,mBAAmB,CAAC+C,gBAAgB,EAAjB,CAAnB;;;;;SAGab;;;;;0CAAf,WAAiCK,IAAjC,EAA4D;QACpDhG,IAAI,GAAG;MACX4H,OAAO,EAAE5B,IAAI,CAACC;KADhB;QAGMJ,GAAG,GAAGpF,OAAK,CAACG,IAAN,CAAW+E,iBAAvB;QACM5E,GAAG,GAAGhB,UAAQ,CAACC,IAAD,EAAO,MAAP,CAApB;QACMgB,IAAI,SAASC,KAAK,CAAC4E,GAAD,EAAM9E,GAAN,CAAxB;;QAEIC,IAAI,CAAC+G,EAAT,EAAa;UACL/H,MAAI,SAASgB,IAAI,CAACiE,IAAL,EAAnB;;UACM5D,KAAK,GAAGrB,MAAI,CAACmH,KAAL,CAAW,IAAX,EAAiB,CAAjB,CAAd;;UACMC,GAAG,GAAGpH,MAAI,CACbmH,KADS,CACH,IADG,EAETE,KAFS,CAEH,CAFG,EAGTC,IAHS,CAGJ,IAHI,CAAZ;;MAIAC,kBAAkB,CAAClG,KAAD,EAAQ+F,GAAR,CAAlB;;MACA3G,OAAK,CAAC8E,KAAN,GAAc9E,OAAK,CAAC8E,KAAN,CAAYzB,MAAZ,CAAmB,UAAAkE,CAAC;eAAIA,CAAC,CAAC/B,EAAF,IAAQD,IAAI,CAACC,EAAjB;OAApB,CAAd;MACAxC,mBAAmB,CAAC+C,gBAAgB,EAAjB,CAAnB;KATF,MAUO;MACLkB,OAAO,CAACC,GAAR,CAAY3G,IAAZ;;;;;;AAIJ,SAASuG,kBAAT,CAA4BlG,KAA5B,EAA2C+F,GAA3C,EAA8D;MACtDd,CAAC,GAAG1G,QAAQ,CAAC8E,aAAT,CAAuB,GAAvB,CAAV;EACA4B,CAAC,CAAC2B,IAAF,0CAAyCC,MAAM,CAACd,GAAD,CAA/C;EACAd,CAAC,CAAC6B,MAAF,GAAW,QAAX;EACA7B,CAAC,CAAC8B,QAAF,GAAa/G,KAAb;EACAzB,QAAQ,CAACS,IAAT,CAAcgE,WAAd,CAA0BiC,CAA1B;EACAA,CAAC,CAAC+B,KAAF;EACAzI,QAAQ,CAACS,IAAT,CAAckC,WAAd,CAA0B+D,CAA1B;;;AAGF,SAASE,gBAAT,GAAiD;SACxC/F,OAAK,CAAC8E,KAAN,CAAYpE,GAAZ,CAAgB,UAAA6E,IAAI;WAAK;MAC9Bf,IAAI,EAAEe,IAAI,CAACE,SAAL,GACFF,IAAI,CAACjB,KAAL,2DACmDiB,IAAI,CAAC1E,WADxD,uBAES0E,IAAI,CAAC1E,WAFd,eADE,2BAIe0E,IAAI,CAAC1E,WAJpB,QADwB;MAM9B0C,UAAU,EAAE,CAACgC,IAAI,CAACE,SANY;MAO9BnB,KAAK,EAAEiB,IAAI,CAACjB,KAPkB;MAQ9BH,OAAO,EACLoB,IAAI,CAACE,SAAL,IAAkB,CAACF,IAAI,CAACjB,KAAxB;;wBACI;qBAAkBY,iBAAiB,CAACK,IAAD,CAAnC;OADJ;;wBAEI;eAAYsC,SAAZ;OAFJ,CAT4B;MAY9BtD,YAAY;8CAAE;uBAAkB8C,oBAAoB,CAAC9B,IAAD,CAAtC;SAAF;;;;;;;;KAZa;GAApB,CAAP;;;;;;;;;;;;;;;AAwBF,SAASuC,aAAT,GAA+B;EAC7BC,qBAAqB;;;AAGvB,SAASA,qBAAT,GAAuC;qBACjC5I,QAAQ,CAAC6I,sBAAT,CAAgC,kBAAhC,CAAJ,EAAyDC,OAAzD,CAAiE,UAAA9B,MAAM,EAAI;IACzEA,MAAM,CAACjC,gBAAP,CACE,OADF;;;oCAEE,WAAOS,KAAP;qBAAmCI,gBAAgB,CAACJ,KAAD,CAAnD;OAFF;;;;;;GADF;;;;;;;;;AAYF,AAAO,SAASjD,MAAT,CAAcvB,IAAd,EAME;EACPF,WAAS,CAACE,IAAD,CAAT;EACAC,QAAM;EACN0H,aAAa;;;ACtPf;;;;;;AAiBA,IAAI9H,OAAJ;;AASA,SAASC,WAAT,CAAmBE,IAAnB,EAA6E;EAC3EH,OAAK,GAAG;IACNkI,IAAI,EAAE,KADA;IAENC,QAAQ,EAAE,EAFJ;IAGNhI,IAAI,EAAEA;GAHR;;;;;;;;;AAWF,SAASC,QAAT,GAAwB;EACtBgI,WAAW;;;AAGb,SAASC,cAAT,GAAgC;EAC9BrI,OAAK,CAACkI,IAAN,GAAa,CAAClI,OAAK,CAACkI,IAApB;EACAI,YAAY;;;AAGd,SAASF,WAAT,GAA6B;MACrBhD,GAAG,GAAGpF,OAAK,CAACG,IAAN,CAAWoI,WAAvB;MACMjI,GAAG,GAAGhB,UAAQ,CAAC,EAAD,EAAK,KAAL,CAApB;EAEAkB,KAAK,CAAC4E,GAAD,EAAM9E,GAAN,CAAL,CACG+E,IADH,CACQ,UAAA9E,IAAI;WAAIA,IAAI,CAACE,IAAL,EAAJ;GADZ,EAEG4E,IAFH,CAEQ,UAAA9F,IAAI,EAAI;IACZS,OAAK,CAACmI,QAAN,GAAiB5I,IAAI,CAACiJ,OAAL,CAAa9H,GAAb,CAAiB,UAAA+H,OAAO;aAAK;QAC5CjD,EAAE,EAAEiD,OAAO,CAACjD,EADgC;QAE5C5E,KAAK,EAAE6H,OAAO,CAAC7H,KAF6B;QAG5C8H,SAAS,EAAE;UACTC,MAAM,EAAEF,OAAO,CAACG,UAAR,CAAmBD,MADlB;UAETE,OAAO,EAAEJ,OAAO,CAACG,UAAR,CAAmBC;SALc;QAO5CC,IAAI,EAAEL,OAAO,CAACM,KAP8B;QAQ5CC,IAAI,EAAEP,OAAO,CAACO;OARyB;KAAxB,CAAjB;IAUAV,YAAY;GAbhB;;;SAiBaW;;;;;mCAAf,aAA4C;QACpC3I,GAAG,GAAGhB,UAAQ,CAAC,EAAD,EAAK,MAAL,CAApB;QACMiB,IAAI,SAASC,KAAK,CAACR,OAAK,CAACG,IAAN,CAAW+I,WAAZ,EAAyB5I,GAAzB,CAAxB;;QACIC,IAAI,CAAC+G,EAAT,EAAa;MACXtH,OAAK,CAACmI,QAAN,CAAeF,OAAf,CAAuB,UAAAQ,OAAO,EAAI;QAChCA,OAAO,CAACK,IAAR,GAAe,CAAf;OADF;;;IAIFR,YAAY;;;;;SAGCa;;;;;;;;;;;gCAAf,WACExE,KADF,EAEE8D,OAFF,EAGEzE,GAHF,EAIiB;IACfW,KAAK,CAACC,eAAN;QACMtE,GAAG,GAAGhB,UAAQ,CAAC;MAAEkG,EAAE,EAAEiD,OAAO,CAACjD;KAAf,EAAqB,MAArB,CAApB;QACMjF,IAAI,SAASC,KAAK,CAACR,OAAK,CAACG,IAAN,CAAW+I,WAAZ,EAAyB5I,GAAzB,CAAxB;;QACIC,IAAI,CAAC+G,EAAT,EAAa;MACXmB,OAAO,CAACK,IAAR,GAAe,CAAf;;;IAEFM,WAAW,CAACX,OAAD,EAAUzE,GAAV,CAAX;IACAqF,SAAS;;;;;AAOX,SAASpG,MAAT,GAAsB;EACpBqF,YAAY;;;AAGd,SAASA,YAAT,GAA8B;MACtBH,QAAQ,GAAGhJ,QAAQ,CAACkC,aAAT,CAAuB,WAAvB,CAAjB;MACM6B,KAAK,GAAGiF,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAE9G,aAAV,CAAwB,wBAAxB,CAAd;MACMiI,YAAY,GAAGnB,QAAH,aAAGA,QAAH,uBAAGA,QAAQ,CAAE9G,aAAV,CAAwB,qBAAxB,CAArB;;MAEI,CAAC8G,QAAD,IAAa,CAACjF,KAAd,IAAuB,CAACoG,YAA5B,EAA0C;;;;EAI1CD,SAAS;EAET1H,KAAK,CAAC2H,YAAD,CAAL;;MAEItJ,OAAK,CAACmI,QAAN,CAAe7G,MAAnB,EAA2B;IACzBtB,OAAK,CAACmI,QAAN,CAAezH,GAAf,CAAmB,UAAS+H,OAAT,EAAkB;MACnCa,YAAY,CAAC1F,WAAb,CAAyBwF,WAAW,CAACX,OAAD,CAApC;KADF;GADF,MAIO;IACLa,YAAY,CAAC1F,WAAb,CAAyB2F,aAAa,EAAtC;;;MAGEvJ,OAAK,CAACkI,IAAV,EAAgB;IACdC,QAAQ,CAAC5G,SAAT,CAAmBE,GAAnB,CAAuB,gBAAvB;GADF,MAEO;IACL0G,QAAQ,CAAC5G,SAAT,CAAmBC,MAAnB,CAA0B,gBAA1B;;;;AAIJ,SAAS6H,SAAT,GAA2B;MACnBnG,KAAK,GAAG/D,QAAQ,CAACkC,aAAT,CAAuB,wBAAvB,CAAd;MAEMyH,IAAI,GAAG9I,OAAK,CAACmI,QAAN,CAAe9E,MAAf,CAAsB,UAAAoF,OAAO;WAAIA,OAAO,CAACK,IAAR,GAAe,CAAnB;GAA7B,EAAmDxH,MAAhE;;MACIwH,IAAJ,EAAU;IACR5F,KAAK,CAACM,WAAN,GAAoBsF,IAAI,CAACrF,QAAL,EAApB;IACAP,KAAK,CAACQ,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;GAFF,MAGO;IACLT,KAAK,CAACM,WAAN,GAAoB,EAApB;IACAN,KAAK,CAACQ,KAAN,CAAYC,OAAZ,GAAsB,MAAtB;;;;AAIJ,SAASyF,WAAT,CACEX,OADF,EAGkB;MADhBzE,GACgB,uEADO,IACP;;MACZA,GAAJ,EAAS;IACPrC,KAAK,CAACqC,GAAD,CAAL;GADF,MAEO;IACLA,GAAG,GAAG7E,QAAQ,CAAC8E,aAAT,CAAuB,KAAvB,CAAN;IACAD,GAAG,CAACzC,SAAJ,CAAcE,GAAd,CAAkB,SAAlB;IACAuC,GAAG,CAACE,gBAAJ,CAAqB,OAArB,EAA8B,YAAM;MAClC3B,MAAM,CAACC,QAAP,CAAgBgF,IAAhB,GAAuBiB,OAAO,CAACO,IAA/B;KADF;;;MAKEP,OAAO,CAACK,IAAZ,EAAkB;IAChB9E,GAAG,CAACzC,SAAJ,CAAcE,GAAd,CAAkB,cAAlB;GADF,MAEO;IACLuC,GAAG,CAACzC,SAAJ,CAAcC,MAAd,CAAqB,cAArB;;;MAGI6C,IAAI,GAAGrC,SAAS,CAAC,aAAD,CAAtB;EACAqC,IAAI,CAAC9C,SAAL,CAAeE,GAAf,CAAmB,eAAnB;EACAuC,GAAG,CAACJ,WAAJ,CAAgBS,IAAhB;;MAEIoE,OAAO,CAACK,IAAZ,EAAkB;QACVU,IAAI,GAAGrK,QAAQ,CAAC8E,aAAT,CAAuB,MAAvB,CAAb;IACAuF,IAAI,CAACjI,SAAL,CAAeE,GAAf,CAAmB,cAAnB;IACA+H,IAAI,CAAChG,WAAL,eAAwBiF,OAAO,CAACK,IAAhC;IACA9E,GAAG,CAACJ,WAAJ,CAAgB4F,IAAhB;;;MAGI5I,KAAK,GAAGzB,QAAQ,CAAC8E,aAAT,CAAuB,MAAvB,CAAd;EACArD,KAAK,CAACW,SAAN,CAAgBE,GAAhB,CAAoB,gBAApB;EACAb,KAAK,CAAC4C,WAAN,GAAoBiF,OAAO,CAAC7H,KAA5B;EACAoD,GAAG,CAACJ,WAAJ,CAAgBhD,KAAhB;;MAEI6H,OAAO,CAACK,IAAZ,EAAkB;QACVW,WAAW,GAAGtK,QAAQ,CAAC8E,aAAT,CAAuB,MAAvB,CAApB;IACAwF,WAAW,CAAClI,SAAZ,CAAsBE,GAAtB,CAA0B,oBAA1B;IACAgI,WAAW,CAACjG,WAAZ,GAA0B,WAA1B;IACAiG,WAAW,CAACvF,gBAAZ,CAA6B,OAA7B,EAAsC,UAACS,KAAD;aACpCwE,QAAQ,CAACxE,KAAD,EAAQ8D,OAAR,EAAiBzE,GAAjB,CAD4B;KAAtC;IAGAA,GAAG,CAACJ,WAAJ,CAAgB6F,WAAhB;;;MAGIf,SAAS,GAAGvJ,QAAQ,CAAC8E,aAAT,CAAuB,KAAvB,CAAlB;EACAyE,SAAS,CAACnH,SAAV,CAAoBE,GAApB,CAAwB,qBAAxB;EACAuC,GAAG,CAACJ,WAAJ,CAAgB8E,SAAhB;MAEMC,MAAM,GAAGxJ,QAAQ,CAAC8E,aAAT,CAAuB,MAAvB,CAAf;EACA0E,MAAM,CAACpH,SAAP,CAAiBE,GAAjB,CAAqB,6BAArB;EACAkH,MAAM,CAACnF,WAAP,GAAqBiF,OAAO,CAACC,SAAR,CAAkBC,MAAvC;EACAD,SAAS,CAAC9E,WAAV,CAAsB+E,MAAtB;MAEME,OAAO,GAAG1J,QAAQ,CAAC8E,aAAT,CAAuB,MAAvB,CAAhB;EACA4E,OAAO,CAACtH,SAAR,CAAkBE,GAAlB,CAAsB,8BAAtB;EACAoH,OAAO,CAACrF,WAAR,GAAsBiF,OAAO,CAACC,SAAR,CAAkBG,OAAxC;EACAH,SAAS,CAAC9E,WAAV,CAAsBiF,OAAtB;SAEO7E,GAAP;;;AAGF,SAASuF,aAAT,GAAyC;MACjCvF,GAAG,GAAG7E,QAAQ,CAAC8E,aAAT,CAAuB,KAAvB,CAAZ;EACAD,GAAG,CAACR,WAAJ,GAAkB,aAAlB;SACOQ,GAAP;;;;;;;;;AAOF,SAASS,oBAAT,GAAoC;EAClCiF,uBAAuB;EACvBC,sBAAsB;;;AAGxB,SAASD,uBAAT,GAAyC;;;2BACvCvK,QAAQ,CACLkC,aADH,CACiB,WADjB,iFAEI6C,gBAFJ,CAEqB,OAFrB,EAE8B,UAASS,KAAT,EAA4B;IACtDA,KAAK,CAACC,eAAN;GAHJ;4BAKAzF,QAAQ,CACLkC,aADH,CACiB,iBADjB,mFAEI6C,gBAFJ,CAEqB,OAFrB,EAE8B,UAASS,KAAT,EAA4B;IACtD0D,cAAc;GAHlB;oBAKAlJ,QAAQ,CAACS,IAAT,kEAAesE,gBAAf,CAAgC,OAAhC,EAAyC,UAASS,KAAT,EAA4B;QAC/D3E,OAAK,CAACkI,IAAV,EAAgB;MACdvD,KAAK,CAACC,eAAN;MACAyD,cAAc;;GAHlB;;;AAQF,SAASsB,sBAAT,GAAwC;;;4BACtCxK,QAAQ,CACLkC,aADH,CACiB,yBADjB,mFAEI6C,gBAFJ,CAEqB,OAFrB,EAE8B;WAAM+E,WAAW,EAAjB;GAF9B;;;;;;;;;AASF,AAAO,SAASvH,MAAT,CAAcvB,IAAd,EAGE;EACPF,WAAS,CAACE,IAAD,CAAT;EACAC,QAAM;EACN6C,MAAI;EACJwB,oBAAkB;;;ACpQpB;;;;;;;;;;;;;","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
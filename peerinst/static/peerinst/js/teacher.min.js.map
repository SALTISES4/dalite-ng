{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/_teacher/custom_report.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/_teacher/dashboard/questions.js","peerinst/static/peerinst/js/_teacher/dashboard/studentActivity.js","peerinst/static/peerinst/js/_teacher/dashboard/rationales.js","peerinst/static/peerinst/js/_teacher/questions.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  console.log(\n    document.getElementsByName(\"csrfmiddlewaretoken\")[0].getAttribute(\"value\"),\n  );\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","import { buildReq } from \"../../ajax.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    urls: {\n      daliteMessages: data.urls.daliteMessages,\n      removeDaliteMessage: data.urls.removeDaliteMessage,\n      saltiseImage: data.urls.saltiseImage,\n    },\n    messages: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getMessages();\n}\n\nasync function getMessages() {\n  const req = buildReq({}, \"post\");\n\n  const resp = await fetch(model.urls.daliteMessages, req);\n  const data = await resp.json();\n  model.messages = data.messages.map(message => ({\n    id: message.id,\n    title: message.title,\n    text: message.text,\n    colour: message.colour,\n    removable: message.removable,\n    date: message.date,\n    link: message.link,\n    authors: message.authors.map(author => ({\n      name: author.name,\n      picture: author.picture,\n    })),\n  }));\n}\n\nasync function removeMessage(message, div) {\n  const data = {\n    id: message.id,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.removeDaliteMessage, req);\n  if (resp.ok) {\n    removeMessageView(div);\n  }\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  messagesView();\n}\n\nfunction messagesView() {\n  const messages = document.querySelector(\"#dalite-messages\");\n  if (model.messages.length) {\n    messages.classList.remove(\"hidden\");\n    model.messages.forEach(message => {\n      messages.appendChild(messageView(message));\n    });\n  } else {\n    messages.remove();\n  }\n}\n\nfunction messageView(message) {\n  const container = document.createElement(\"div\");\n  container.classList.add(\"mdc-card\");\n\n  const content = document.createElement(\"div\");\n  if (message.link) {\n    content.addEventListener(\"click\", () => {\n      window.location.assign(message.link);\n    });\n    content.style.setProperty(\"cursor\", \"pointer\");\n    content.title = message.link;\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"mdc-typography--title\", \"bold\");\n  title.textContent = message.title;\n  content.appendChild(title);\n\n  const caption = document.createElement(\"div\");\n  caption.classList.add(\"mdc-typography--caption\");\n  caption.textContent = message.date;\n  content.appendChild(caption);\n\n  const text = document.createElement(\"div\");\n  text.classList.add(\"mdc-typography--body1\");\n  text.innerHTML = message.text;\n  content.appendChild(text);\n\n  container.appendChild(content);\n\n  const actions = document.createElement(\"div\");\n  actions.classList.add(\"mdc-card__actions\");\n\n  const images = document.createElement(\"div\");\n  images.classList.add(\"mdc-card__action-buttons\");\n  if (message.authors.length) {\n    const authorsContainer = document.createElement(\"div\");\n    authorsContainer.classList.add(\"dalite-message__authors\");\n    message.authors.forEach(author => {\n      const img = document.createElement(\"img\");\n      img.classList.add(\"dalite-message__authors_author\");\n      img.title = author.name;\n      img.setAttribute(\n        \"src\",\n        author.picture ? author.picture : model.urls.saltiseImage,\n      );\n      img.setAttribute(\"alt\", `Picture of ${author.name}`);\n      authorsContainer.appendChild(img);\n    });\n    images.appendChild(authorsContainer);\n  }\n  actions.appendChild(images);\n\n  if (message.removable) {\n    const buttons = document.createElement(\"div\");\n    buttons.classList.add(\"mdc-card__action-icons\");\n    const remove = document.createElement(\"i\");\n    remove.classList.add(\n      \"mdc-icon-toggle\",\n      \"material-icons\",\n      \"mdc-theme--primary\",\n    );\n    remove.textContent = \"clear\";\n    remove.addEventListener(\"click\", async () => {\n      await removeMessage(message, container);\n    });\n    buttons.appendChild(remove);\n    actions.appendChild(buttons);\n  }\n\n  container.appendChild(actions);\n  container.style.setProperty(\"background-color\", message.colour);\n\n  return container;\n}\n\nfunction removeMessageView(node) {\n  if (node.parentNode.childElementCount == 3) {\n    node.parentNode.remove();\n  } else {\n    node.remove();\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initModel(data);\n  await update();\n  view();\n}\n","import { init as initMessages } from \"./dashboard/messages.js\";\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initMessages({\n    urls: {\n      daliteMessages: data.urls.dalite_messages,\n      removeDaliteMessage: data.urls.remove_dalite_message,\n      saltiseImage: data.urls.saltise_image,\n    },\n  });\n}\n","import { buildReq } from \"../ajax.js\";\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(urls) {\n  model = {\n    urls: {\n      evaluateRationale: urls.evaluateRationale,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update() {\n  updateRationalesEvaluationAttributes();\n}\n\nfunction updateRationalesEvaluationAttributes() {\n  document.querySelectorAll(\".custom-report__rationale\").forEach(rationale => {\n    updateRationaleEvaluationAttributes(rationale);\n  });\n}\n\nfunction updateRationaleEvaluationAttributes(rationale) {\n  const evaluation = rationale.getAttribute(\"data-score\");\n  if (evaluation != \"\") {\n    const evaluation_ = parseInt(evaluation);\n    if (evaluation_ == 0) {\n      rationale.querySelector(\".flag\").setAttribute(\"data-flagged\", \"\");\n      rationale.querySelectorAll(\".star\").forEach((star, i) => {\n        star.removeAttribute(\"data-starred\");\n      });\n    } else {\n      rationale.querySelector(\".flag\").removeAttribute(\"data-flagged\");\n      rationale.querySelectorAll(\".star\").forEach((star, i) => {\n        if (3 - i <= evaluation_) {\n          star.setAttribute(\"data-starred\", \"\");\n        } else {\n          star.removeAttribute(\"data-starred\");\n        }\n      });\n    }\n  }\n}\n\nasync function flagRationale(flag) {\n  const rationale = flag.parentNode.parentNode;\n  const data = {\n    id: flag.parentNode.parentNode.getAttribute(\"data-id\"),\n    score: 0,\n    redirect: false,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.evaluateRationale, req);\n  if (resp.ok) {\n    flag.setAttribute(\"data-flagged\", \"\");\n    rationale.setAttribute(\"data-score\", \"0\");\n  }\n  updateRationaleEvaluationAttributes(rationale);\n  rationaleEvaluationView();\n}\n\nasync function evaluateRationale(star, score) {\n  const rationale = star.parentNode.parentNode;\n  const data = {\n    id: star.parentNode.parentNode.getAttribute(\"data-id\"),\n    score: score,\n    redirect: false,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.evaluateRationale, req);\n  if (resp.ok) {\n    flag.setAttribute(\"data-flagged\", \"\");\n    rationale.setAttribute(\"data-score\", `${score}`);\n  }\n  updateRationaleEvaluationAttributes(rationale);\n  rationaleEvaluationView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  rationaleEvaluationView();\n}\n\nfunction rationaleEvaluationView() {\n  document\n    .querySelectorAll(\".custom-report__rationale__evaluation\")\n    .forEach(rationale => {\n      toggleFlagHover(rationale.querySelector(\".flag\"));\n      rationale\n        .querySelectorAll(\".star\")\n        .forEach(star => toggleStarHover(star));\n    });\n}\n\nfunction toggleFlagHover(flag, hovering = false) {\n  if (hovering || flag.hasAttribute(\"data-flagged\")) {\n    flag.textContent = \"flag\";\n  } else {\n    flag.textContent = \"outlined_flag\";\n  }\n}\n\nfunction toggleStarHover(star, hovering = false) {\n  const stars = [...star.parentNode.getElementsByClassName(\"star\")];\n  const idx = stars.indexOf(star);\n  stars.forEach((star, i) => {\n    if (star.hasAttribute(\"data-starred\") || (hovering && i >= idx)) {\n      star.textContent = \"star\";\n    } else {\n      star.textContent = \"star_border\";\n    }\n  });\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners() {\n  addFlagListeners();\n  addEvaluateListeners();\n}\n\nfunction addFlagListeners() {\n  document\n    .querySelectorAll(\".custom-report__rationale__evaluation .flag\")\n    .forEach(flag => {\n      flag.addEventListener(\"mouseenter\", () => toggleFlagHover(flag, true));\n      flag.addEventListener(\"mouseleave\", () => toggleFlagHover(flag, false));\n      flag.addEventListener(\"click\", () => flagRationale(flag));\n    });\n}\n\nfunction addEvaluateListeners() {\n  document\n    .querySelectorAll(\".custom-report__rationale__evaluation\")\n    .forEach(rationale => {\n      rationale.querySelectorAll(\".star\").forEach((star, i) => {\n        star.addEventListener(\"mouseenter\", () => toggleStarHover(star, true));\n        star.addEventListener(\"mouseleave\", () =>\n          toggleStarHover(star, false),\n        );\n        star.addEventListener(\"click\", () => evaluateRationale(star, 3 - i));\n      });\n    });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls) {\n  initModel(urls);\n  update();\n  view();\n  initListeners();\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n\nexport function createElement(tag, text = \"\", attributes = {}) {\n  const elem = document.createElement(tag);\n  if (text) {\n    elem.textContent = text;\n  }\n  Object.entries(attributes).forEach(([key, val]) => {\n    elem.setAttribute(key, val);\n  });\n  return elem;\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  const header = document.querySelector(\".notifications\");\n  document.querySelectorAll(\".header--togglable > *\").forEach(header_ => {\n    if (header_ != header && header_.hasAttribute(\"open\")) {\n      if (header_.shadowRoot) {\n        header_.shadowRoot\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      } else {\n        header_\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      }\n    }\n  });\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\nfunction clearAll(): void {\n  model.notifications.forEach(notification => {\n    notification.onCloseClick();\n  });\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n    document\n      .querySelector(\".notifications__clear-all-btn\")\n      .removeAttribute(\"hidden\");\n  } else {\n    notificationsList.appendChild(noNotificationView());\n    document\n      .querySelector(\".notifications__clear-all-btn\")\n      .setAttribute(\"hidden\", \"\");\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.setAttribute(\"open\", \"\");\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.removeAttribute(\"open\");\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.innerHTML = notification.text;\n  div.appendChild(description);\n  const remove = createSvg(\"close\");\n  remove.classList.add(\"notification__close\");\n  remove.addEventListener(\"click\", notification.onCloseClick);\n  div.appendChild(remove);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n  addClearAllListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\nfunction addClearAllListener(): void {\n  document\n    .querySelector(\".notifications__clear-all-btn\")\n    ?.addEventListener(\"click\", () => clearAll());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  const header = document.querySelector(\".messages\");\n  document.querySelectorAll(\".header--togglable > *\").forEach(header_ => {\n    if (header_ != header && header_.hasAttribute(\"open\")) {\n      if (header_.shadowRoot) {\n        header_.shadowRoot\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      } else {\n        header_\n          .querySelector(\".header__icon\")\n          .dispatchEvent(new Event(\"click\"));\n      }\n    }\n  });\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n          date: message.last_reply.date,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  document.querySelector(\".messages__read-all-btn\").classList.add(\"hidden\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    document\n      .querySelector(\".messages__read-all-btn\")\n      .classList.remove(\"hidden\");\n  }\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.setAttribute(\"open\", \"\");\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.removeAttribute(\"open\");\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"div\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = \"New!\";\n    div.appendChild(new_);\n  }\n\n  if (message.lastReply.author) {\n    const lastReply = document.createElement(\"div\");\n    lastReply.classList.add(\"message__last-reply\");\n    div.appendChild(lastReply);\n\n    const content = document.createElement(\"span\");\n    content.classList.add(\"message__last-reply__content\");\n    content.textContent = message.lastReply.content;\n    lastReply.appendChild(content);\n\n    const author = document.createElement(\"div\");\n    author.classList.add(\"message__last-reply__author\");\n    author.innerHTML =\n      message.lastReply.author + \" &middot; \" + message.lastReply.date;\n\n    if (message.nNew) {\n      const markReadBtn = document.createElement(\"span\");\n      markReadBtn.classList.add(\"message__mark-read\");\n      markReadBtn.textContent = \"clear\";\n      markReadBtn.title = \"Mark read\";\n      markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n        markRead(event, message, div),\n      );\n      author.appendChild(markReadBtn);\n    }\n\n    lastReply.appendChild(author);\n  }\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","\"use strict\";\nimport { buildReq } from \"../../ajax.js\";\nimport { clear } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(\n  flagQuestionUrl,\n  getFlagQuestionReasonsUrl,\n  getNewQuestionUrl,\n  toggleFavouriteUrl,\n) {\n  model = {\n    flagQuestionReasons: [],\n    urls: {\n      flagQuestion: flagQuestionUrl,\n      getFlagQuestionReasons: getFlagQuestionReasonsUrl,\n      getNewQuestion: getNewQuestionUrl,\n      toggleFavourite: toggleFavouriteUrl,\n    },\n  };\n}\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getFlagQuestionReasons();\n}\n\nfunction toggleFlagQuestion(question) {\n  const open = question.getAttribute(\"open\");\n  const id = question.getAttribute(\"data-id\");\n  const form = question.querySelector(\".flag-question__form\");\n  const icon = question.querySelector(\".flag-question__btn\");\n\n  if (id === null) {\n    console.log(\n      \"The flag question div needs a `data-id` attribute representing the \" +\n        \"question pk.\",\n    );\n  }\n\n  if (open === null) {\n    question.setAttribute(\"open\", \"\");\n    form.removeAttribute(\"hidden\");\n    icon.textContent = \"flag\";\n  } else {\n    question.removeAttribute(\"open\");\n    form.setAttribute(\"hidden\", \"\");\n    icon.textContent = \"outlined_flag\";\n  }\n}\n\nasync function getFlagQuestionReasons() {\n  const req = buildReq({}, \"get\");\n  const resp = await fetch(model.urls.getFlagQuestionReasons, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  const data = await resp.json();\n  model.flagQuestionReasons = data.reasons;\n  flagQuestionView();\n}\n\nasync function flagQuestion(question) {\n  const id = question.getAttribute(\"data-id\");\n  const select = question.querySelector(\".flag-question__form__select\");\n  const reason = select.options[select.selectedIndex].value;\n\n  const data = {\n    id: id,\n    reason: reason,\n  };\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.flagQuestion, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  toggleFlagQuestion(question);\n  await getNewQuestion(question.parentNode.parentNode.parentNode);\n}\n\nasync function getNewQuestion(question) {\n  const posting = $.get(model.urls.getNewQuestion);\n  posting.done(data => {\n    $(question).toggle(\"fade\", () => {\n      $(question).remove();\n      $(\"#questions\").append(data);\n      $(\"#questions .mdc-card\")\n        .hide()\n        .toggle(\"slide\", transition);\n      initNewCard(model.urls.toggleFavourite, model.urls.getNewQuestion);\n      window.location.href = \"#questions\";\n    });\n  });\n  posting.fail(() => {\n    x.innerHTML = \"error\"; // Add snack bar?\n    window.setTimeout(() => {\n      x.innerHTML = \"autorenew\";\n    }, 5000);\n  });\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  flagQuestionView();\n}\n\nfunction flagQuestionView() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    const select = question.querySelector(\".flag-question__form select\");\n    clear(select);\n    model.flagQuestionReasons.forEach(reason => {\n      const option = document.createElement(\"option\");\n      option.classList.add(\"flag-question__form__option\");\n      option.value = reason;\n      option.textContent = reason;\n      select.appendChild(option);\n    });\n  });\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction addFlagQuestionListeners() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    question\n      .querySelector(\".flag-question__close\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__btn\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"submit\", event => {\n        event.preventDefault();\n        flagQuestion(question);\n      });\n    document.body.addEventListener(\"click\", () => {\n      if (question.hasAttribute(\"open\")) {\n        toggleFlagQuestion(question);\n      }\n    });\n  });\n}\n\n/********/\n/* init */\n/********/\n\nfunction initNewCard(favUrl, refreshUrl) {\n  $(\"#questions .mdc-card\").each((i, el) => {\n    if (el.getAttribute(\"initialized\") !== \"true\") {\n      el.setAttribute(\"initialized\", \"true\");\n\n      $(el)\n        .find(\".mdc-icon-toggle.favourite-btn\")\n        .each((i, heart) => {\n          bundle.iconToggle.MDCIconToggle.attachTo(heart);\n          heart.addEventListener(\"click\", () => {\n            const posting = $.post(favUrl, {\n              pk: heart.getAttribute(\"data-id\"),\n            });\n            posting.done(data => {\n              console.log(data);\n            });\n          });\n        });\n\n      $(el)\n        .find(\".remove-btn\")\n        .each((i, x) => {\n          x.addEventListener(\"click\", () => {\n            const posting = $.get(refreshUrl);\n            posting.done(data => {\n              $(el).toggle(\"fade\", () => {\n                $(el).remove();\n                $(\"#questions\").append(data);\n                $(\"#questions .mdc-card\")\n                  .hide()\n                  .toggle(\"slide\", transition);\n                initNewCard(favUrl, refreshUrl);\n                window.location.href = \"#questions\";\n              });\n            });\n            posting.fail(() => {\n              x.innerHTML = \"error\"; // Add snack bar?\n              window.setTimeout(() => {\n                x.innerHTML = \"autorenew\";\n              }, 5000);\n            });\n          });\n        });\n    }\n  });\n  addFlagQuestionListeners();\n  view();\n}\n\nexport async function init(\n  favUrl,\n  refreshUrl,\n  getFlagQuestionReasonsUrl,\n  flagQuestionUrl,\n) {\n  initModel(flagQuestionUrl, getFlagQuestionReasonsUrl, refreshUrl, favUrl);\n  initNewCard(favUrl, refreshUrl);\n  update();\n}\n","\"use strict\";\n\nexport function init(data) {\n  function draw() {\n    $(\".progress-chart\").each((i, el) => {\n      const dataset =\n        data[el.getAttribute(\"group\")][el.getAttribute(\"assignment\")];\n      bundle.plotTimeSeries(el, dataset);\n    });\n  }\n  draw();\n  window.addEventListener(\"resize\", draw);\n}\n","\"use strict\";\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\nexport function init(url) {\n  // Rating system\n  $(\"#rationales .mdc-card\").each((i, el) => {\n    const id = el.getAttribute(\"data-id\");\n    let score;\n\n    // Score\n    $(el)\n      .find(\".star\")\n      .each((i, star) => {\n        // Handle hover\n        star.addEventListener(\"mouseover\", () => {\n          score = star.getAttribute(\"data-rank\");\n          $(\".star\").each((i, _star) => {\n            if (_star.getAttribute(\"data-rank\") <= score) {\n              _star.innerHTML = \"star\";\n            } else {\n              _star.innerHTML = \"star_border\";\n            }\n          });\n        });\n        star.addEventListener(\"mouseout\", () => {\n          $(\".star\").each((i, _star) => {\n            _star.innerHTML = \"star_border\";\n          });\n        });\n\n        // Submit score\n        $(star).one(\"click\", () => {\n          const posting = $.post(url, { id: id, score: score });\n          posting.done(data => {\n            processResponse(data);\n          });\n        });\n      });\n\n    // Flag inappropriate\n    $(el)\n      .find(\".flag\")\n      .each((i, flag) => {\n        flag.addEventListener(\"mouseover\", () => {\n          $(\".flag\").each((i, _flag) => {\n            _flag.innerHTML = \"flag\";\n          });\n        });\n        flag.addEventListener(\"mouseout\", () => {\n          $(\".flag\").each((i, _flag) => {\n            _flag.innerHTML = \"outlined_flag\";\n          });\n        });\n        $(flag).one(\"click\", () => {\n          const posting = $.post(url, { id: id, score: 0 });\n          posting.done(data => {\n            processResponse(data);\n          });\n        });\n      });\n\n    function processResponse(data) {\n      $(el).toggle(\"fade\", () => {\n        $(el).remove();\n        $(\"#rationales\").append(data);\n        $(\"#rationales .mdc-card\")\n          .hide()\n          .toggle(\"slide\", transition);\n        init(url);\n        // Refresh reputation score\n        document\n          .getElementsByTagName(\"teacher-reputation-header\")[0]\n          .setAttribute(\"stale\", \"\");\n      });\n    }\n  });\n}\n","\"use strict\";\nimport { buildReq } from \"../ajax.js\";\nimport { clear } from \"../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(\n  flagQuestionUrl,\n  getFlagQuestionReasonsUrl,\n) {\n  model = {\n    flagQuestionReasons: [],\n    urls: {\n      flagQuestion: flagQuestionUrl,\n      getFlagQuestionReasons: getFlagQuestionReasonsUrl,\n    },\n  };\n  getFlagQuestionReasons();\n}\n\nfunction toggleFlagQuestion(question) {\n  const open = question.getAttribute(\"open\");\n  const id = question.getAttribute(\"data-id\");\n  const form = question.querySelector(\".flag-question__form\");\n  const icon = question.querySelector(\".flag-question__btn\");\n\n  if (id === null) {\n    console.log(\n      \"The flag question div needs a `data-id` attribute representing the \" +\n        \"question pk.\",\n    );\n  }\n\n  if (open === null) {\n    question.setAttribute(\"open\", \"\");\n    form.removeAttribute(\"hidden\");\n    icon.textContent = \"flag\";\n  } else {\n    question.removeAttribute(\"open\");\n    form.setAttribute(\"hidden\", \"\");\n    icon.textContent = \"outlined_flag\";\n  }\n}\n\nasync function getFlagQuestionReasons() {\n  const req = buildReq({}, \"get\");\n  const resp = await fetch(model.urls.getFlagQuestionReasons, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  const data = await resp.json();\n  model.flagQuestionReasons = data.reasons;\n  flagQuestionView();\n}\n\nasync function flagQuestion(question) {\n  const id = question.getAttribute(\"data-id\");\n  const select = question.querySelector(\".flag-question__form__select\");\n  const reason = select.options[select.selectedIndex].value;\n\n  const data = {\n    id: id,\n    reason: reason,\n  };\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.flagQuestion, req);\n  if (!resp.ok) {\n    console.log(resp);\n  }\n  toggleFlagQuestion(question);\n}\n\nfunction flagQuestionView() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    const select = question.querySelector(\".flag-question__form select\");\n    clear(select);\n    model.flagQuestionReasons.forEach(reason => {\n      const option = document.createElement(\"option\");\n      option.classList.add(\"flag-question__form__option\");\n      option.value = reason;\n      option.textContent = reason;\n      select.appendChild(option);\n    });\n  });\n}\n\nfunction addFlagQuestionListeners() {\n  [...document.getElementsByClassName(\"flag-question\")].forEach(question => {\n    question\n      .querySelector(\".flag-question__close\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__btn\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n        toggleFlagQuestion(question);\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"click\", event => {\n        event.stopPropagation();\n      });\n    question\n      .querySelector(\".flag-question__form\")\n      .addEventListener(\"submit\", event => {\n        event.preventDefault();\n        flagQuestion(question);\n      });\n    document.body.addEventListener(\"click\", () => {\n      if (question.hasAttribute(\"open\")) {\n        toggleFlagQuestion(question);\n      }\n    });\n  });\n}\n\nexport async function init(\n  getFlagQuestionReasonsUrl,\n  flagQuestionUrl,\n) {\n  await initModel(flagQuestionUrl, getFlagQuestionReasonsUrl);\n  addFlagQuestionListeners();\n}\n","\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initCustomReport } from \"./_teacher/custom_report.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n\nexport { init as initQuestionCards } from \"./_teacher/dashboard/questions.js\";\nexport {\n  init as initStudentActivityCards,\n} from \"./_teacher/dashboard/studentActivity.js\";\nexport {\n  init as initRationalesToScoreCards,\n} from \"./_teacher/dashboard/rationales.js\";\n\nexport { init as initSearchFlag } from \"./_teacher/questions.js\";\n"],"names":["getCsrfToken","console","log","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","model","initModel","urls","daliteMessages","removeDaliteMessage","saltiseImage","messages","update","getMessages","req","resp","fetch","json","map","message","id","title","text","colour","removable","date","link","authors","author","name","picture","removeMessage","div","ok","removeMessageView","view","messagesView","querySelector","length","classList","remove","forEach","appendChild","messageView","container","createElement","add","content","addEventListener","window","location","assign","style","setProperty","textContent","caption","innerHTML","actions","images","authorsContainer","img","setAttribute","buttons","node","parentNode","childElementCount","init","initMessages","dalite_messages","remove_dalite_message","saltise_image","evaluateRationale","updateRationalesEvaluationAttributes","querySelectorAll","rationale","updateRationaleEvaluationAttributes","evaluation","evaluation_","parseInt","star","i","removeAttribute","flagRationale","flag","score","redirect","rationaleEvaluationView","toggleFlagHover","toggleStarHover","hovering","hasAttribute","stars","getElementsByClassName","idx","indexOf","initListeners","addFlagListeners","addEvaluateListeners","clear","hasChildNodes","removeChild","lastChild","createSvg","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","protocol","host","notificationsOpen","notifications","toggleNotifications","header","header_","shadowRoot","dispatchEvent","Event","notificationsView","updateNotifications","clearAll","notification","onCloseClick","badge","notificationsList","completedNotifications","filter","inProgress","toString","display","notificationView","noNotificationView","some","onClick","spinner","icon","error","description","initEventListeners","addNotificationsOpenListener","addClearAllListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","task_id","resolve","removeGradebookError","t","href","escape","target","download","click","undefined","addGradebookListeners","open","toggleMessages","messagesUrl","threads","lastReply","last_reply","nNew","n_new","markAllRead","markReadUrl","markRead","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener","flagQuestionUrl","getFlagQuestionReasonsUrl","getNewQuestionUrl","toggleFavouriteUrl","flagQuestionReasons","flagQuestion","getFlagQuestionReasons","getNewQuestion","toggleFavourite","transition","duration","direction","easing","toggleFlagQuestion","question","form","reasons","flagQuestionView","select","reason","options","selectedIndex","value","posting","$","get","done","toggle","hide","initNewCard","fail","x","option","addFlagQuestionListeners","preventDefault","favUrl","refreshUrl","each","el","find","heart","bundle","iconToggle","MDCIconToggle","attachTo","post","pk","draw","dataset","plotTimeSeries","_star","one","processResponse","_flag","getElementsByTagName"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["// @flow\n\n/*********/\n/* model */\n/*********/\n\ntype InitData = {};\n\n/**********/\n/* update */\n/**********/\n\n/********/\n/* view */\n/********/\n\n/********/\n/* init */\n/********/\n\nexport async function init(data: InitData) {}\n","// @flow\nimport { init as initMessages } from \"./dashboard/messages.js\";\n\ntype InitData = {};\n\n/********/\n/* init */\n/********/\n\nexport async function init(data: InitData) {\n  initMessages({});\n}\n","\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  const icon = createSvg(\"chat_bubble\");\n  icon.classList.add(\"message__icon\");\n  div.appendChild(icon);\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"span\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = `( ${message.nNew} new )`;\n    div.appendChild(new_);\n  }\n\n  const title = document.createElement(\"span\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    const markReadBtn = document.createElement(\"span\");\n    markReadBtn.classList.add(\"message__mark-read\");\n    markReadBtn.textContent = \"Mark read\";\n    markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n      markRead(event, message, div),\n    );\n    div.appendChild(markReadBtn);\n  }\n\n  const lastReply = document.createElement(\"div\");\n  lastReply.classList.add(\"message__last-reply\");\n  div.appendChild(lastReply);\n\n  const author = document.createElement(\"span\");\n  author.classList.add(\"message__last-reply__author\");\n  author.textContent = message.lastReply.author;\n  lastReply.appendChild(author);\n\n  const content = document.createElement(\"span\");\n  content.classList.add(\"message__last-reply__content\");\n  content.textContent = message.lastReply.content;\n  lastReply.appendChild(content);\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","// @flow\n\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n"],"names":["init","data","initMessages","getCsrfToken","document","getElementsByName","getAttribute","buildReq","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","clear","node","hasChildNodes","removeChild","lastChild","createSvg","name","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","window","location","protocol","host","model","initModel","notificationsOpen","notifications","toggleNotifications","notificationsView","updateNotifications","view","querySelector","badge","notificationsList","completedNotifications","filter","notification","inProgress","length","textContent","toString","style","display","map","appendChild","notificationView","noNotificationView","some","classList","add","remove","div","createElement","addEventListener","onClick","spinner","icon","error","onCloseClick","description","text","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","urls","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","update","getTasks","url","req","fetch","then","resp","json","initTasks","task","id","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","title","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","console","log","task_id","resolve","removeGradebookError","ok","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","forEach","open","messages","getMessages","toggleMessages","messagesView","messagesUrl","threads","message","lastReply","author","last_reply","content","nNew","n_new","link","markAllRead","markReadUrl","markRead","messageView","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
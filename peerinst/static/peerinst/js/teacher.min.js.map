{"version":3,"file":"teacher.min.js","sources":["peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/_teacher/dashboard/messages.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/_teacher/dashboard/questions.js","peerinst/static/peerinst/js/_teacher/dashboard/studentActivity.js","peerinst/static/peerinst/js/_teacher/dashboard/rationales.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","import { buildReq } from \"../../ajax.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(data) {\n  model = {\n    urls: {\n      daliteMessages: data.urls.daliteMessages,\n      removeDaliteMessage: data.urls.removeDaliteMessage,\n      saltiseImage: data.urls.saltiseImage,\n    },\n    messages: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getMessages();\n}\n\nasync function getMessages() {\n  const req = buildReq({}, \"post\");\n\n  const resp = await fetch(model.urls.daliteMessages, req);\n  const data = await resp.json();\n  model.messages = data.messages.map(message => ({\n    id: message.id,\n    title: message.title,\n    text: message.text,\n    colour: message.colour,\n    removable: message.removable,\n    date: message.date,\n    link: message.link,\n    authors: message.authors.map(author => ({\n      name: author.name,\n      picture: author.picture,\n    })),\n  }));\n  console.log(model);\n}\n\nasync function removeMessage(message, div) {\n  const data = {\n    id: message.id,\n  };\n  const req = buildReq(data, \"post\");\n\n  const resp = await fetch(model.urls.removeDaliteMessage, req);\n  if (resp.ok) {\n    removeMessageView(div);\n  }\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  messagesView();\n}\n\nfunction messagesView() {\n  const messages = document.querySelector(\"#dalite-messages\");\n  model.messages.forEach(message => {\n    messages.appendChild(messageView(message));\n  });\n}\n\nfunction messageView(message) {\n  const container = document.createElement(\"div\");\n  container.classList.add(\"mdc-card\");\n\n  const content = document.createElement(\"div\");\n  if (message.link) {\n    content.addEventListener(\"click\", () => {\n      window.location.assign(message.link);\n    });\n    content.style.setProperty(\"cursor\", \"pointer\");\n    content.title = message.link;\n  }\n\n  const title = document.createElement(\"div\");\n  title.classList.add(\"mdc-typography--title\", \"bold\");\n  title.textContent = message.title;\n  content.appendChild(title);\n\n  const caption = document.createElement(\"div\");\n  caption.classList.add(\"mdc-typography--caption\");\n  caption.textContent = message.date;\n  content.appendChild(caption);\n\n  const text = document.createElement(\"div\");\n  text.classList.add(\"mdc-typography--body1\");\n  text.innerHTML = message.text;\n  content.appendChild(text);\n\n  container.appendChild(content);\n\n  const actions = document.createElement(\"div\");\n  actions.classList.add(\"mdc-card__actions\");\n\n  const images = document.createElement(\"div\");\n  images.classList.add(\"mdc-card__action-buttons\");\n  if (message.authors.length) {\n    const authorsContainer = document.createElement(\"div\");\n    authorsContainer.classList.add(\"dalite-message__authors\");\n    message.authors.forEach(author => {\n      const img = document.createElement(\"img\");\n      img.classList.add(\"dalite-message__authors_author\");\n      img.title = author.name;\n      img.setAttribute(\n        \"src\",\n        author.picture ? author.picture : model.urls.saltiseImage,\n      );\n      img.setAttribute(\"alt\", `Picture of ${author.name}`);\n      authorsContainer.appendChild(img);\n    });\n    images.appendChild(authorsContainer);\n  }\n  actions.appendChild(images);\n\n  if (message.removable) {\n    const buttons = document.createElement(\"div\");\n    buttons.classList.add(\"mdc-card__action-icons\");\n    const remove = document.createElement(\"i\");\n    remove.classList.add(\n      \"mdc-icon-toggle\",\n      \"material-icons\",\n      \"mdc-theme--primary\",\n    );\n    remove.textContent = \"clear\";\n    remove.addEventListener(\"click\", async () => {\n      await removeMessage(message, container);\n    });\n    buttons.appendChild(remove);\n    actions.appendChild(buttons);\n  }\n\n  container.appendChild(actions);\n  container.style.setProperty(\"background-color\", message.colour);\n\n  return container;\n}\n\nfunction removeMessageView(node) {\n  if (node.parentNode.childElementCount == 3) {\n    node.parentNode.remove();\n  } else {\n    node.remove();\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initModel(data);\n  await update();\n  view();\n}\n","import { init as initMessages } from \"./dashboard/messages.js\";\n\n/********/\n/* init */\n/********/\n\nexport async function init(data) {\n  initMessages({\n    urls: {\n      daliteMessages: data.urls.dalite_messages,\n      removeDaliteMessage: data.urls.remove_dalite_message,\n      saltiseImage: data.urls.saltise_image,\n    },\n  });\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  const icon = createSvg(\"chat_bubble\");\n  icon.classList.add(\"message__icon\");\n  div.appendChild(icon);\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"span\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = `( ${message.nNew} new )`;\n    div.appendChild(new_);\n  }\n\n  const title = document.createElement(\"span\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    const markReadBtn = document.createElement(\"span\");\n    markReadBtn.classList.add(\"message__mark-read\");\n    markReadBtn.textContent = \"Mark read\";\n    markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n      markRead(event, message, div),\n    );\n    div.appendChild(markReadBtn);\n  }\n\n  if (message.lastReply.author) {\n    const lastReply = document.createElement(\"div\");\n    lastReply.classList.add(\"message__last-reply\");\n    div.appendChild(lastReply);\n\n    const author = document.createElement(\"span\");\n    author.classList.add(\"message__last-reply__author\");\n    author.textContent = message.lastReply.author;\n    lastReply.appendChild(author);\n\n    const content = document.createElement(\"span\");\n    content.classList.add(\"message__last-reply__content\");\n    content.textContent = message.lastReply.content;\n    lastReply.appendChild(content);\n  }\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","\"use strict\";\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\nexport function init(favUrl, refreshUrl) {\n  $(\"#questions .mdc-card\").each((i, el) => {\n    if (el.getAttribute(\"initialized\") !== \"true\") {\n      el.setAttribute(\"initialized\", \"true\");\n\n      $(el)\n        .find(\".mdc-icon-toggle.favourite-btn\")\n        .each((i, heart) => {\n          bundle.iconToggle.MDCIconToggle.attachTo(heart);\n          heart.addEventListener(\"click\", () => {\n            const posting = $.post(favUrl, {\n              pk: heart.getAttribute(\"data-id\"),\n            });\n            posting.done(data => {\n              console.log(data);\n            });\n          });\n        });\n\n      $(el)\n        .find(\".remove-btn\")\n        .each((i, x) => {\n          x.addEventListener(\"click\", () => {\n            const posting = $.get(refreshUrl);\n            posting.done(data => {\n              $(el).toggle(\"fade\", () => {\n                $(el).remove();\n                $(\"#questions\").append(data);\n                $(\"#questions .mdc-card\")\n                  .hide()\n                  .toggle(\"slide\", transition);\n                init(favUrl, refreshUrl);\n                window.location.href = \"#questions\";\n              });\n            });\n            posting.fail(() => {\n              x.innerHTML = \"error\"; // Add snack bar?\n              window.setTimeout(() => {\n                x.innerHTML = \"autorenew\";\n              }, 5000);\n            });\n          });\n        });\n    }\n  });\n}\n","\"use strict\";\n\nexport function init(data) {\n  function draw() {\n    $(\".progress-chart\").each((i, el) => {\n      const dataset =\n        data[el.getAttribute(\"group\")][el.getAttribute(\"assignment\")];\n      bundle.plotTimeSeries(el, dataset);\n    });\n  }\n  draw();\n  window.addEventListener(\"resize\", draw);\n}\n","\"use strict\";\n\nconst transition = {\n  duration: 600,\n  direction: \"right\",\n  easing: \"easeInOutCubic\",\n};\n\nexport function init(url) {\n  // Rating system\n  $(\"#rationales .mdc-card\").each((i, el) => {\n    const id = el.getAttribute(\"data-id\");\n    const submitBtn = document.getElementById(\"submit-score-btn\");\n    let score;\n\n    $(\".star\").each((i, star) => {\n      star.addEventListener(\"click\", () => {\n        submitBtn.removeAttribute(\"disabled\");\n        score = star.getAttribute(\"data-rank\");\n        $(\".star\").each((i, _star) => {\n          if (_star.getAttribute(\"data-rank\") <= score) {\n            _star.innerHTML = \"star\";\n          } else {\n            _star.innerHTML = \"star_border\";\n          }\n        });\n      });\n    });\n\n    // Submit score\n    submitBtn.addEventListener(\"click\", () => {\n      const posting = $.post(url, { id: id, score: score });\n      posting.done(data => {\n        processResponse(data);\n      });\n    });\n\n    // Flag inappropriate\n    const flagBtn = document.getElementById(\"submit-flag-btn\");\n    flagBtn.addEventListener(\"click\", () => {\n      const posting = $.post(url, { id: id, score: 0 });\n      posting.done(data => {\n        processResponse(data);\n      });\n    });\n\n    function processResponse(data) {\n      $(el).toggle(\"fade\", () => {\n        $(el).remove();\n        $(\"#rationales\").append(data);\n        $(\"#rationales .mdc-card\")\n          .hide()\n          .toggle(\"slide\", transition);\n        init(url);\n        // Refresh reputation score\n        document\n          .getElementsByTagName(\"teacher-reputation-header\")[0]\n          .setAttribute(\"stale\", \"\");\n      });\n    }\n  });\n}\n","\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n\nexport { init as initQuestionCards } from \"./_teacher/dashboard/questions.js\";\nexport {\n  init as initStudentActivityCards,\n} from \"./_teacher/dashboard/studentActivity.js\";\nexport {\n  init as initRationalesToScoreCards,\n} from \"./_teacher/dashboard/rationales.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","model","initModel","urls","daliteMessages","removeDaliteMessage","saltiseImage","messages","update","getMessages","req","resp","fetch","json","map","message","id","title","text","colour","removable","date","link","authors","author","name","picture","console","log","removeMessage","div","ok","removeMessageView","view","messagesView","querySelector","forEach","appendChild","messageView","container","createElement","classList","add","content","addEventListener","window","location","assign","style","setProperty","textContent","caption","innerHTML","actions","images","length","authorsContainer","img","setAttribute","buttons","remove","node","parentNode","childElementCount","init","initMessages","dalite_messages","remove_dalite_message","saltise_image","clear","hasChildNodes","removeChild","lastChild","createSvg","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","protocol","host","notificationsOpen","notifications","toggleNotifications","notificationsView","updateNotifications","badge","notificationsList","completedNotifications","filter","notification","inProgress","toString","display","notificationView","noNotificationView","some","onClick","spinner","icon","error","onCloseClick","description","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","task_id","resolve","removeGradebookError","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","open","toggleMessages","messagesUrl","threads","lastReply","last_reply","nNew","n_new","markAllRead","markReadUrl","markRead","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener","transition","duration","direction","easing","favUrl","refreshUrl","$","each","i","el","find","heart","bundle","iconToggle","MDCIconToggle","attachTo","posting","post","pk","done","x","get","toggle","hide","fail","draw","dataset","plotTimeSeries","submitBtn","getElementById","score","star","removeAttribute","_star","processResponse","flagBtn","getElementsByTagName"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
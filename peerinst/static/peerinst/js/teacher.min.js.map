{"version":3,"file":"teacher.min.js","sources":["dalite/static/js/ajax.js","peerinst/static/peerinst/js/_teacher/dashboard.js","peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_teacher/header/notifications.js","peerinst/static/peerinst/js/_teacher/gradebooks.js","peerinst/static/peerinst/js/_teacher/header/messages.js","peerinst/static/peerinst/js/teacher.js"],"sourcesContent":["export function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","// @flow\nimport { buildReq } from \"../../../../../dalite/static/js/ajax.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype InitData = {\n  urls: { collections: string, rationales: string },\n};\n\ntype Collection = {\n  title: string,\n  description: string,\n  discipline: string,\n  nAssignments: number,\n  nFollowers: number,\n};\n\ntype Rationale = {\n  title: string,\n  description: string,\n  answer: string,\n  score: number,\n  annotator: number,\n};\n\nlet model: {\n  collections: Array<Collection>,\n  rationales: Array<Rationale>,\n  urls: {\n    collections: string,\n    rationales: string,\n  },\n};\n\nfunction initModel(data: InitData) {\n  model = {\n    collections: [],\n    rationales: [],\n    urls: {\n      collections: data.urls.collections,\n      rationales: data.urls.rationales,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nasync function update() {\n  await getCollections();\n  await getRationales();\n}\n\nasync function getCollections() {\n  const data = {};\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.collections, req);\n  const json = await resp.json();\n  model.collections = json.collections.map(collection => ({\n    title: collection.title,\n    description: collection.description,\n    discipline: collection.discipline,\n    nAssignments: collection.n_assignments,\n    nFollowers: collection.n_followers,\n  }));\n  collectionsView();\n}\n\nasync function getRationales() {\n  const data = {};\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(model.urls.rationales, req);\n  const json = await resp.json();\n  model.rationales = json.rationales.map(rationale => ({\n    qTitle: rationale.title,\n    rationale: rationale.rationale,\n    choice: rationale.choice,\n    choiceText: rationale.text,\n    correct: rationale.correct,\n  }));\n  rationalesView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction collectionsView() {\n  const section = document.querySelector(\".collections\");\n  if (!section) {\n    throw new Error(\"There is a missing section with class `collections`\");\n  }\n  if (model.collections.length) {\n    section.classList.remove(\"collections--hidden\");\n  } else {\n    section.classList.add(\"collections--hidden\");\n  }\n}\n\nfunction rationalesView() {\n  const section = document.querySelector(\".rationales\");\n  if (!section) {\n    throw new Error(\"There is a missing section with class `rationales`\");\n  }\n  if (model.rationales.length) {\n    section.classList.remove(\"rationales--hidden\");\n  } else {\n    section.classList.add(\"rationales--hidden\");\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport async function init(data: InitData) {\n  initModel(data);\n  await update();\n}\n","\"use strict\";\n\nexport function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n\nexport function updateAssignmentQuestionList(\n  url,\n  questionId,\n  assignmentIdentifier,\n) {\n  const token = getCsrfToken();\n  const data = {\n    question_id: questionId,\n    assignment_identifier: assignmentIdentifier,\n  };\n  const req = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"X-CSRFToken\": token,\n    },\n  };\n  fetch(url, req)\n    .then(function(resp) {\n      if (!resp.ok) {\n        console.log(resp);\n      } else {\n        // Manipulate DOM\n        const list = document.getElementById(\"question-list\");\n        const card = document.getElementById(questionId);\n        if ($.contains(list, card)) {\n          $(\"#\" + questionId).remove();\n        } else {\n          $(\"#\" + questionId)\n            .find($(\".update-questions-btn\"))\n            .html(\"delete\");\n          const q = $(\"#\" + questionId).detach();\n          q.appendTo($(\"#question-list\"));\n          $(\"#empty-assignment-list\").remove();\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count\")\n              .empty()\n              .append($(this).find(\".mdc-card:visible\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n          $(\".search-set\").each(function() {\n            $(this) // eslint-disable-line no-invalid-this\n              .find(\".filter-count-total\")\n              .empty()\n              .append($(this).find(\".mdc-card\").length); // eslint-disable-line no-invalid-this,max-len\n          });\n        }\n      }\n    })\n    .catch(function(err) {\n      console.log(err);\n    });\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    svgLink(name, useSprite),\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function svgLink(name: string, useSprite: boolean = true): string {\n  if (useSprite) {\n    return `#${name}`;\n  } else {\n    return (\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name\n    );\n  }\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","// @flow\n\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nexport type Notification = {\n  text: string,\n  inProgress: boolean,\n  error: boolean,\n  onClick: () => Promise<void>,\n  onCloseClick: () => Promise<void>,\n};\n\nlet model: {\n  notificationsOpen: boolean,\n  notifications: Array<Notification>,\n};\n\nfunction initModel(): void {\n  model = {\n    notificationsOpen: false,\n    notifications: [],\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction toggleNotifications(): void {\n  model.notificationsOpen = !model.notificationsOpen;\n  notificationsView();\n}\n\nexport function updateNotifications(notifications: Array<Notification>): void {\n  model.notifications = notifications;\n  notificationsView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  notificationsView();\n}\n\nfunction notificationsView(): void {\n  const notifications = document.querySelector(\".notifications\");\n  const badge = notifications?.querySelector(\".notifications__icon__badge\");\n  const notificationsList = notifications?.querySelector(\n    \".notifications__notifications\",\n  );\n\n  if (!notifications || !badge || !notificationsList) {\n    return;\n  }\n\n  const completedNotifications = model.notifications.filter(\n    notification => !notification.inProgress,\n  );\n  if (completedNotifications.length > 0) {\n    badge.textContent = completedNotifications.length.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n\n  clear(notificationsList);\n\n  if (model.notifications.length) {\n    model.notifications.map(function(notification) {\n      notificationsList.appendChild(notificationView(notification));\n    });\n  } else {\n    notificationsList.appendChild(noNotificationView());\n  }\n\n  if (model.notifications.some(notification => notification.inProgress)) {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.add(\"notifications__spinner--loading\");\n  } else {\n    document\n      .querySelector(\".notifications__spinner\")\n      ?.classList.remove(\"notifications__spinner--loading\");\n  }\n\n  if (model.notificationsOpen) {\n    notifications.classList.add(\"notifications--open\");\n  } else {\n    notifications.classList.remove(\"notifications--open\");\n  }\n}\n\nfunction notificationView(notification: Notification): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.classList.add(\"notification\");\n  div.addEventListener(\"click\", notification.onClick);\n\n  if (notification.inProgress) {\n    const spinner = document.createElement(\"loading-spinner\");\n    spinner.classList.add(\"notification__spinner\");\n    div.appendChild(spinner);\n  } else {\n    let icon;\n    if (notification.error) {\n      icon = createSvg(\"error\");\n      icon.classList.add(\"notification__icon--error\");\n      const remove = createSvg(\"close\");\n      remove.classList.add(\"notification__close\");\n      remove.addEventListener(\"click\", notification.onCloseClick);\n      div.appendChild(remove);\n    } else {\n      div.classList.add(\"notification--completed\");\n      icon = createSvg(\"cloud_download\");\n    }\n    icon.classList.add(\"notification__icon\");\n    div.appendChild(icon);\n  }\n\n  const description = document.createElement(\"span\");\n  description.classList.add(\"notification__description\");\n  description.textContent = notification.text;\n  div.appendChild(description);\n\n  return div;\n}\n\nfunction noNotificationView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No new notifications\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addNotificationsOpenListener();\n}\n\nfunction addNotificationsOpenListener(): void {\n  document\n    .querySelector(\".notifications\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".notifications__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleNotifications();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.notificationsOpen) {\n      event.stopPropagation();\n      toggleNotifications();\n    }\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(): void {\n  initModel();\n  view();\n  initEventListeners();\n}\n","// @flow\nimport { buildReq } from \"../ajax.js\";\nimport { updateNotifications } from \"./header/notifications.js\";\nimport type { Notification } from \"./header/notifications.js\";\n\n/*********/\n/* model */\n/*********/\n\nconst CHECK_EVERY = 1;\n\ntype Task = {\n  id: string,\n  description: string,\n  completed: boolean,\n  datetime: Date,\n  error: boolean,\n};\n\nlet model: {\n  urls: {\n    requestGradebook: string,\n    gradebookResult: string,\n    removeFailedGradebook: string,\n    downloadGradebook: string,\n    tasks: string,\n  },\n  tasks: Array<Task>,\n};\n\nfunction initModel(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  model = {\n    tasks: [],\n    urls: {\n      requestGradebook: urls.requestGradebook,\n      gradebookResult: urls.gradebookResult,\n      removeFailedGradebook: urls.removeFailedGradebook,\n      downloadGradebook: urls.downloadGradebook,\n      tasks: urls.tasks,\n    },\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getTasks();\n}\n\nfunction getTasks(): void {\n  const url = model.urls.tasks;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      initTasks(data.tasks);\n    });\n}\n\nasync function initTasks(\n  data: Array<{\n    id: string,\n    description: string,\n    completed: boolean,\n    datetime: string,\n  }>,\n): Promise<void> {\n  model.tasks = data\n    .map(task => ({\n      id: task.id,\n      description: task.description,\n      completed: task.completed,\n      datetime: new Date(task.datetime),\n      error: false,\n    }))\n    .sort((a, b) =>\n      a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0,\n    );\n  updateNotifications(getNotifications());\n  Promise.all(\n    model.tasks\n      .filter(task => !task.completed)\n      .map(task => getGradebookResult(task)),\n  );\n}\n\nasync function requestGradebook(event: MouseEvent): Promise<void> {\n  event.stopPropagation();\n  const button = event.currentTarget;\n  const groupId = button.getAttribute(\"data-group\");\n  const assignmentId = button.getAttribute(\"data-assignment\");\n\n  const data = {\n    group_id: groupId,\n    assignment_id: assignmentId,\n  };\n\n  const url = model.urls.requestGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.status === 200) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n  } else if (resp.status === 201) {\n    const data = await resp.json();\n    const task = {\n      id: data.id,\n      description: data.description,\n      completed: data.completed,\n      datetime: new Date(data.datetime),\n      error: false,\n    };\n    model.tasks.unshift(task);\n    setTimeout(() => getGradebookResult(task), 0);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nasync function getGradebookResult(task: Task): Promise<void> {\n  const url = model.urls.gradebookResult;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n\n  if (resp.status == 200) {\n    task.completed = true;\n    updateNotifications(getNotifications());\n  } else if (resp.status == 202) {\n    await new Promise(resolve =>\n      setTimeout(() => getGradebookResult(task), CHECK_EVERY * 1000),\n    );\n  } else {\n    task.completed = true;\n    task.error = true;\n    updateNotifications(getNotifications());\n  }\n}\n\nasync function removeGradebookError(task: Task): Promise<void> {\n  const url = model.urls.removeFailedGradebook;\n  const req = buildReq({ task_id: task.id }, \"post\");\n\n  const resp = await fetch(url, req);\n  if (resp.ok) {\n    model.tasks = model.tasks.filter(t => t.id !== task.id);\n  }\n  updateNotifications(getNotifications());\n}\n\nasync function downloadGradebook(task: Task): Promise<void> {\n  const data = {\n    task_id: task.id,\n  };\n  const url = model.urls.downloadGradebook;\n  const req = buildReq(data, \"post\");\n  const resp = await fetch(url, req);\n\n  if (resp.ok) {\n    const data = await resp.text();\n    const title = data.split(\"\\n\")[0];\n    const csv = data\n      .split(\"\\n\")\n      .slice(1)\n      .join(\"\\n\");\n    _downloadGradebook(title, csv);\n    model.tasks = model.tasks.filter(t => t.id != task.id);\n    updateNotifications(getNotifications());\n  } else {\n    console.log(resp);\n  }\n}\n\nfunction _downloadGradebook(title: string, csv: string): void {\n  const a = document.createElement(\"a\");\n  a.href = `data:text/csv;charset=utf-8, ${escape(csv)}`;\n  a.target = \"_blank\";\n  a.download = title;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n}\n\nfunction getNotifications(): Array<Notification> {\n  return model.tasks.map(task => ({\n    text: task.completed\n      ? task.error\n        ? `There was an error creating the gradebook for ${task.description}.`\n        : `The ${task.description} is ready.`\n      : `Computing the ${task.description}...`,\n    inProgress: !task.completed,\n    error: task.error,\n    onClick:\n      task.completed && !task.error\n        ? async () => await downloadGradebook(task)\n        : async () => undefined,\n    onCloseClick: async () => await removeGradebookError(task),\n  }));\n}\n\n/********/\n/* view */\n/********/\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initListeners(): void {\n  addGradebookListeners();\n}\n\nfunction addGradebookListeners(): void {\n  [...document.getElementsByClassName(\"gradebook-button\")].forEach(button => {\n    button.addEventListener(\n      \"click\",\n      async (event: MouseEvent) => await requestGradebook(event),\n    );\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  requestGradebook: string,\n  gradebookResult: string,\n  removeFailedGradebook: string,\n  downloadGradebook: string,\n  tasks: string,\n}): void {\n  initModel(urls);\n  update();\n  initListeners();\n}\n","// @flow\nimport { buildReq } from \"../../ajax.js\";\nimport { clear, createSvg } from \"../../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\ntype Thread = {\n  id: number,\n  title: string,\n  lastReply: {\n    author: string,\n    content: string,\n  },\n  nNew: number,\n  link: string,\n};\n\ntype Message = Thread;\n\nlet model: {\n  open: boolean,\n  messages: Array<Message>,\n  urls: {\n    markReadUrl: string,\n    messagesUrl: string,\n  },\n};\n\nfunction initModel(urls: { markReadUrl: string, messagesUrl: string }): void {\n  model = {\n    open: false,\n    messages: [],\n    urls: urls,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction update(): void {\n  getMessages();\n}\n\nfunction toggleMessages(): void {\n  model.open = !model.open;\n  messagesView();\n}\n\nfunction getMessages(): void {\n  const url = model.urls.messagesUrl;\n  const req = buildReq({}, \"get\");\n\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(data => {\n      model.messages = data.threads.map(message => ({\n        id: message.id,\n        title: message.title,\n        lastReply: {\n          author: message.last_reply.author,\n          content: message.last_reply.content,\n        },\n        nNew: message.n_new,\n        link: message.link,\n      }));\n      messagesView();\n    });\n}\n\nasync function markAllRead(): Promise<void> {\n  const req = buildReq({}, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    model.messages.forEach(message => {\n      message.nNew = 0;\n    });\n  }\n  messagesView();\n}\n\nasync function markRead(\n  event: MouseEvent,\n  message: Message,\n  div: HTMLDivElement,\n): Promise<void> {\n  event.stopPropagation();\n  const req = buildReq({ id: message.id }, \"post\");\n  const resp = await fetch(model.urls.markReadUrl, req);\n  if (resp.ok) {\n    message.nNew = 0;\n  }\n  messageView(message, div);\n  badgeView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view(): void {\n  messagesView();\n}\n\nfunction messagesView(): void {\n  const messages = document.querySelector(\".messages\");\n  const badge = messages?.querySelector(\".messages__icon__badge\");\n  const messagesList = messages?.querySelector(\".messages__messages\");\n\n  if (!messages || !badge || !messagesList) {\n    return;\n  }\n\n  badgeView();\n\n  clear(messagesList);\n\n  if (model.messages.length) {\n    model.messages.map(function(message) {\n      messagesList.appendChild(messageView(message));\n    });\n  } else {\n    messagesList.appendChild(noMessageView());\n  }\n\n  if (model.open) {\n    messages.classList.add(\"messages--open\");\n  } else {\n    messages.classList.remove(\"messages--open\");\n  }\n}\n\nfunction badgeView(): void {\n  const badge = document.querySelector(\".messages__icon__badge\");\n\n  const nNew = model.messages.filter(message => message.nNew > 0).length;\n  if (nNew) {\n    badge.textContent = nNew.toString();\n    badge.style.display = \"flex\";\n  } else {\n    badge.textContent = \"\";\n    badge.style.display = \"none\";\n  }\n}\n\nfunction messageView(\n  message: Message,\n  div: ?HTMLDivElement = null,\n): HTMLDivElement {\n  if (div) {\n    clear(div);\n  } else {\n    div = document.createElement(\"div\");\n    div.classList.add(\"message\");\n    div.addEventListener(\"click\", () => {\n      window.location.href = message.link;\n    });\n  }\n\n  if (message.nNew) {\n    div.classList.add(\"message--new\");\n  } else {\n    div.classList.remove(\"message--new\");\n  }\n\n  const icon = createSvg(\"chat_bubble\");\n  icon.classList.add(\"message__icon\");\n  div.appendChild(icon);\n\n  if (message.nNew) {\n    const new_ = document.createElement(\"span\");\n    new_.classList.add(\"message__new\");\n    new_.textContent = `( ${message.nNew} new )`;\n    div.appendChild(new_);\n  }\n\n  const title = document.createElement(\"span\");\n  title.classList.add(\"message__title\");\n  title.textContent = message.title;\n  div.appendChild(title);\n\n  if (message.nNew) {\n    const markReadBtn = document.createElement(\"span\");\n    markReadBtn.classList.add(\"message__mark-read\");\n    markReadBtn.textContent = \"Mark read\";\n    markReadBtn.addEventListener(\"click\", (event: MouseEvent) =>\n      markRead(event, message, div),\n    );\n    div.appendChild(markReadBtn);\n  }\n\n  const lastReply = document.createElement(\"div\");\n  lastReply.classList.add(\"message__last-reply\");\n  div.appendChild(lastReply);\n\n  const author = document.createElement(\"span\");\n  author.classList.add(\"message__last-reply__author\");\n  author.textContent = message.lastReply.author;\n  lastReply.appendChild(author);\n\n  const content = document.createElement(\"span\");\n  content.classList.add(\"message__last-reply__content\");\n  content.textContent = message.lastReply.content;\n  lastReply.appendChild(content);\n\n  return div;\n}\n\nfunction noMessageView(): HTMLDivElement {\n  const div = document.createElement(\"div\");\n  div.textContent = \"No messages\";\n  return div;\n}\n\n/*************/\n/* listeners */\n/*************/\n\nfunction initEventListeners(): void {\n  addMessagesOpenListener();\n  addMarkAllReadListener();\n}\n\nfunction addMessagesOpenListener(): void {\n  document\n    .querySelector(\".messages\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      event.stopPropagation();\n    });\n  document\n    .querySelector(\".messages__icon\")\n    ?.addEventListener(\"click\", function(event: MouseEvent) {\n      toggleMessages();\n    });\n  document.body?.addEventListener(\"click\", function(event: MouseEvent) {\n    if (model.open) {\n      event.stopPropagation();\n      toggleMessages();\n    }\n  });\n}\n\nfunction addMarkAllReadListener(): void {\n  document\n    .querySelector(\".messages__read-all-btn\")\n    ?.addEventListener(\"click\", () => markAllRead());\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(urls: {\n  markReadUrl: string,\n  messagesUrl: string,\n}): void {\n  initModel(urls);\n  update();\n  view();\n  initEventListeners();\n}\n","// @flow\n\"use strict\";\n\nexport { init as initDashboard } from \"./_teacher/dashboard.js\";\nexport { init as initGradebooks } from \"./_teacher/gradebooks.js\";\nexport { init as initMessages } from \"./_teacher/header/messages.js\";\nexport { init as initNotifications } from \"./_teacher/header/notifications.js\";\n"],"names":["getCsrfToken","document","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","model","initModel","collections","rationales","urls","update","getCollections","getRationales","req","resp","fetch","json","map","collection","title","description","discipline","nAssignments","n_assignments","nFollowers","n_followers","collectionsView","rationale","qTitle","choice","choiceText","text","correct","rationalesView","section","querySelector","length","classList","remove","add","init","clear","node","hasChildNodes","removeChild","lastChild","createSvg","name","useSprite","svg","createElementNS","use","setAttributeNS","svgLink","append","window","location","protocol","host","notificationsOpen","notifications","toggleNotifications","notificationsView","updateNotifications","view","badge","notificationsList","completedNotifications","filter","notification","inProgress","textContent","toString","style","display","appendChild","notificationView","noNotificationView","some","div","createElement","addEventListener","onClick","spinner","icon","error","onCloseClick","initEventListeners","addNotificationsOpenListener","event","stopPropagation","CHECK_EVERY","tasks","requestGradebook","gradebookResult","removeFailedGradebook","downloadGradebook","getTasks","url","then","initTasks","task","id","completed","datetime","Date","sort","a","b","getNotifications","Promise","all","getGradebookResult","button","currentTarget","groupId","assignmentId","group_id","assignment_id","status","split","csv","slice","join","_downloadGradebook","unshift","setTimeout","console","log","task_id","resolve","removeGradebookError","ok","t","href","escape","target","download","click","undefined","initListeners","addGradebookListeners","getElementsByClassName","forEach","open","messages","getMessages","toggleMessages","messagesView","messagesUrl","threads","message","lastReply","author","last_reply","content","nNew","n_new","link","markAllRead","markReadUrl","markRead","messageView","badgeView","messagesList","noMessageView","new_","markReadBtn","addMessagesOpenListener","addMarkAllReadListener"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
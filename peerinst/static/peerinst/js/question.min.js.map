{"version":3,"file":"question.min.js","sources":["peerinst/static/peerinst/js/_question/base.js","peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_question/start.js","peerinst/static/peerinst/js/_question/review.js","peerinst/static/peerinst/js/question.js"],"sourcesContent":["export function submitForm() {\n  document.querySelector(\"#submit-answer-form\").submit();\n}\n","export function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string, useSprite: boolean = true): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  if (useSprite) {\n    use.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", `#${name}`);\n  } else {\n    use.setAttributeNS(\n      \"http://www.w3.org/1999/xlink\",\n      \"href\",\n      window.location.protocol +\n        \"//\" +\n        window.location.host +\n        \"/static/peerinst/icons.svg#\" +\n        name,\n    );\n  }\n  svg.append(use);\n  return svg;\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","import { buildReq } from \"../ajax.js\";\nimport { clear } from \"../utils.js\";\n\n/*********/\n/* model */\n/*********/\n\nlet model;\n\nfunction initModel(submitUrl, quality) {\n  model = {\n    urls: {\n      submitUrl: submitUrl,\n    },\n    quality: quality,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction validateFormSubmit(event) {\n  event.preventDefault();\n  const data = {\n    quality: model.quality,\n    rationale: document.querySelector(\"#id_rationale\").value,\n  };\n\n  const req = buildReq(data, \"post\");\n  fetch(model.urls.submitUrl, req)\n    .then(resp => resp.json())\n    .then(failed => {\n      if (failed.failed.length) {\n        toggleQualityError(failed.failed, failed.error_msg);\n        document.querySelector(\"#answer-form\").disabled = false;\n      } else {\n        toggleQualityError();\n        document.querySelector(\"#answer-form\").disabled = true;\n        document.querySelector(\"#submit-answer-form\").submit();\n      }\n    })\n    .catch(err => console.log(err));\n}\n\n/********/\n/* view */\n/********/\n\nfunction toggleQualityError(data, errorMsg) {\n  if (data) {\n    const form = document.querySelector(\"#submit-answer-form\");\n\n    let div = document.querySelector(\".errorlist\");\n    if (!div) {\n      div = document.createElement(\"div\");\n    }\n    clear(div);\n\n    div.classList.add(\"errorlist\");\n    div.textContent = errorMsg;\n\n    const ul = document.createElement(\"ul\");\n    div.append(ul);\n    data.forEach(criterion => {\n      const li = document.createElement(\"li\");\n      li.textContent = criterion.name;\n      li.title = criterion.description;\n      ul.append(li);\n    });\n\n    form.parentNode.insertBefore(div, form);\n  } else {\n    const err = document.querySelector(\"errorlist\");\n    if (err) {\n      err.parentNode.removeChild(err);\n    }\n  }\n}\n\n/************/\n/* listners */\n/************/\n\nfunction initListeners() {\n  addSubmitListener();\n}\n\nfunction addSubmitListener() {\n  document.getElementById(\"answer-form\").addEventListener(\"click\", event => {\n    validateFormSubmit(event);\n  });\n}\n\n/********/\n/* init */\n/********/\n\nexport function init(submitUrl, quality) {\n  initModel(submitUrl, quality);\n  initListeners();\n}\n","// @flow\n\n/*********/\n/* model */\n/*********/\n\nlet model: {\n  submitAllowed: boolean,\n};\n\nfunction initModel() {\n  model = {\n    submitAllowed: false,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction startSubmitAllowedTimer(seconds: number) {\n  setInterval(allowSubmit, seconds * 1000);\n}\n\nfunction allowSubmit() {\n  model.submitAllowed = true;\n  submitButtonView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  submitButtonView();\n}\n\nfunction submitButtonView() {\n  if (model.submitAllowed) {\n    // $FlowFixMe\n    document.getElementById(\"answer-form\").disabled = false;\n  } else {\n    // $FlowFixMe\n    document.getElementById(\"answer-form\").disabled = true;\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport function init() {\n  initModel();\n  view();\n  startSubmitAllowedTimer(5);\n}\n","\"use strict\";\n\nexport { submitForm } from \"./_question/base.js\";\n\nexport { init as initStart } from \"./_question/start.js\";\n\nexport { init as initReview } from \"./_question/review.js\";\n"],"names":["submitForm","document","querySelector","submit","getCsrfToken","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","clear","node","hasChildNodes","removeChild","lastChild","model","initModel","submitUrl","quality","urls","validateFormSubmit","event","preventDefault","rationale","value","req","fetch","then","resp","json","failed","length","toggleQualityError","error_msg","disabled","catch","err","console","log","errorMsg","form","div","createElement","classList","add","textContent","ul","append","forEach","criterion","li","name","title","description","parentNode","insertBefore","initListeners","addSubmitListener","getElementById","addEventListener","init","submitAllowed","startSubmitAllowedTimer","seconds","setInterval","allowSubmit","submitButtonView","view"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9qc3VtbmVyL0RldmVsb3BtZW50L01ZREFMSVRFL2RhbGl0ZS1uZy9wZWVyaW5zdC9zdGF0aWMvcGVlcmluc3QvanMvX3F1ZXN0aW9uL2Jhc2UuanMiLCIvVXNlcnMvanN1bW5lci9EZXZlbG9wbWVudC9NWURBTElURS9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL2FqYXguanMiLCIvVXNlcnMvanN1bW5lci9EZXZlbG9wbWVudC9NWURBTElURS9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL3V0aWxzLmpzIiwiL1VzZXJzL2pzdW1uZXIvRGV2ZWxvcG1lbnQvTVlEQUxJVEUvZGFsaXRlLW5nL3BlZXJpbnN0L3N0YXRpYy9wZWVyaW5zdC9qcy9fcXVlc3Rpb24vc3RhcnQuanMiLCIvVXNlcnMvanN1bW5lci9EZXZlbG9wbWVudC9NWURBTElURS9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL19xdWVzdGlvbi9yZXZpZXcuanMiLCIvVXNlcnMvanN1bW5lci9EZXZlbG9wbWVudC9NWURBTElURS9kYWxpdGUtbmcvcGVlcmluc3Qvc3RhdGljL3BlZXJpbnN0L2pzL3F1ZXN0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBzdWJtaXRGb3JtKCkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N1Ym1pdC1hbnN3ZXItZm9ybVwiKS5zdWJtaXQoKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBnZXRDc3JmVG9rZW4oKSB7XG4gIHJldHVybiBkb2N1bWVudFxuICAgIC5nZXRFbGVtZW50c0J5TmFtZShcImNzcmZtaWRkbGV3YXJldG9rZW5cIilbMF1cbiAgICAuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFJlcShkYXRhLCBtZXRob2QpIHtcbiAgaWYgKG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLnRvVXBwZXJDYXNlKCksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBcIlgtQ1NSRlRva2VuXCI6IGdldENzcmZUb2tlbigpLFxuICAgICAgfSxcbiAgICB9O1xuICB9IGVsc2UgaWYgKG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcInBvc3RcIikge1xuICAgIGNvbnN0IGJvZHkgPSBkYXRhID8gSlNPTi5zdHJpbmdpZnkoZGF0YSkgOiBcIlwiO1xuICAgIHJldHVybiB7XG4gICAgICBtZXRob2Q6IG1ldGhvZC50b1VwcGVyQ2FzZSgpLFxuICAgICAgYm9keTogYm9keSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiWC1DU1JGVG9rZW5cIjogZ2V0Q3NyZlRva2VuKCksXG4gICAgICB9LFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoYE1ldGhvZCAke21ldGhvZH0gbm90IGltcGxlbWVudGVkIHlldC5gKTtcbiAgfVxufVxuIiwiLy8gQGZsb3dcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXIobm9kZTogSFRNTEVsZW1lbnQpOiBIVE1MRWxlbWVudCB7XG4gIHdoaWxlIChub2RlLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdERhdGV0aW1lKGRhdGV0aW1lOiBEYXRlKTogc3RyaW5nIHtcbiAgcmV0dXJuIChcbiAgICBkYXRldGltZS50b0xvY2FsZVN0cmluZyhcImVuLWNhXCIsIHsgeWVhcjogXCJudW1lcmljXCIgfSkgK1xuICAgIFwiLVwiICtcbiAgICBkYXRldGltZS50b0xvY2FsZVN0cmluZyhcImVuLWNhXCIsIHsgbW9udGg6IFwiMi1kaWdpdFwiIH0pICtcbiAgICBcIi1cIiArXG4gICAgZGF0ZXRpbWUudG9Mb2NhbGVTdHJpbmcoXCJlbi1jYVwiLCB7IGRheTogXCIyLWRpZ2l0XCIgfSkgK1xuICAgIFwiIFwiICtcbiAgICBkYXRldGltZS50b0xvY2FsZVN0cmluZyhcImVuLWNhXCIsIHsgaG91cjogXCIyLWRpZ2l0XCIsIGhvdXIxMjogZmFsc2UgfSkgK1xuICAgIFwiOlwiICtcbiAgICBkYXRldGltZS50b0xvY2FsZVN0cmluZyhcImVuLWNhXCIsIHsgbWludXRlOiBcIjItZGlnaXRcIiB9KVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3ZnKG5hbWU6IHN0cmluZywgdXNlU3ByaXRlOiBib29sZWFuID0gdHJ1ZSk6IEVsZW1lbnQge1xuICBjb25zdCBzdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcInN2Z1wiKTtcbiAgY29uc3QgdXNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJ1c2VcIik7XG4gIGlmICh1c2VTcHJpdGUpIHtcbiAgICB1c2Uuc2V0QXR0cmlidXRlTlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsIFwiaHJlZlwiLCBgIyR7bmFtZX1gKTtcbiAgfSBlbHNlIHtcbiAgICB1c2Uuc2V0QXR0cmlidXRlTlMoXG4gICAgICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgICAgIFwiaHJlZlwiLFxuICAgICAgd2luZG93LmxvY2F0aW9uLnByb3RvY29sICtcbiAgICAgICAgXCIvL1wiICtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3QgK1xuICAgICAgICBcIi9zdGF0aWMvcGVlcmluc3QvaWNvbnMuc3ZnI1wiICtcbiAgICAgICAgbmFtZSxcbiAgICApO1xuICB9XG4gIHN2Zy5hcHBlbmQodXNlKTtcbiAgcmV0dXJuIHN2Zztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dBbGVydChtc2c6IHN0cmluZykge1xuICBjb25zdCBmdWxsUGFnZUJveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGZ1bGxQYWdlQm94LmNsYXNzTGlzdC5hZGQoXCJhbGVydC1ib3hfX2Z1bGwtcGFnZVwiKTtcbiAgZnVsbFBhZ2VCb3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGZ1bGxQYWdlQm94LnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKGZ1bGxQYWdlQm94KTtcbiAgfSk7XG4gIGRvY3VtZW50LmJvZHk/LmFwcGVuZENoaWxkKGZ1bGxQYWdlQm94KTtcblxuICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBib3guY2xhc3NMaXN0LmFkZChcImFsZXJ0LWJveF9fYm94XCIpO1xuICBib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudDogTW91c2VFdmVudCkgPT5cbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKSxcbiAgKTtcbiAgZnVsbFBhZ2VCb3guYXBwZW5kQ2hpbGQoYm94KTtcblxuICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gIHNwYW4uY2xhc3NMaXN0LmFkZChcImFsZXJ0LWJveF9fbXNnXCIpO1xuICBzcGFuLnRleHRDb250ZW50ID0gbXNnO1xuICBib3guYXBwZW5kQ2hpbGQoc3Bhbik7XG5cbiAgY29uc3Qgb2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICBvay5jbGFzc0xpc3QuYWRkKFwiYWxlcnQtYm94X19idG5cIiwgXCJtZGMtYnV0dG9uXCIsIFwibWRjLWJ1dHRvbi0tdW5lbGV2YXRlZFwiKTtcbiAgb2sudGV4dENvbnRlbnQgPSBcIk9rXCI7XG4gIGJveC5hcHBlbmRDaGlsZChvayk7XG59XG4iLCJpbXBvcnQgeyBidWlsZFJlcSB9IGZyb20gXCIuLi9hamF4LmpzXCI7XG5pbXBvcnQgeyBjbGVhciB9IGZyb20gXCIuLi91dGlscy5qc1wiO1xuXG4vKioqKioqKioqL1xuLyogbW9kZWwgKi9cbi8qKioqKioqKiovXG5cbmxldCBtb2RlbDtcblxuZnVuY3Rpb24gaW5pdE1vZGVsKHN1Ym1pdFVybCwgcXVhbGl0eSkge1xuICBtb2RlbCA9IHtcbiAgICB1cmxzOiB7XG4gICAgICBzdWJtaXRVcmw6IHN1Ym1pdFVybCxcbiAgICB9LFxuICAgIHF1YWxpdHk6IHF1YWxpdHksXG4gIH07XG59XG5cbi8qKioqKioqKioqL1xuLyogdXBkYXRlICovXG4vKioqKioqKioqKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVGb3JtU3VibWl0KGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IGRhdGEgPSB7XG4gICAgcXVhbGl0eTogbW9kZWwucXVhbGl0eSxcbiAgICByYXRpb25hbGU6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaWRfcmF0aW9uYWxlXCIpLnZhbHVlLFxuICB9O1xuXG4gIGNvbnN0IHJlcSA9IGJ1aWxkUmVxKGRhdGEsIFwicG9zdFwiKTtcbiAgZmV0Y2gobW9kZWwudXJscy5zdWJtaXRVcmwsIHJlcSlcbiAgICAudGhlbihyZXNwID0+IHJlc3AuanNvbigpKVxuICAgIC50aGVuKGZhaWxlZCA9PiB7XG4gICAgICBpZiAoZmFpbGVkLmZhaWxlZC5sZW5ndGgpIHtcbiAgICAgICAgdG9nZ2xlUXVhbGl0eUVycm9yKGZhaWxlZC5mYWlsZWQsIGZhaWxlZC5lcnJvcl9tc2cpO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Fuc3dlci1mb3JtXCIpLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2dnbGVRdWFsaXR5RXJyb3IoKTtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNhbnN3ZXItZm9ybVwiKS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc3VibWl0LWFuc3dlci1mb3JtXCIpLnN1Ym1pdCgpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcbn1cblxuLyoqKioqKioqL1xuLyogdmlldyAqL1xuLyoqKioqKioqL1xuXG5mdW5jdGlvbiB0b2dnbGVRdWFsaXR5RXJyb3IoZGF0YSwgZXJyb3JNc2cpIHtcbiAgaWYgKGRhdGEpIHtcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdWJtaXQtYW5zd2VyLWZvcm1cIik7XG5cbiAgICBsZXQgZGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5lcnJvcmxpc3RcIik7XG4gICAgaWYgKCFkaXYpIHtcbiAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgfVxuICAgIGNsZWFyKGRpdik7XG5cbiAgICBkaXYuY2xhc3NMaXN0LmFkZChcImVycm9ybGlzdFwiKTtcbiAgICBkaXYudGV4dENvbnRlbnQgPSBlcnJvck1zZztcblxuICAgIGNvbnN0IHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgIGRpdi5hcHBlbmQodWwpO1xuICAgIGRhdGEuZm9yRWFjaChjcml0ZXJpb24gPT4ge1xuICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICBsaS50ZXh0Q29udGVudCA9IGNyaXRlcmlvbi5uYW1lO1xuICAgICAgbGkudGl0bGUgPSBjcml0ZXJpb24uZGVzY3JpcHRpb247XG4gICAgICB1bC5hcHBlbmQobGkpO1xuICAgIH0pO1xuXG4gICAgZm9ybS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkaXYsIGZvcm0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGVyciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJlcnJvcmxpc3RcIik7XG4gICAgaWYgKGVycikge1xuICAgICAgZXJyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXJyKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqKioqKioqKioqKi9cbi8qIGxpc3RuZXJzICovXG4vKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBpbml0TGlzdGVuZXJzKCkge1xuICBhZGRTdWJtaXRMaXN0ZW5lcigpO1xufVxuXG5mdW5jdGlvbiBhZGRTdWJtaXRMaXN0ZW5lcigpIHtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbnN3ZXItZm9ybVwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZXZlbnQgPT4ge1xuICAgIHZhbGlkYXRlRm9ybVN1Ym1pdChldmVudCk7XG4gIH0pO1xufVxuXG4vKioqKioqKiovXG4vKiBpbml0ICovXG4vKioqKioqKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KHN1Ym1pdFVybCwgcXVhbGl0eSkge1xuICBpbml0TW9kZWwoc3VibWl0VXJsLCBxdWFsaXR5KTtcbiAgaW5pdExpc3RlbmVycygpO1xufVxuIiwiLy8gQGZsb3dcblxuLyoqKioqKioqKi9cbi8qIG1vZGVsICovXG4vKioqKioqKioqL1xuXG5sZXQgbW9kZWw6IHtcbiAgc3VibWl0QWxsb3dlZDogYm9vbGVhbixcbn07XG5cbmZ1bmN0aW9uIGluaXRNb2RlbCgpIHtcbiAgbW9kZWwgPSB7XG4gICAgc3VibWl0QWxsb3dlZDogZmFsc2UsXG4gIH07XG59XG5cbi8qKioqKioqKioqL1xuLyogdXBkYXRlICovXG4vKioqKioqKioqKi9cblxuZnVuY3Rpb24gc3RhcnRTdWJtaXRBbGxvd2VkVGltZXIoc2Vjb25kczogbnVtYmVyKSB7XG4gIHNldEludGVydmFsKGFsbG93U3VibWl0LCBzZWNvbmRzICogMTAwMCk7XG59XG5cbmZ1bmN0aW9uIGFsbG93U3VibWl0KCkge1xuICBtb2RlbC5zdWJtaXRBbGxvd2VkID0gdHJ1ZTtcbiAgc3VibWl0QnV0dG9uVmlldygpO1xufVxuXG4vKioqKioqKiovXG4vKiB2aWV3ICovXG4vKioqKioqKiovXG5cbmZ1bmN0aW9uIHZpZXcoKSB7XG4gIHN1Ym1pdEJ1dHRvblZpZXcoKTtcbn1cblxuZnVuY3Rpb24gc3VibWl0QnV0dG9uVmlldygpIHtcbiAgaWYgKG1vZGVsLnN1Ym1pdEFsbG93ZWQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbnN3ZXItZm9ybVwiKS5kaXNhYmxlZCA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFuc3dlci1mb3JtXCIpLmRpc2FibGVkID0gdHJ1ZTtcbiAgfVxufVxuXG4vKioqKioqKiovXG4vKiBpbml0ICovXG4vKioqKioqKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KCkge1xuICBpbml0TW9kZWwoKTtcbiAgdmlldygpO1xuICBzdGFydFN1Ym1pdEFsbG93ZWRUaW1lcig1KTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnQgeyBzdWJtaXRGb3JtIH0gZnJvbSBcIi4vX3F1ZXN0aW9uL2Jhc2UuanNcIjtcblxuZXhwb3J0IHsgaW5pdCBhcyBpbml0U3RhcnQgfSBmcm9tIFwiLi9fcXVlc3Rpb24vc3RhcnQuanNcIjtcblxuZXhwb3J0IHsgaW5pdCBhcyBpbml0UmV2aWV3IH0gZnJvbSBcIi4vX3F1ZXN0aW9uL3Jldmlldy5qc1wiO1xuIl0sIm5hbWVzIjpbInN1Ym1pdEZvcm0iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzdWJtaXQiLCJnZXRDc3JmVG9rZW4iLCJnZXRFbGVtZW50c0J5TmFtZSIsImdldEF0dHJpYnV0ZSIsImJ1aWxkUmVxIiwiZGF0YSIsIm1ldGhvZCIsInRvTG93ZXJDYXNlIiwidG9VcHBlckNhc2UiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJFcnJvciIsImNsZWFyIiwibm9kZSIsImhhc0NoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImxhc3RDaGlsZCIsIm1vZGVsIiwiaW5pdE1vZGVsIiwic3VibWl0VXJsIiwicXVhbGl0eSIsInVybHMiLCJ2YWxpZGF0ZUZvcm1TdWJtaXQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmF0aW9uYWxlIiwidmFsdWUiLCJyZXEiLCJmZXRjaCIsInRoZW4iLCJyZXNwIiwianNvbiIsImZhaWxlZCIsImxlbmd0aCIsInRvZ2dsZVF1YWxpdHlFcnJvciIsImVycm9yX21zZyIsImRpc2FibGVkIiwiY2F0Y2giLCJlcnIiLCJjb25zb2xlIiwibG9nIiwiZXJyb3JNc2ciLCJmb3JtIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwidWwiLCJhcHBlbmQiLCJmb3JFYWNoIiwiY3JpdGVyaW9uIiwibGkiLCJuYW1lIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJpbml0TGlzdGVuZXJzIiwiYWRkU3VibWl0TGlzdGVuZXIiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbml0Iiwic3VibWl0QWxsb3dlZCIsInN0YXJ0U3VibWl0QWxsb3dlZFRpbWVyIiwic2Vjb25kcyIsInNldEludGVydmFsIiwiYWxsb3dTdWJtaXQiLCJzdWJtaXRCdXR0b25WaWV3IiwidmlldyJdLCJtYXBwaW5ncyI6Ijs7O0FBQU8sU0FBU0EsVUFBVCxHQUFzQjtFQUMzQkMsUUFBUSxDQUFDQyxhQUFULENBQXVCLHFCQUF2QixFQUE4Q0MsTUFBOUM7OztBQ0RLLFNBQVNDLFlBQVQsR0FBd0I7U0FDdEJILFFBQVEsQ0FDWkksaUJBREksQ0FDYyxxQkFEZCxFQUNxQyxDQURyQyxF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"}
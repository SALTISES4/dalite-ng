{"version":3,"file":"question.min.js","sources":["peerinst/static/peerinst/js/_question/base.js","peerinst/static/peerinst/js/ajax.js","peerinst/static/peerinst/js/utils.js","peerinst/static/peerinst/js/_question/start.js","peerinst/static/peerinst/js/_question/review.js","peerinst/static/peerinst/js/question.js"],"sourcesContent":["export function submitForm() {\n  document.querySelector(\"#submit-answer-form\").submit();\n}\n","export function getCsrfToken() {\n  return document\n    .getElementsByName(\"csrfmiddlewaretoken\")[0]\n    .getAttribute(\"value\");\n}\n\nexport function buildReq(data, method) {\n  if (method.toLowerCase() === \"get\") {\n    return {\n      method: method.toUpperCase(),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else if (method.toLowerCase() === \"post\") {\n    const body = data ? JSON.stringify(data) : \"\";\n    return {\n      method: method.toUpperCase(),\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"X-CSRFToken\": getCsrfToken(),\n      },\n    };\n  } else {\n    throw Error(`Method ${method} not implemented yet.`);\n  }\n}\n","// @flow\n\"use strict\";\n\nexport function clear(node: HTMLElement): HTMLElement {\n  while (node.hasChildNodes()) {\n    // $FlowFixMe\n    node.removeChild(node.lastChild);\n  }\n  return node;\n}\n\nexport function formatDatetime(datetime: Date): string {\n  return (\n    datetime.toLocaleString(\"en-ca\", { year: \"numeric\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { month: \"2-digit\" }) +\n    \"-\" +\n    datetime.toLocaleString(\"en-ca\", { day: \"2-digit\" }) +\n    \" \" +\n    datetime.toLocaleString(\"en-ca\", { hour: \"2-digit\", hour12: false }) +\n    \":\" +\n    datetime.toLocaleString(\"en-ca\", { minute: \"2-digit\" })\n  );\n}\n\nexport function createSvg(name: string): Element {\n  const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n  const use = document.createElementNS(\"http://www.w3.org/2000/svg\", \"use\");\n  use.setAttributeNS(\n    \"http://www.w3.org/1999/xlink\",\n    \"href\",\n    window.location.protocol +\n      \"//\" +\n      window.location.host +\n      \"/static/peerinst/icons.svg#\" +\n      name,\n  );\n  svg.append(use);\n  return svg;\n}\n\nexport function showAlert(msg: string) {\n  const fullPageBox = document.createElement(\"div\");\n  fullPageBox.classList.add(\"alert-box__full-page\");\n  fullPageBox.addEventListener(\"click\", (event: MouseEvent) => {\n    event.stopPropagation();\n    fullPageBox.parentNode?.removeChild(fullPageBox);\n  });\n  document.body?.appendChild(fullPageBox);\n\n  const box = document.createElement(\"div\");\n  box.classList.add(\"alert-box__box\");\n  box.addEventListener(\"click\", (event: MouseEvent) =>\n    event.stopPropagation(),\n  );\n  fullPageBox.appendChild(box);\n\n  const span = document.createElement(\"span\");\n  span.classList.add(\"alert-box__msg\");\n  span.textContent = msg;\n  box.appendChild(span);\n\n  const ok = document.createElement(\"button\");\n  ok.classList.add(\"alert-box__btn\", \"mdc-button\", \"mdc-button--unelevated\");\n  ok.textContent = \"Ok\";\n  box.appendChild(ok);\n}\n","import { buildReq } from \"../ajax.js\";\nimport { clear } from \"../utils.js\";\n\n/**********/\n/* update */\n/**********/\n\nexport function validateFormSubmit(event, url, quality) {\n  event.preventDefault();\n  const data = {\n    quality: quality,\n    rationale: document.querySelector(\"#id_rationale\").value,\n  };\n\n  const req = buildReq(data, \"post\");\n  fetch(url, req)\n    .then(resp => resp.json())\n    .then(failed => {\n      if (failed.failed.length) {\n        toggleQualityError(failed.failed, failed.error_msg);\n        document.querySelector(\"#answer-form\").disabled = false;\n      } else {\n        toggleQualityError();\n        document.querySelector(\"#answer-form\").disabled = true;\n        document.querySelector(\"#submit-answer-form\").submit();\n      }\n    })\n    .catch(err => console.log(err));\n}\n\n/********/\n/* view */\n/********/\n\nfunction toggleQualityError(data, errorMsg) {\n  if (data) {\n    const form = document.querySelector(\"#submit-answer-form\");\n\n    let div = document.querySelector(\".errorlist\");\n    if (!div) {\n      div = document.createElement(\"div\");\n    }\n    clear(div);\n\n    div.classList.add(\"errorlist\");\n    div.textContent = errorMsg;\n\n    const ul = document.createElement(\"ul\");\n    div.append(ul);\n    data.forEach(criterion => {\n      const li = document.createElement(\"li\");\n      li.textContent = criterion.name;\n      li.title = criterion.description;\n      ul.append(li);\n    });\n\n    form.parentNode.insertBefore(div, form);\n  } else {\n    const err = document.querySelector(\"errorlist\");\n    if (err) {\n      err.parentNode.removeChild(err);\n    }\n  }\n}\n","// @flow\n\n/*********/\n/* model */\n/*********/\n\nlet model: {\n  submitAllowed: boolean,\n};\n\nfunction initModel() {\n  model = {\n    submitAllowed: false,\n  };\n}\n\n/**********/\n/* update */\n/**********/\n\nfunction startSubmitAllowedTimer(seconds: number) {\n  setInterval(allowSubmit, seconds * 1000);\n}\n\nfunction allowSubmit() {\n  model.submitAllowed = true;\n  submitButtonView();\n}\n\n/********/\n/* view */\n/********/\n\nfunction view() {\n  submitButtonView();\n}\n\nfunction submitButtonView() {\n  if (model.submitAllowed) {\n    // $FlowFixMe\n    document.getElementById(\"answer-form\").disabled = false;\n  } else {\n    // $FlowFixMe\n    document.getElementById(\"answer-form\").disabled = true;\n  }\n}\n\n/********/\n/* init */\n/********/\n\nexport function init() {\n  initModel();\n  view();\n  startSubmitAllowedTimer(5);\n}\n","\"use strict\";\n\nexport { submitForm } from \"./_question/base.js\";\n\nexport { validateFormSubmit } from \"./_question/start.js\";\n\nexport { init as initReview } from \"./_question/review.js\";\n"],"names":["submitForm","document","querySelector","submit","getCsrfToken","getElementsByName","getAttribute","buildReq","data","method","toLowerCase","toUpperCase","headers","body","JSON","stringify","Error","clear","node","hasChildNodes","removeChild","lastChild","validateFormSubmit","event","url","quality","preventDefault","rationale","value","req","fetch","then","resp","json","failed","length","toggleQualityError","error_msg","disabled","catch","err","console","log","errorMsg","form","div","createElement","classList","add","textContent","ul","append","forEach","criterion","li","name","title","description","parentNode","insertBefore","model","initModel","submitAllowed","startSubmitAllowedTimer","seconds","setInterval","allowSubmit","submitButtonView","view","getElementById","init"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}
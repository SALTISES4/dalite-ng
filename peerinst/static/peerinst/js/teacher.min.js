var teacher = (function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume("next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

/*********/

/* model */

/*********/

var model;

function initModel(data) {
  model = {
    collections: [],
    urls: {
      collections: data.urls.collections
    }
  };
}
/**********/

/* update */

/**********/


function update() {
  return _update.apply(this, arguments);
}

function _update() {
  _update = _asyncToGenerator(function* () {
    yield getCollections();
  });
  return _update.apply(this, arguments);
}

function getCollections() {
  return _getCollections.apply(this, arguments);
}
/********/

/* view */

/********/


function _getCollections() {
  _getCollections = _asyncToGenerator(function* () {
    var data = {};
    var req = buildReq(data, "post");
    var resp = yield fetch(model.urls.collections, req);
    var json = yield resp.json();
    model.collections = json.collections.map(function (collection) {
      return {
        title: collection.title,
        description: collection.description,
        discipline: collection.discipline,
        nAssignments: collection.n_assignments,
        nFollowers: collection.n_followers
      };
    });
    collectionsView();
  });
  return _getCollections.apply(this, arguments);
}

function collectionsView() {
  var section = document.querySelector(".collections");

  if (!section) {
    throw new Error("There is a missing section with class `collections`");
  }

  if (model.collections.length) {
    section.classList.remove("collections--hidden");
  } else {
    section.classList.add("collections--hidden");
  }
}
/********/

/* init */

/********/


function init(_x) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator(function* (data) {
    initModel(data);
    yield update();
  });
  return _init.apply(this, arguments);
}

"use strict";

exports.initDashboard = init;

return exports;

}({}));
//# sourceMappingURL=teacher.min.js.map

(function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume("next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

/*********/

/* model */

/*********/

/**********/

/* update */

/**********/

/********/

/* view */

/********/

/********/

/* init */

/********/
function init$1(_x) {
  return _init$1.apply(this, arguments);
}

function _init$1() {
  _init$1 = _asyncToGenerator(function* (data) {});
  return _init$1.apply(this, arguments);
}

/********/

/* init */

/********/
function init$$1(_x) {
  return _init.apply(this, arguments);
}

function _init() {
  _init = _asyncToGenerator(function* (data) {
    init$1({});
  });
  return _init.apply(this, arguments);
}

"use strict";

function getCsrfToken() {
  return document.getElementsByName("csrfmiddlewaretoken")[0].getAttribute("value");
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

function createSvg(name) {
  var useSprite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
  use.setAttributeNS("http://www.w3.org/1999/xlink", "href", svgLink(name, useSprite));
  svg.append(use);
  return svg;
}
function svgLink(name) {
  var useSprite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

  if (useSprite) {
    return "#".concat(name);
  } else {
    return window.location.protocol + "//" + window.location.host + "/static/peerinst/icons.svg#" + name;
  }
}

/*********/

/* model */

/*********/

var model$1;

function initModel$1() {
  model$1 = {
    notificationsOpen: false,
    notifications: []
  };
}
/**********/

/* update */

/**********/


function toggleNotifications() {
  model$1.notificationsOpen = !model$1.notificationsOpen;
  notificationsView();
}

function updateNotifications(notifications) {
  model$1.notifications = notifications;
  notificationsView();
}
/********/

/* view */

/********/

function view() {
  notificationsView();
}

function notificationsView() {
  var notifications = document.querySelector(".notifications");
  var badge = notifications === null || notifications === void 0 ? void 0 : notifications.querySelector(".notifications__icon__badge");
  var notificationsList = notifications === null || notifications === void 0 ? void 0 : notifications.querySelector(".notifications__notifications");

  if (!notifications || !badge || !notificationsList) {
    return;
  }

  var completedNotifications = model$1.notifications.filter(function (notification) {
    return !notification.inProgress;
  });

  if (completedNotifications.length > 0) {
    badge.textContent = completedNotifications.length.toString();
    badge.style.display = "flex";
  } else {
    badge.textContent = "";
    badge.style.display = "none";
  }

  clear(notificationsList);

  if (model$1.notifications.length) {
    model$1.notifications.map(function (notification) {
      notificationsList.appendChild(notificationView(notification));
    });
  } else {
    notificationsList.appendChild(noNotificationView());
  }

  if (model$1.notifications.some(function (notification) {
    return notification.inProgress;
  })) {
    var _document$querySelect;

    (_document$querySelect = document.querySelector(".notifications__spinner")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.classList.add("notifications__spinner--loading");
  } else {
    var _document$querySelect2;

    (_document$querySelect2 = document.querySelector(".notifications__spinner")) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.classList.remove("notifications__spinner--loading");
  }

  if (model$1.notificationsOpen) {
    notifications.classList.add("notifications--open");
  } else {
    notifications.classList.remove("notifications--open");
  }
}

function notificationView(notification) {
  var div = document.createElement("div");
  div.classList.add("notification");
  div.addEventListener("click", notification.onClick);

  if (notification.inProgress) {
    var spinner = document.createElement("loading-spinner");
    spinner.classList.add("notification__spinner");
    div.appendChild(spinner);
  } else {
    var icon;

    if (notification.error) {
      icon = createSvg("error");
      icon.classList.add("notification__icon--error");
      var remove = createSvg("close");
      remove.classList.add("notification__close");
      remove.addEventListener("click", notification.onCloseClick);
      div.appendChild(remove);
    } else {
      div.classList.add("notification--completed");
      icon = createSvg("cloud_download");
    }

    icon.classList.add("notification__icon");
    div.appendChild(icon);
  }

  var description = document.createElement("span");
  description.classList.add("notification__description");
  description.textContent = notification.text;
  div.appendChild(description);
  return div;
}

function noNotificationView() {
  var div = document.createElement("div");
  div.textContent = "No new notifications";
  return div;
}
/*************/

/* listeners */

/*************/


function initEventListeners() {
  addNotificationsOpenListener();
}

function addNotificationsOpenListener() {
  var _document$querySelect3, _document$querySelect4, _document$body;

  (_document$querySelect3 = document.querySelector(".notifications")) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.addEventListener("click", function (event) {
    event.stopPropagation();
  });
  (_document$querySelect4 = document.querySelector(".notifications__icon")) === null || _document$querySelect4 === void 0 ? void 0 : _document$querySelect4.addEventListener("click", function (event) {
    toggleNotifications();
  });
  (_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.addEventListener("click", function (event) {
    if (model$1.notificationsOpen) {
      event.stopPropagation();
      toggleNotifications();
    }
  });
}
/********/

/* init */

/********/


function init$3() {
  initModel$1();
  view();
  initEventListeners();
}

/*********/

/* model */

/*********/
var CHECK_EVERY = 1;
var model;

function initModel(urls) {
  model = {
    tasks: [],
    urls: {
      requestGradebook: urls.requestGradebook,
      gradebookResult: urls.gradebookResult,
      removeFailedGradebook: urls.removeFailedGradebook,
      downloadGradebook: urls.downloadGradebook,
      tasks: urls.tasks
    }
  };
}
/**********/

/* update */

/**********/


function update() {
  getTasks();
}

function getTasks() {
  var url = model.urls.tasks;
  var req = buildReq({}, "get");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    initTasks(data.tasks);
  });
}

function initTasks(_x) {
  return _initTasks.apply(this, arguments);
}

function _initTasks() {
  _initTasks = _asyncToGenerator(function* (data) {
    model.tasks = data.map(function (task) {
      return {
        id: task.id,
        description: task.description,
        completed: task.completed,
        datetime: new Date(task.datetime),
        error: false
      };
    }).sort(function (a, b) {
      return a.datetime > b.datetime ? -1 : a.datetime < b.datetime ? 1 : 0;
    });
    updateNotifications(getNotifications());
    Promise.all(model.tasks.filter(function (task) {
      return !task.completed;
    }).map(function (task) {
      return getGradebookResult(task);
    }));
  });
  return _initTasks.apply(this, arguments);
}

function requestGradebook(_x2) {
  return _requestGradebook.apply(this, arguments);
}

function _requestGradebook() {
  _requestGradebook = _asyncToGenerator(function* (event) {
    event.stopPropagation();
    var button = event.currentTarget;
    var groupId = button.getAttribute("data-group");
    var assignmentId = button.getAttribute("data-assignment");
    var data = {
      group_id: groupId,
      assignment_id: assignmentId
    };
    var url = model.urls.requestGradebook;
    var req = buildReq(data, "post");
    var resp = yield fetch(url, req);

    if (resp.status === 200) {
      var _data = yield resp.text();

      var title = _data.split("\n")[0];

      var csv = _data.split("\n").slice(1).join("\n");

      _downloadGradebook(title, csv);
    } else if (resp.status === 201) {
      var _data2 = yield resp.json();

      var task = {
        id: _data2.id,
        description: _data2.description,
        completed: _data2.completed,
        datetime: new Date(_data2.datetime),
        error: false
      };
      model.tasks.unshift(task);
      setTimeout(function () {
        return getGradebookResult(task);
      }, 0);
      updateNotifications(getNotifications());
    } else {
      console.log(resp);
    }
  });
  return _requestGradebook.apply(this, arguments);
}

function getGradebookResult(_x3) {
  return _getGradebookResult.apply(this, arguments);
}

function _getGradebookResult() {
  _getGradebookResult = _asyncToGenerator(function* (task) {
    var url = model.urls.gradebookResult;
    var req = buildReq({
      task_id: task.id
    }, "post");
    var resp = yield fetch(url, req);

    if (resp.status == 200) {
      task.completed = true;
      updateNotifications(getNotifications());
    } else if (resp.status == 202) {
      yield new Promise(function (resolve) {
        return setTimeout(function () {
          return getGradebookResult(task);
        }, CHECK_EVERY * 1000);
      });
    } else {
      task.completed = true;
      task.error = true;
      updateNotifications(getNotifications());
    }
  });
  return _getGradebookResult.apply(this, arguments);
}

function removeGradebookError(_x4) {
  return _removeGradebookError.apply(this, arguments);
}

function _removeGradebookError() {
  _removeGradebookError = _asyncToGenerator(function* (task) {
    var url = model.urls.removeFailedGradebook;
    var req = buildReq({
      task_id: task.id
    }, "post");
    var resp = yield fetch(url, req);

    if (resp.ok) {
      model.tasks = model.tasks.filter(function (t) {
        return t.id !== task.id;
      });
    }

    updateNotifications(getNotifications());
  });
  return _removeGradebookError.apply(this, arguments);
}

function downloadGradebook(_x5) {
  return _downloadGradebook2.apply(this, arguments);
}

function _downloadGradebook2() {
  _downloadGradebook2 = _asyncToGenerator(function* (task) {
    var data = {
      task_id: task.id
    };
    var url = model.urls.downloadGradebook;
    var req = buildReq(data, "post");
    var resp = yield fetch(url, req);

    if (resp.ok) {
      var _data3 = yield resp.text();

      var title = _data3.split("\n")[0];

      var csv = _data3.split("\n").slice(1).join("\n");

      _downloadGradebook(title, csv);

      model.tasks = model.tasks.filter(function (t) {
        return t.id != task.id;
      });
      updateNotifications(getNotifications());
    } else {
      console.log(resp);
    }
  });
  return _downloadGradebook2.apply(this, arguments);
}

function _downloadGradebook(title, csv) {
  var a = document.createElement("a");
  a.href = "data:text/csv;charset=utf-8, ".concat(escape(csv));
  a.target = "_blank";
  a.download = title;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
}

function getNotifications() {
  return model.tasks.map(function (task) {
    return {
      text: task.completed ? task.error ? "There was an error creating the gradebook for ".concat(task.description, ".") : "The ".concat(task.description, " is ready.") : "Computing the ".concat(task.description, "..."),
      inProgress: !task.completed,
      error: task.error,
      onClick: task.completed && !task.error ?
      /*#__PURE__*/
      _asyncToGenerator(function* () {
        return yield downloadGradebook(task);
      }) :
      /*#__PURE__*/
      _asyncToGenerator(function* () {
        return undefined;
      }),
      onCloseClick: function () {
        var _onCloseClick = _asyncToGenerator(function* () {
          return yield removeGradebookError(task);
        });

        function onCloseClick() {
          return _onCloseClick.apply(this, arguments);
        }

        return onCloseClick;
      }()
    };
  });
}
/********/

/* view */

/********/

/*************/

/* listeners */

/*************/


function initListeners() {
  addGradebookListeners();
}

function addGradebookListeners() {
  _toConsumableArray(document.getElementsByClassName("gradebook-button")).forEach(function (button) {
    button.addEventListener("click",
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(function* (event) {
        return yield requestGradebook(event);
      });

      return function (_x6) {
        return _ref3.apply(this, arguments);
      };
    }());
  });
}
/********/

/* init */

/********/


function init$2(urls) {
  initModel(urls);
  update();
  initListeners();
}

/*********/

/* model */

/*********/

var model$2;

function initModel$2(urls) {
  model$2 = {
    open: false,
    messages: [],
    urls: urls
  };
}
/**********/

/* update */

/**********/


function update$1() {
  getMessages();
}

function toggleMessages() {
  model$2.open = !model$2.open;
  messagesView();
}

function getMessages() {
  var url = model$2.urls.messagesUrl;
  var req = buildReq({}, "get");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    model$2.messages = data.threads.map(function (message) {
      return {
        id: message.id,
        title: message.title,
        lastReply: {
          author: message.last_reply.author,
          content: message.last_reply.content
        },
        nNew: message.n_new,
        link: message.link
      };
    });
    messagesView();
  });
}

function markAllRead() {
  return _markAllRead.apply(this, arguments);
}

function _markAllRead() {
  _markAllRead = _asyncToGenerator(function* () {
    var req = buildReq({}, "post");
    var resp = yield fetch(model$2.urls.markReadUrl, req);

    if (resp.ok) {
      model$2.messages.forEach(function (message) {
        message.nNew = 0;
      });
    }

    messagesView();
  });
  return _markAllRead.apply(this, arguments);
}

function markRead(_x, _x2, _x3) {
  return _markRead.apply(this, arguments);
}
/********/

/* view */

/********/


function _markRead() {
  _markRead = _asyncToGenerator(function* (event, message, div) {
    event.stopPropagation();
    var req = buildReq({
      id: message.id
    }, "post");
    var resp = yield fetch(model$2.urls.markReadUrl, req);

    if (resp.ok) {
      message.nNew = 0;
    }

    messageView(message, div);
    badgeView();
  });
  return _markRead.apply(this, arguments);
}

function view$1() {
  messagesView();
}

function messagesView() {
  var messages = document.querySelector(".messages");
  var badge = messages === null || messages === void 0 ? void 0 : messages.querySelector(".messages__icon__badge");
  var messagesList = messages === null || messages === void 0 ? void 0 : messages.querySelector(".messages__messages");

  if (!messages || !badge || !messagesList) {
    return;
  }

  badgeView();
  clear(messagesList);

  if (model$2.messages.length) {
    model$2.messages.map(function (message) {
      messagesList.appendChild(messageView(message));
    });
  } else {
    messagesList.appendChild(noMessageView());
  }

  if (model$2.open) {
    messages.classList.add("messages--open");
  } else {
    messages.classList.remove("messages--open");
  }
}

function badgeView() {
  var badge = document.querySelector(".messages__icon__badge");
  var nNew = model$2.messages.filter(function (message) {
    return message.nNew > 0;
  }).length;

  if (nNew) {
    badge.textContent = nNew.toString();
    badge.style.display = "flex";
  } else {
    badge.textContent = "";
    badge.style.display = "none";
  }
}

function messageView(message) {
  var div = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (div) {
    clear(div);
  } else {
    div = document.createElement("div");
    div.classList.add("message");
    div.addEventListener("click", function () {
      window.location.href = message.link;
    });
  }

  if (message.nNew) {
    div.classList.add("message--new");
  } else {
    div.classList.remove("message--new");
  }

  var icon = createSvg("chat_bubble");
  icon.classList.add("message__icon");
  div.appendChild(icon);

  if (message.nNew) {
    var new_ = document.createElement("span");
    new_.classList.add("message__new");
    new_.textContent = "( ".concat(message.nNew, " new )");
    div.appendChild(new_);
  }

  var title = document.createElement("span");
  title.classList.add("message__title");
  title.textContent = message.title;
  div.appendChild(title);

  if (message.nNew) {
    var markReadBtn = document.createElement("span");
    markReadBtn.classList.add("message__mark-read");
    markReadBtn.textContent = "Mark read";
    markReadBtn.addEventListener("click", function (event) {
      return markRead(event, message, div);
    });
    div.appendChild(markReadBtn);
  }

  var lastReply = document.createElement("div");
  lastReply.classList.add("message__last-reply");
  div.appendChild(lastReply);
  var author = document.createElement("span");
  author.classList.add("message__last-reply__author");
  author.textContent = message.lastReply.author;
  lastReply.appendChild(author);
  var content = document.createElement("span");
  content.classList.add("message__last-reply__content");
  content.textContent = message.lastReply.content;
  lastReply.appendChild(content);
  return div;
}

function noMessageView() {
  var div = document.createElement("div");
  div.textContent = "No messages";
  return div;
}
/*************/

/* listeners */

/*************/


function initEventListeners$1() {
  addMessagesOpenListener();
  addMarkAllReadListener();
}

function addMessagesOpenListener() {
  var _document$querySelect, _document$querySelect2, _document$body;

  (_document$querySelect = document.querySelector(".messages")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.addEventListener("click", function (event) {
    event.stopPropagation();
  });
  (_document$querySelect2 = document.querySelector(".messages__icon")) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.addEventListener("click", function (event) {
    toggleMessages();
  });
  (_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.addEventListener("click", function (event) {
    if (model$2.open) {
      event.stopPropagation();
      toggleMessages();
    }
  });
}

function addMarkAllReadListener() {
  var _document$querySelect3;

  (_document$querySelect3 = document.querySelector(".messages__read-all-btn")) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.addEventListener("click", function () {
    return markAllRead();
  });
}
/********/

/* init */

/********/


function init$4(urls) {
  initModel$2(urls);
  update$1();
  view$1();
  initEventListeners$1();
}

"use strict";

exports.initDashboard = init$$1;
exports.initGradebooks = init$2;
exports.initMessages = init$4;
exports.initNotifications = init$3;

}((this.teacher = this.teacher || {})));
//# sourceMappingURL=teacher.min.js.map

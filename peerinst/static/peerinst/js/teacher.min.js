var teacher = (function (exports) {
'use strict';

function _AwaitValue(value) {
  this.wrapped = value;
}

function _AsyncGenerator(gen) {
  var front, back;

  function send(key, arg) {
    return new Promise(function (resolve, reject) {
      var request = {
        key: key,
        arg: arg,
        resolve: resolve,
        reject: reject,
        next: null
      };

      if (back) {
        back = back.next = request;
      } else {
        front = back = request;
        resume(key, arg);
      }
    });
  }

  function resume(key, arg) {
    try {
      var result = gen[key](arg);
      var value = result.value;
      var wrappedAwait = value instanceof _AwaitValue;
      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {
        if (wrappedAwait) {
          resume("next", arg);
          return;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        front.resolve({
          value: value,
          done: true
        });
        break;

      case "throw":
        front.reject(value);
        break;

      default:
        front.resolve({
          value: value,
          done: false
        });
        break;
    }

    front = front.next;

    if (front) {
      resume(front.key, front.arg);
    } else {
      back = null;
    }
  }

  this._invoke = send;

  if (typeof gen.return !== "function") {
    this.return = undefined;
  }
}

if (typeof Symbol === "function" && Symbol.asyncIterator) {
  _AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
    return this;
  };
}

_AsyncGenerator.prototype.next = function (arg) {
  return this._invoke("next", arg);
};

_AsyncGenerator.prototype.throw = function (arg) {
  return this._invoke("throw", arg);
};

_AsyncGenerator.prototype.return = function (arg) {
  return this._invoke("return", arg);
};

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function getCsrfToken() {
  var name = "csrftoken";

  if (document.cookie && document.cookie !== "") {
    return document.cookie.split(";").map(function (c) {
      return c.trim();
    }).filter(function (c) {
      return c.substring(0, name.length + 1) === name + "=";
    }).map(function (c) {
      return decodeURIComponent(c.substring(name.length + 1));
    })[0];
  } else {
    return null;
  }
}
function buildReq(data, method) {
  if (method.toLowerCase() === "get") {
    return {
      method: method.toUpperCase(),
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else if (method.toLowerCase() === "post") {
    var body = data ? JSON.stringify(data) : "";
    return {
      method: method.toUpperCase(),
      body: body,
      headers: {
        "Content-Type": "application/json",
        "X-CSRFToken": getCsrfToken()
      }
    };
  } else {
    throw Error("Method ".concat(method, " not implemented yet."));
  }
}

"use strict";

function clear(node) {
  while (node.hasChildNodes()) {
    // $FlowFixMe
    node.removeChild(node.lastChild);
  }

  return node;
}

function createSvg(name) {
  var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var use = document.createElementNS("http://www.w3.org/2000/svg", "use");
  use.setAttributeNS("http://www.w3.org/1999/xlink", "href", window.location.protocol + "//" + window.location.host + "/static/peerinst/icons.svg#" + name);
  svg.append(use);
  return svg;
}

/*********/

/* model */

/*********/

var model$1;

function initModel$1(notifications) {
  model$1 = {
    notificationsOpen: false,
    notifications: notifications
  };
}
/**********/

/* update */

/**********/


function toggleNotifications() {
  model$1.notificationsOpen = !model$1.notificationsOpen;
  notificationsView();
}
/********/

/* view */

/********/


function view() {
  notificationsView();
}

function notificationsView() {
  var notifications = document.querySelector(".notifications");
  var badge = notifications === null || notifications === void 0 ? void 0 : notifications.querySelector(".notifications__icon__badge");
  var notificationsList = notifications === null || notifications === void 0 ? void 0 : notifications.querySelector(".notifications__notifications");

  if (!notifications || !badge || !notificationsList) {
    return;
  }

  if (model$1.notifications.length) {
    badge.textContent = model$1.notifications.length.toString();
    badge.style.display = "flex";
  } else {
    badge.textContent = "";
    badge.style.display = "none";
  }

  clear(notificationsList);

  if (model$1.notifications.length) {
    model$1.notifications.map(function (notification) {
      notificationsList.appendChild(notificationView(notification));
    });
  } else {
    notificationsList.appendChild(noNotificationView());
  }

  if (model$1.notificationsOpen) {
    notifications.classList.add("notifications--open");
  } else {
    notifications.classList.remove("notifications--open");
  }
}

function notificationView(notification) {
  var div = document.createElement("div");
  div.classList.add("notification");
  div.addEventListener("click", notification.onClick);

  if (notification.inProgress) {
    var spinner = document.createElement("loading-spinner");
    spinner.classList.add("notification__spinner");
    div.appendChild(spinner);
  } else {
    var icon = createSvg("cloud_download");
    icon.classList.add("notification__icon");
    div.appendChild(icon);
  }

  var description = document.createElement("span");
  description.classList.add("notification__description");
  description.textContent = notification.text;
  div.appendChild(description);
  return div;
}

function noNotificationView() {
  var div = document.createElement("div");
  div.textContent = "No new notifications";
  return div;
}
/*************/

/* listeners */

/*************/


function initEventListeners() {
  addNotificationsOpenListener();
}

function addNotificationsOpenListener() {
  var _document$querySelect, _document$querySelect2, _document$body;

  (_document$querySelect = document.querySelector(".notifications")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.addEventListener("click", function (event) {
    event.stopPropagation();
  });
  (_document$querySelect2 = document.querySelector(".notifications__icon")) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.addEventListener("click", function (event) {
    toggleNotifications();
  });
  (_document$body = document.body) === null || _document$body === void 0 ? void 0 : _document$body.addEventListener("click", function (event) {
    if (model$1.notificationsOpen) {
      toggleNotifications();
    }
  });
}
/********/

/* init */

/********/


function init$1(notifications) {
  initModel$1(notifications);
  view();
  initEventListeners();
}

/*********/

/* model */

/*********/

var model;

function initModel(urls) {
  model = {
    tasks: [],
    urls: {
      requestReport: urls.requestReport,
      reportResult: urls.reportResult,
      tasks: urls.tasks
    }
  };
}
/**********/

/* update */

/**********/


function update() {
  getTasks();
}

function getTasks() {
  var url = model.urls.tasks;
  var req = buildReq({}, "get");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {
    initTasks(data.tasks);
  });
}

function initTasks(data) {
  model.tasks = data.map(function (task) {
    return {
      id: task.task_id,
      description: task.description,
      completed: task.completed,
      datetime: new Date(task.datetime)
    };
  });
  var notifications = model.tasks.map(function (task) {
    return {
      text: task.completed ? "Your report for ".concat(task.description, " is ready.") : "Computing report for ".concat(task.description, "..."),
      inProgress: !task.completed,
      onClick: function onClick() {
        return downloadReport(task.id);
      }
    };
  });
  init$1(notifications);
}

function requestReport(event) {
  event.stopPropagation();
  var button = event.currentTarget;
  var group_id = button.getAttribute("data-group");
  var assignment_id = button.getAttribute("data-assignment");
  var data = {
    group_id: group_id,
    assignment_id: assignment_id
  };
  var url = model.urls.requestReport;
  var req = buildReq(data, "post");
  fetch(url, req).then(function (resp) {
    return resp.json();
  }).then(function (data) {}).catch(function (err) {
    console.log(err);
  });
}

function downloadReport(taskId) {}
/********/

/* view */

/********/

/*************/

/* listeners */

/*************/


function initListeners() {
  addReportListeners();
}

function addReportListeners() {
  _toConsumableArray(document.getElementsByClassName("report-button")).forEach(function (button) {
    button.addEventListener("click", function (event) {
      return requestReport(event);
    });
  });
}
/********/

/* init */

/********/


function init$$1(urls) {
  initModel(urls);
  update();
  initListeners();
}

"use strict";

exports.initReport = init$$1;

return exports;

}({}));
//# sourceMappingURL=teacher.min.js.map
